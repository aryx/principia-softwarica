\documentclass[twocolumn]{report}

%******************************************************************************
% Prelude
%******************************************************************************
\newif\iffinal
\newif\ifverbose
\finaltrue\verbosefalse
% see also other newif in Macros.tex

%------------------------------------------------------------------------------
%history: 
%------------------------------------------------------------------------------

%thx to LP, changed for the better a few things:

%thx to codemap/codegraph:
% - see subtle dependency to 8c/enam.c through anames

%thx to this manual, better understand X11?:

%history LP-ization:
% - skeleton, mostly copy paste of Kernel.tex.nw skeleton
% - put all content of files in the Extra section, via 'pfff -lpize'
%   which also now split in chunks!
%    * function, global, struct, enum, constant, macro(actually function)
% - TODO read Extra section, identify concepts, first TOC
% - TODO distribute parts of the file before
% - TODO nullify, boolify, typeify,    scheckify
% - TODO aspecify advanced features!
% - TODO add figures
% - TODO add explanations

%------------------------------------------------------------------------------
% Packages
%------------------------------------------------------------------------------

\usepackage{../docs/latex/noweb}
 \noweboptions{footnotesizecode,nomargintag}
 %note: allow chunk on different pages, less white space at bottom of pages
 \def\nwendcode{\endtrivlist \endgroup}
 \let\nwdocspar=\par
\usepackage{xspace}
\usepackage{verbatim}
%note: required by noweblatexpad for the \t \l \n in this file
\usepackage{fancyvrb}
\usepackage{url}
\iffinal
\usepackage{hyperref}
 \hypersetup{colorlinks=true}
\fi
\usepackage[pageref]{backref}
 \def\backref{{\footnotesize cited page(s)}~}
\usepackage{cleveref} %\cref
\usepackage{multirow}
\usepackage{booktabs} 
 \newcommand{\otoprule}{\midrule[\heavyrulewidth]}
\usepackage{graphicx}
 %\usepackage[margin=0.5in]{geometry}
 %  but eat the bottom when very low
 %\usepackage{fullpage} is deprecated 
 % => do the more manual below:
 \addtolength{\oddsidemargin}{-.850in}
 \addtolength{\evensidemargin}{-.850in}
 \addtolength{\textwidth}{1.70in}
 \addtolength{\topmargin}{-.850in}
 \addtolength{\textheight}{1.70in}
%\usepackage{minitoc}

%------------------------------------------------------------------------------
% Macros
%------------------------------------------------------------------------------
\input{../docs/latex/Macros}

%------------------------------------------------------------------------------
% Config
%------------------------------------------------------------------------------
\allcodefalse
% used for forward decl, pragmas, func decl, extern decl, stats, #ifdef,
% debugging macros

%\setcounter{tocdepth}{1}

%******************************************************************************
% Title
%******************************************************************************

\begin{document}

\title{
{\Huge 
Plan9 Linker
% and Loader?
}\\
{version 0.1}
}

\author{
Yoann Padioleau\\
\texttt{yoann.padioleau@gmail.com}
}

\maketitle 
\onecolumn
\hrule
\begin{quote}
    Copyright \copyright{} 2014 Yoann Padioleau \\
    Permission is granted to copy, distribute and/or modify this document,
    except all the source code it contains, under the terms of the GNU Free
    Documentation License, Version 1.3.
\end{quote}
\hrule

%CONFIG: \dominitoc

\iffinal
\begingroup
\hypersetup{linkcolor=blue}
% need to s/onecolumn/twocolumn in report.cls :) for \tableofcontents
\twocolumn
\tableofcontents
\endgroup
\else
\tableofcontents
\fi

%******************************************************************************
% Body
%******************************************************************************

\chapter{Introduction}

%http://jvns.ca/blog/2014/09/06/how-to-read-an-executable/

\section{Motivations}

The goal of this book is to present in full details the source code of
a linker.
Why? Because I think it makes you a better programmer if
you fully understand how things work under the hood.

Here are other candidates that were considered but ultimately discarded:
\begin{itemize}
\item GNU ld and the bfd library
\item Gold
\end{itemize}

\section{Getting started}

\section{Requirements}

\section{About this document}
#include "../docs/latex/About.tex.nw"

\section{Copyright}

Most of this document is actually source code from Plan9, so
those parts are copyright by Lucent Technologies Inc.
The prose is mine and is licensed under the GNU Free Documentation
License.

\section{Acknowledgments}


\chapter{Overview}

\section{Linker principles}
% and loader? why the use the term loader instead of linker?

% link together object files. Resolve external symbols.
% (actually for plan9 the linker is also generating the
% ISA binary code (what was usually done by the assembler))


\section{[[8l]] services}

% command line interface? -o

% important -TText, see Kernel.tex.nw

\section{Example}
% show binary format? hexdump?

\section{Object format}
% the input this time (as opposed to 8a where it's the output)

% nm foo.8 => ? U? D? T?

% nm is using libmach, crachhdr, etc, generic API for object manip

\section{Code organization}

\section{Architecture overview}

% depends on 8.out.h all assembly instructions, registers, etc

% depends on 8c/ for some files
%8c -FTVw -I/home/pad/plan9/include/386 -I/home/pad/plan9/include -. -I. ../8c/enam.c
%8c -FTVw -I/home/pad/plan9/include/386 -I/home/pad/plan9/include -. -I. compat.c
%8c -FTVw -I/home/pad/plan9/include/386 -I/home/pad/plan9/include -. -I. ../8l/elf.c

%###############################################################################

\chapter{Core Data Structures}

% in 8.out.h: Instruction (enum as), Register (enum reg)

\section{[[Sym]]}

% conflict with include/a.out.h
<<struct Sym>>=
struct	Sym
{
    char	*name;
    short	type;

    short	version;
    short	become;
    short	frame;
    uchar	subtype;
    ushort	file;
    long	value;
    long	sig;

    // Extra
    Sym*	link;
};
@

<<constant S>>=
#define	S		((Sym*)0)
@

\section{[[Adr]]}

<<struct Adr>>=
struct	Adr
{
    union
    {
        long	u0offset;
        char	u0scon[8];
        Prog	*u0cond;	/* not used, but should be D_BRANCH */
        Ieee	u0ieee;
    } u0;
    union
    {
        Auto*	u1autom;
        Sym*	u1sym;
    } u1;

    short	type;
    uchar	index;
    char	scale;
};
@

<<constant offset>>=
#define	offset	u0.u0offset
@

<<constant scon>>=
#define	scon	u0.u0scon
@

<<constant cond>>=
#define	cond	u0.u0cond
@

<<constant ieee>>=
#define	ieee	u0.u0ieee
@

<<constant autom>>=
#define	autom	u1.u1autom
@

<<constant sym>>=
#define	sym	u1.u1sym
@

\section{[[Prog]] and [[curtext]]}

<<struct Prog>>=
struct	Prog
{
    Adr	from;
    Adr	to;

    Prog	*forwd;
    Prog*	link;
    Prog*	pcond;	/* work on this */
    long	pc;
    long	line;
    short	as;
    char	width;		/* fake for DATA */
    char	ft;		/* oclass cache */
    char	tt;
    uchar	mark;	/* work on these */
    uchar	back;
};
@


<<constant P>>=
#define	P		((Prog*)0)
@

<<global curtext>>=
Prog*	curtext;
@

<<constant TNAME>>=
#define	TNAME		(curtext?curtext->from.sym->name:noname)
@



<<global undefp>>=
//@Scheck: not dead, used by UP
Prog	undefp;
@

<<constant UP>>=
#define	UP	(&undefp)
@

\section{[[Auto]]}

<<struct Auto>>=
struct	Auto
{
    Sym*	asym;

    Auto*	link;
    long	aoffset;
    short	type;
};
@

\section{[[Optab]] and [[optab]]}

<<struct Optab>>=
struct	Optab
{
    // enum<as> from 8.out.h
    short	as;

    uchar*	ytab;

    byte	prefix;
    // the actual x86 machine code for instruction optab.as
    byte	op[10];
};
@

\chapter{Libraries}

% ar.h

<<constant ARMAG>>=
#define	ARMAG	"!<arch>\n"
@

<<constant SARMAG>>=
#define	SARMAG	8
@

<<constant ARFMAG>>=
#define	ARFMAG	"`\n"
@

<<constant SARNAME>>=
#define SARNAME	16
@

<<struct ar_hdr>>=
struct	ar_hdr
{
    char	name[SARNAME];
    char	date[12];
    char	uid[6];
    char	gid[6];
    char	mode[8];
    char	size[10];
    char	fmag[2];
};
@

<<constant SAR_HDR>>=
#define	SAR_HDR	(SARNAME+44)
@


% ar.c

\chapter{Machine Code Generation}

% done by 8l, not 8a, surprisingly
% why? because allows more optimisations? cross libs? as in llvm?

\chapter{Elf}

<<enum _anon_ (linkers/8l/elf.h)>>=
enum {
    Ehdr32sz	= 52,
    Phdr32sz	= 32,
    Shdr32sz	= 40,

    Ehdr64sz	= 64,
    Phdr64sz	= 56,
    Shdr64sz	= 64,
};
@

\chapter{Profiling}
% surprising that part of ld job, but it is

% NOPROF of 8.out.h

\chapter{Advanced Topics}

\section{Float}

% 8.out.h

\chapter{Conclusion}

\appendix

\chapter{Debugging}

<<global debug>>=
char	debug[128];
@

\chapter{Error Managment}

<<global nerrors>>=
int	nerrors;
@

<<function errorexit>>=
void
errorexit(void)
{

    if(nerrors) {
        if(cout >= 0)
            remove(outfile);
        exits("error");
    }
    exits(0);
}
@

\chapter{Libc}

\section{Memory managmnent}

<<global nhunk>>=
long	nhunk;
@

<<global hunk>>=
char*	hunk;
@

<<function malloc>>=
/*
 * fake malloc
 */
void*
malloc(ulong n)
{
    void *p;

    while(n & 7)
        n++;
    while(nhunk < n)
        gethunk();
    p = hunk;
    nhunk -= n;
    hunk += n;
    return p;
}
@

<<function free>>=
void
free(void *p)
{
    USED(p);
}
@

% not sure why but if redefine malloc and free then have to
% redefine this func too, otherwise get a link error
<<function setmalloctag>>=
//@Scheck: looks dead, but because we redefine malloc/free we must also redefine that
void setmalloctag(void *v, ulong pc)
{
    USED(v, pc);
}
@



<<function mysbrk>>=
void*
mysbrk(ulong size)
{
    return sbrk(size);
}
@



<<function gethunk>>=
void
gethunk(void)
{
    char *h;
    long nh;

    nh = NHUNK;
    if(thunk >= 5L*NHUNK) {
        nh = 5L*NHUNK;
        if(thunk >= 25L*NHUNK)
            nh = 25L*NHUNK;
    }
    h = mysbrk(nh);
    if(h == (char*)-1) {
        diag("out of memory");
        errorexit();
    }
    hunk = h;
    nhunk = nh;
    thunk += nh;
}
@


<<constructor prg>>=
Prog*
prg(void)
{
    Prog *p;

    while(nhunk < sizeof(Prog))
        gethunk();
    p = (Prog*)hunk;
    nhunk -= sizeof(Prog);
    hunk += sizeof(Prog);

    *p = zprg;
    return p;
}
@

<<function copyp>>=
Prog*
copyp(Prog *q)
{
    Prog *p;

    p = prg();
    *p = *q;
    return p;
}
@

<<function lookup>>=
Sym*
lookup(char *symb, int v)
{
    Sym *s;
    char *p;
    long h;
    int l, c;

    h = v;
    for(p=symb; c = *p; p++)
        h = h+h+h + c;
    l = (p - symb) + 1;
    h &= 0xffffff;
    h %= NHASH;
    for(s = hash[h]; s != S; s = s->link)
        if(s->version == v)
        if(memcmp(s->name, symb, l) == 0)
            return s;

    while(nhunk < sizeof(Sym))
        gethunk();
    s = (Sym*)hunk;
    nhunk -= sizeof(Sym);
    hunk += sizeof(Sym);

    s->name = malloc(l + 1);
    memmove(s->name, symb, l);

    s->link = hash[h];
    s->type = 0;
    s->version = v;
    s->value = 0;
    s->sig = 0;
    hash[h] = s;
    nsymbol++;
    return s;
}
@


\section{Buffer managmnent}

<<struct Buf>>=
union Buf
{
    struct
    {
        char	obuf[MAXIO];			/* output buffer */
        uchar	ibuf[MAXIO];			/* input buffer */
    } u;
    char	dbuf[1];
};
@

<<constant cbuf>>=
#define	cbuf	u.obuf
@

<<constant xbuf>>=
#define	xbuf	u.ibuf
@

\chapter{Extra Code}

\ifallcode
#include "Linker_extra.tex.nw"
\fi

\chapter{Changelog}
\label{sec:changelog}

\chapter{Glossary}
\label{sec:glossary}

\begin{verbatim}
\end{verbatim}

\chapter*{Indexes}
\addcontentsline{toc}{section}{Index}

%\chapter{References} 
\addcontentsline{toc}{section}{References}

\begin{thebibliography}{99}

\bibitem[1]{wp-literate-programming} Donald Knuth,,
{\em Literate Programming}, 
\url{http://en.wikipedia.org/wiki/Literate\_Program}

\bibitem[2]{noweb} Norman Ramsey,
{\em Noweb}, 
\url{http://www.cs.tufts.edu/~nr/noweb/}

\bibitem[3]{syncweb} Yoann Padioleau,
{\em Syncweb, literate programming meets unison}, 
\url{http://padator.org/software/project-syncweb/readme.txt}

\end{thebibliography}

%******************************************************************************
% Postlude
%******************************************************************************

\end{document}
