\documentclass[12pt]{report}
%alt: [12pt, twocolumn, landscape]

\input{../docs/latex/Packages}
\input{../docs/latex/Config}
\input{../docs/latex/Macros}

%******************************************************************************
% Prelude
%******************************************************************************
\newif\iffinal
\newif\ifverbose
\finaltrue\verbosefalse % see also other newif in Macros.tex

%------------------------------------------------------------------------------
%history: 
%------------------------------------------------------------------------------

%thx to LP, I changed for the better a few things:

%thx to codemap/codegraph/scheck:

%thx to utilities in ocaml: (see also the %ocaml-found: tag in this file)

%thx to this manual, I better understand utilities:

%history LP-ization:
% - skeleton, mostly copy paste of Template.nw skeleton
% - SEMI put all content of files in the Extra section, via 'pfff -lpize'
%   which also now split in chunks!
%    * TODO function, global, struct, enum, constant, macro(actually function)
%    * TODO ctor/dtor, dumper
%    * TODO [[xxx]] other fields, [[xxx]] extra fields
% - TODO read Extra section, identify concepts, first TOC
% - TODO distribute parts of the Extra section in the main file
% - TODO understand main(), LP split main, improve TOC
% - TODO understand main functions, LP split, cluster, improve TOC
% - TODO LP split the structures, use datalog for flow to field info
% - TODO nullify, boolify, errorify, enumify,  typeify,    scheckify, plan9ify
% - TODO aspecify advanced features! remove useless features
% - TODO add figures
% - TODO add explanations


\begin{document}
%******************************************************************************
% Title
%******************************************************************************
\title{
{\Huge 
Principia Softwarica: The Plan~9 Utilities
}\\
{version 0.1}
}

\author{
Yoann Padioleau\\
\texttt{yoann.padioleau@gmail.com}\\
\\
with code from\\
many people
}

\maketitle 
%\onecolumn
\hrule
\input{../docs/latex/Copyright}
\input{../docs/latex/CopyrightPlan9}
\hrule
%\twocolumn

\begingroup
\hypersetup{linkcolor=blue}
% need to s/onecolumn/twocolumn in report.cls :) for \tableofcontents
\tableofcontents
\endgroup

%******************************************************************************
% Body
%******************************************************************************

%******************************************************************************
\chapter{Introduction}
%******************************************************************************

This is \cite{syncweb}.

%high level explanations of coreutils:
% http://maizure.org/projects/decoded-gnu-coreutils/

%UNIX V5, OpenBSD, Plan 9, FreeBSD, and GNU coreutils implementations of echo.c
%https://gist.github.com/dchest/1091803
% evolution of a program :)

% suckless version in C: http://git.suckless.org/sbase/tree/README

% in Rust: https://github.com/uutils/coreutils/
% in Go: https://github.com/polegone/gonix
% in Javascript: https://github.com/dthree/cash/

% - busybox
%  https://en.wikipedia.org/wiki/BusyBox
% many commands in one binary, including shell ash
% the repository has lots of commands. 256 000 LOC in total.
% - toybox, BSD-licensed busybox-like, used in Android

% http://jvns.ca/blog/2013/10/16/day-11-how-does-gzip-work/

%list of commands useful for administration:
% - http://cb.vu/unixtoolbox.xhtml


%mv: Can't do mv *.jpg *.JPEG :(
% unix haters handbook :)

%sort. can't do sort foo.txt > foo.txt, hence one option of sort for that
% (mentioned in Unix Readers article)

%for tar:
% ocaml-tar in mirage

% how to optimize even simple utilities like 'yes' to have huge throuput:
%https://www.reddit.com/r/unix/comments/6gxduc/how_is_gnu_yes_so_fast/?st=j3v3iw3c&sh=5651ea3c
% maybe better blog post about yes evolution:
%  https://matthias-endler.de/2017/yes/

%******************************************************************************
\chapter{Overview}
%******************************************************************************

<<plan9 includes>>=
#include <u.h>
#include <libc.h>
@

%******************************************************************************
\chapter{File and Directory}
%******************************************************************************

\section{[[cat]]}

<<function [[main]](cat.c)>>=
void
main(int argc, char *argv[])
{
    int f, i;

    argv0 = "cat";
    if(argc == 1)
        cat(0, "<stdin>");
    else for(i=1; i<argc; i++){
        f = open(argv[i], OREAD);
        if(f < 0)
            sysfatal("can't open %s: %r", argv[i]);
        else{
            cat(f, argv[i]);
            close(f);
        }
    }
    exits(0);
}
@

<<function [[cat]]>>=
void
cat(int f, char *s)
{
    char buf[8192];
    long n;

    while((n=read(f, buf, (long)sizeof buf))>0)
        if(write(1, buf, n)!=n)
            sysfatal("write error copying %s: %r", s);
    if(n < 0)
        sysfatal("error reading %s: %r", s);
}
@

\section{[[ls]]}

\section{[[touch]]}

<<function [[usage]](touch.c)>>=
void
usage(void)
{
    fprint(2, "usage: touch [-c] [-t time] files\n");
    exits("usage");
}
@

<<function [[main]](touch.c)>>=
void
main(int argc, char **argv)
{
    char *t, *s;
    int nocreate = 0;
    int status = 0;

    now = time(0);
    ARGBEGIN{
    case 't':
        t = EARGF(usage());
        now = strtoul(t, &s, 0);
        if(s == t || *s != '\0')
            usage();
        break;
    case 'c':
        nocreate = 1;
        break;
    default:    
        usage();
    }ARGEND

    if(!*argv)
        usage();
    while(*argv)
        status += touch(nocreate, *argv++);
    if(status)
        exits("touch");
    exits(0);
}
@

<<function [[touch]]>>=
int touch(int nocreate, char *name)
{
    Dir stbuff;
    int fd;

    nulldir(&stbuff);
    stbuff.mtime = now;
    if(dirwstat(name, &stbuff) >= 0)
        return 0;
    if(nocreate){
        fprint(2, "touch: %s: cannot wstat: %r\n", name);
        return 1;
    }
    if((fd = create(name, OREAD|OEXCL, 0666)) < 0){
        fprint(2, "touch: %s: cannot create: %r\n", name);
        return 1;
    }
    dirfwstat(fd, &stbuff);
    close(fd);
    return 0;
}
@

\section{[[mkdir]]}

<<function [[usage]](mkdir.c)>>=
void
usage(void)
{
    fprint(2, "usage: mkdir [-p] [-m mode] dir...\n");
    exits("usage");
}
@

<<function [[main]](mkdir.c)>>=
void
main(int argc, char *argv[])
{
    int i, pflag;
    char *m;

    pflag = 0;
    ARGBEGIN{
    default:
        usage();
    case 'm':
        m = ARGF();
        if(m == nil)
            usage();
        mode = strtoul(m, &m, 8);
        if(mode > 0777)
            usage();
        break;
    case 'p':
        pflag = 1;
        break;
    }ARGEND

    for(i=0; i<argc; i++){
        if(pflag)
            mkdirp(argv[i]);
        else
            makedir(argv[i]);
    }
    exits(e);
}
@

<<function [[makedir]]>>=
int
makedir(char *s)
{
    int f;

    if(access(s, AEXIST) == 0){
        fprint(2, "mkdir: %s already exists\n", s);
        e = "error";
        return -1;
    }
    f = create(s, OREAD, DMDIR | mode);
    if(f < 0){
        fprint(2, "mkdir: can't create %s: %r\n", s);
        e = "error";
        return -1;
    }
    close(f);
    return 0;
}
@

<<function [[mkdirp]]>>=
void
mkdirp(char *s)
{
    char *p;

    for(p=strchr(s+1, '/'); p; p=strchr(p+1, '/')){
        *p = 0;
        if(access(s, AEXIST) != 0 && makedir(s) < 0)
            return;
        *p = '/';
    }
    if(access(s, AEXIST) != 0)
        makedir(s);
}
@

\section{[[rm]]}

<<function [[main]](rm.c)>>=
void
main(int argc, char *argv[])
{
    int i;
    int recurse;
    char *f;
    Dir *db;

    ignerr = 0;
    recurse = 0;
    ARGBEGIN{
    case 'r':
        recurse = 1;
        break;
    case 'f':
        ignerr = 1;
        break;
    default:
        fprint(2, "usage: rm [-fr] file ...\n");
        exits("usage");
    }ARGEND
    for(i=0; i<argc; i++){
        f = argv[i];
        if(remove(f) != -1)
            continue;
        db = nil;
        if(recurse && (db=dirstat(f))!=nil && (db->qid.type&QTDIR))
            rmdir(f);
        else
            err(f);
        free(db);
    }
    exits(errbuf);
}
@

<<function [[rmdir]]>>=
/*
 * f is a non-empty directory. Remove its contents and then it.
 */
void
rmdir(char *f)
{
    char *name;
    int fd, i, j, n, ndir, nname;
    Dir *dirbuf;

    fd = open(f, OREAD);
    if(fd < 0){
        err(f);
        return;
    }
    n = dirreadall(fd, &dirbuf);
    close(fd);
    if(n < 0){
        err("dirreadall");
        return;
    }

    nname = strlen(f)+1+STATMAX+1;  /* plenty! */
    name = malloc(nname);
    if(name == 0){
        err("memory allocation");
        return;
    }

    ndir = 0;
    for(i=0; i<n; i++){
        snprint(name, nname, "%s/%s", f, dirbuf[i].name);
        if(remove(name) != -1)
            dirbuf[i].qid.type = QTFILE;    /* so we won't recurse */
        else{
            if(dirbuf[i].qid.type & QTDIR)
                ndir++;
            else
                err(name);
        }
    }
    if(ndir)
        for(j=0; j<n; j++)
            if(dirbuf[j].qid.type & QTDIR){
                snprint(name, nname, "%s/%s", f, dirbuf[j].name);
                rmdir(name);
            }
    if(remove(f) == -1)
        err(f);
    free(name);
    free(dirbuf);
}
@

<<function [[err]](rm.c)>>=
void
err(char *f)
{
    if(!ignerr){
        errbuf[0] = '\0';
        errstr(errbuf, sizeof errbuf);
        fprint(2, "rm: %s: %s\n", f, errbuf);
    }
}
@

\section{[[cp]]}

<<function [[main]](cp.c)>>=
void
main(int argc, char *argv[])
{
    Dir *dirb;
    int todir, i;

    ARGBEGIN {
    case 'g':
        gflag++;
        break;
    case 'u':
        uflag++;
        gflag++;
        break;
    case 'x':
        xflag++;
        break;
    default:
        goto usage;
    } ARGEND

    todir=0;
    if(argc < 2)
        goto usage;
    dirb = dirstat(argv[argc-1]);
    if(dirb!=nil && (dirb->mode&DMDIR))
        todir=1;
    if(argc>2 && !todir){
        fprint(2, "cp: %s not a directory\n", argv[argc-1]);
        exits("bad usage");
    }
    for(i=0; i<argc-1; i++)
        copy(argv[i], argv[argc-1], todir);
    if(failed)
        exits("errors");
    exits(0);

usage:
    fprint(2, "usage:\tcp [-gux] fromfile tofile\n");
    fprint(2, "\tcp [-x] fromfile ... todir\n");
    exits("usage");
}
@

<<function [[copy]]>>=
void
copy(char *from, char *to, int todir)
{
    Dir *dirb, dirt;
    char name[256];
    int fdf, fdt, mode;

    if(todir){
        char *s, *elem;
        elem=s=from;
        while(*s++)
            if(s[-1]=='/')
                elem=s;
        sprint(name, "%s/%s", to, elem);
        to=name;
    }

    if((dirb=dirstat(from))==nil){
        fprint(2,"cp: can't stat %s: %r\n", from);
        failed = 1;
        return;
    }
    mode = dirb->mode;
    if(mode&DMDIR){
        fprint(2, "cp: %s is a directory\n", from);
        free(dirb);
        failed = 1;
        return;
    }
    if(samefile(dirb, from, to)){
        free(dirb);
        failed = 1;
        return;
    }
    mode &= 0777;
    fdf=open(from, OREAD);
    if(fdf<0){
        fprint(2, "cp: can't open %s: %r\n", from);
        free(dirb);
        failed = 1;
        return;
    }
    fdt=create(to, OWRITE, mode);
    if(fdt<0){
        fprint(2, "cp: can't create %s: %r\n", to);
        close(fdf);
        free(dirb);
        failed = 1;
        return;
    }
    if(copy1(fdf, fdt, from, to)==0 && (xflag || gflag || uflag)){
        nulldir(&dirt);
        if(xflag){
            dirt.mtime = dirb->mtime;
            dirt.mode = dirb->mode;
        }
        if(uflag)
            dirt.uid = dirb->uid;
        if(gflag)
            dirt.gid = dirb->gid;
        if(dirfwstat(fdt, &dirt) < 0)
            fprint(2, "cp: warning: can't wstat %s: %r\n", to);
    }           
    free(dirb);
    close(fdf);
    close(fdt);
}
@

<<function [[copy1]]>>=
int
copy1(int fdf, int fdt, char *from, char *to)
{
    char *buf;
    long n, n1, rcount;
    int rv;
    char err[ERRMAX];

    buf = malloc(DEFB);
    /* clear any residual error */
    err[0] = '\0';
    errstr(err, ERRMAX);
    rv = 0;
    for(rcount=0;; rcount++) {
        n = read(fdf, buf, DEFB);
        if(n <= 0)
            break;
        n1 = write(fdt, buf, n);
        if(n1 != n) {
            fprint(2, "cp: error writing %s: %r\n", to);
            failed = 1;
            rv = -1;
            break;
        }
    }
    if(n < 0) {
        fprint(2, "cp: error reading %s: %r\n", from);
        failed = 1;
        rv = -1;
    }
    free(buf);
    return rv;
}
@

<<function [[samefile]](cp.c)>>=
int
samefile(Dir *a, char *an, char *bn)
{
    Dir *b;
    int ret;

    ret = 0;
    b=dirstat(bn);
    if(b != nil)
    if(b->qid.type==a->qid.type)
    if(b->qid.path==a->qid.path)
    if(b->qid.vers==a->qid.vers)
    if(b->dev==a->dev)
    if(b->type==a->type){
        fprint(2, "cp: %s and %s are the same file\n", an, bn);
        ret = 1;
    }
    free(b);
    return ret;
}
@

\section{[[mv]]}

<<function [[main]](mv.c)>>=
void
main(int argc, char *argv[])
{
    int i, failed;
    Dir *dirto, *dirfrom;
    char *todir, *toelem;

    if(argc<3){
        fprint(2, "usage: mv fromfile tofile\n");
        fprint(2, "   mv fromfile ... todir\n");
        exits("bad usage");
    }

    /* prepass to canonicalise names before splitting, etc. */
    for(i=1; i < argc; i++)
        cleanname(argv[i]);

    if((dirto = dirstat(argv[argc-1])) != nil && (dirto->mode&DMDIR)){
        dirfrom = nil;
        if(argc == 3
        && (dirfrom = dirstat(argv[1])) != nil
        && (dirfrom->mode & DMDIR)) 
            split(argv[argc-1], &todir, &toelem); /* mv dir1 dir2 */
        else{               /* mv file... dir */
            todir = argv[argc-1];
            toelem = nil;       /* toelem will be fromelem */
        }
        free(dirfrom);
    }else
        split(argv[argc-1], &todir, &toelem);   /* mv file1 file2 */
    free(dirto);
    if(argc>3 && toelem != nil){
        fprint(2, "mv: %s not a directory\n", argv[argc-1]);
        exits("bad usage");
    }

    failed = 0;
    for(i=1; i < argc-1; i++)
        if(mv(argv[i], todir, toelem) < 0)
            failed++;
    if(failed)
        exits("failure");
    exits(0);
}
@

<<function [[mv]]>>=
int
mv(char *from, char *todir, char *toelem)
{
    int stat;
    Dir *dirb;

    dirb = dirstat(from);
    if(dirb == nil){
        fprint(2, "mv: can't stat %s: %r\n", from);
        return -1;
    }
    stat = mv1(from, dirb, todir, toelem);
    free(dirb);
    return stat;
}
@

<<function [[mv1]]>>=
int
mv1(char *from, Dir *dirb, char *todir, char *toelem)
{
    int fdf, fdt, i, j, stat;
    char toname[4096], fromname[4096];
    char *fromdir, *fromelem;
    Dir *dirt, null;

    strncpy(fromname, from, sizeof fromname);
    split(from, &fromdir, &fromelem);
    if(toelem == 0)
        toelem = fromelem;
    i = strlen(toelem);
    if(i==0){
        fprint(2, "mv: null last name element moving %s\n", fromname);
        return -1;
    }
    j = strlen(todir);
    if(i + j + 2 > sizeof toname){
        fprint(2, "mv: path too big (max %d): %s/%s\n",
            sizeof toname, todir, toelem);
        return -1;
    }
    memmove(toname, todir, j);
    toname[j] = '/';
    memmove(toname+j+1, toelem, i);
    toname[i+j+1] = 0;

    if(samefile(fromdir, todir)){
        if(samefile(fromname, toname)){
            fprint(2, "mv: %s and %s are the same\n",
                fromname, toname);
            return -1;
        }

        /* remove target if present */
        dirt = dirstat(toname);
        if(dirt != nil) {
            hardremove(toname);
            free(dirt);
        }

        /* try wstat */
        nulldir(&null);
        null.name = toelem;
        if(dirwstat(fromname, &null) >= 0)
            return 0;
        if(dirb->mode & DMDIR){
            fprint(2, "mv: can't rename directory %s: %r\n",
                fromname);
            return -1;
        }
    }
    /*
     * Renaming won't work --- must copy
     */
    if(dirb->mode & DMDIR){
        fprint(2, "mv: %s is a directory, not copied to %s\n",
            fromname, toname);
        return -1;
    }
    fdf = open(fromname, OREAD);
    if(fdf < 0){
        fprint(2, "mv: can't open %s: %r\n", fromname);
        return -1;
    }

    dirt = dirstat(toname);
    if(dirt != nil && (dirt->mode & DMAPPEND))
        hardremove(toname);  /* because create() won't truncate file */
    free(dirt);

    fdt = create(toname, OWRITE, dirb->mode);
    if(fdt < 0){
        fprint(2, "mv: can't create %s: %r\n", toname);
        close(fdf);
        return -1;
    }
    stat = copy1(fdf, fdt, fromname, toname);
    close(fdf);

    if(stat >= 0){
        nulldir(&null);
        null.mtime = dirb->mtime;
        null.mode = dirb->mode;
        dirfwstat(fdt, &null);  /* ignore errors; e.g. user none always fails */
        if(remove(fromname) < 0){
            fprint(2, "mv: can't remove %s: %r\n", fromname);
            stat = -1;
        }
    }
    close(fdt);
    return stat;
}
@

<<function [[copy1]](mv.c)>>=
int
copy1(int fdf, int fdt, char *from, char *to)
{
    char buf[8192];
    long n, n1;

    while ((n = read(fdf, buf, sizeof buf)) > 0) {
        n1 = write(fdt, buf, n);
        if(n1 != n){
            fprint(2, "mv: error writing %s: %r\n", to);
            return -1;
        }
    }
    if(n < 0){
        fprint(2, "mv: error reading %s: %r\n", from);
        return -1;
    }
    return 0;
}
@

<<function [[split]](mv.c)>>=
void
split(char *name, char **pdir, char **pelem)
{
    char *s;

    s = utfrrune(name, '/');
    if(s){
        *s = 0;
        *pelem = s+1;
        *pdir = name;
    }else if(strcmp(name, "..") == 0){
        *pdir = "..";
        *pelem = ".";
    }else{
        *pdir = ".";
        *pelem = name;
    }
}
@

<<function [[samefile]](mv.c)>>=
int
samefile(char *a, char *b)
{
    Dir *da, *db;
    int ret;

    if(strcmp(a, b) == 0)
        return 1;
    da = dirstat(a);
    db = dirstat(b);
    ret = (da != nil && db != nil &&
        da->qid.type==db->qid.type &&
        da->qid.path==db->qid.path &&
        da->qid.vers==db->qid.vers &&
        da->dev==db->dev &&
        da->type==db->type);
    free(da);
    free(db);
    return ret;
}
@

<<function [[hardremove]](mv.c)>>=
void
hardremove(char *a)
{
    if(remove(a) == -1){
        fprint(2, "mv: can't remove %s: %r\n", a);
        exits("mv");
    }
    while(remove(a) != -1)
        ;
}
@

\section{[[chmod]]}

<<function [[main]](chmod.c)>>=
void
main(int argc, char *argv[])
{
    int i;
    Dir *dir, ndir;
    ulong mode, mask;
    char *p;

    if(argc < 3){
        fprint(2, "usage: chmod 0777 file ... or chmod [who]op[rwxalt] file ...\n");
        exits("usage");
    }
    mode = strtol(argv[1], &p, 8);
    if(*p == 0)
        mask = A(DMRWE);
    else if(!parsemode(argv[1], &mask, &mode)){
        fprint(2, "chmod: bad mode: %s\n", argv[1]);
        exits("mode");
    }
    nulldir(&ndir);
    for(i=2; i<argc; i++){
        dir = dirstat(argv[i]);
        if(dir == nil){
            fprint(2, "chmod: can't stat %s: %r\n", argv[i]);
            continue;
        }
        ndir.mode = (dir->mode & ~mask) | (mode & mask);
        free(dir);
        if(dirwstat(argv[i], &ndir)==-1){
            fprint(2, "chmod: can't wstat %s: %r\n", argv[i]);
            continue;
        }
    }
    exits(0);
}
@

<<function [[parsemode]](chmod.c)>>=
int
parsemode(char *spec, ulong *pmask, ulong *pmode)
{
    ulong mode, mask;
    int done, op;
    char *s;

    s = spec;
    mask = DMAPPEND | DMEXCL | DMTMP;
    for(done=0; !done; ){
        switch(*s){
        case 'u':
            mask |= U(DMRWE); break;
        case 'g':
            mask |= G(DMRWE); break;
        case 'o':
            mask |= O(DMRWE); break;
        case 'a':
            mask |= A(DMRWE); break;
        case 0:
            return 0;
        default:
            done = 1;
        }
        if(!done)
            s++;
    }
    if(s == spec)
        mask |= A(DMRWE);
    op = *s++;
    if(op != '+' && op != '-' && op != '=')
        return 0;
    mode = 0;
    for(; *s ; s++){
        switch(*s){
        case 'r':
            mode |= A(DMREAD); break;
        case 'w':
            mode |= A(DMWRITE); break;
        case 'x':
            mode |= A(DMEXEC); break;
        case 'a':
            mode |= DMAPPEND; break;
        case 'l':
            mode |= DMEXCL; break;
        case 't':
            mode |= DMTMP; break;
        default:
            return 0;
        }
    }
    if(*s != 0)
        return 0;
    if(op == '+' || op == '-')
        mask &= mode;
    if(op == '-')
        mode = ~mode;
    *pmask = mask;
    *pmode = mode;
    return 1;
}
@

\section{[[chgrp]]}

<<function [[main]](chgrp.c)>>=
void
main(int argc, char *argv[])
{
    int i;
    Dir dir;
    char *group;
    char *errs;

    ARGBEGIN {
    default:
    usage:
        fprint(2, "usage: chgrp [ -uo ] group file ....\n");
        exits("usage");
        return;
    case 'u':
    case 'o':
        uflag++;
        break;
    } ARGEND
    if(argc < 1)
        goto usage;

    group = argv[0];
    errs = 0;
    for(i=1; i<argc; i++){
        nulldir(&dir);
        if(uflag)
            dir.uid = group;
        else
            dir.gid = group;
        if(dirwstat(argv[i], &dir) == -1) {
            fprint(2, "chgrp: can't wstat %s: %r\n", argv[i]);
            errs = "can't wstat";
            continue;
        }
    }
    exits(errs);
}
@

\section{[[mtime]]}

<<function [[usage]](mtime.c)>>=
void
usage(void)
{
    fprint(2, "usage: mtime file...\n");
    exits("usage");
}
@

<<function [[main]](mtime.c)>>=
void
main(int argc, char **argv)
{
    int errors, i;
    Dir *d;

    ARGBEGIN{
    default:
        usage();
    }ARGEND

    errors = 0;
    for(i=0; i<argc; i++){
        if((d = dirstat(argv[i])) == nil){
            fprint(2, "stat %s: %r\n", argv[i]);
            errors = 1;
        }else{
            print("%11lud %s\n", d->mtime, argv[i]);
            free(d);
        }
    }
    exits(errors ? "errors" : nil);
}
@

%******************************************************************************
\chapter{String Processing}
%******************************************************************************



%******************************************************************************
\chapter{Bytes}
%******************************************************************************



%******************************************************************************
\chapter{Process utilities}
%******************************************************************************



%******************************************************************************
\chapter{Archiving}
%******************************************************************************



%******************************************************************************
\chapter{Time}
%******************************************************************************

\section{[[date]]}

\section{[[cal]]}

%******************************************************************************
\chapter{Misc}
%******************************************************************************

%******************************************************************************
\chapter{Conclusion}
%******************************************************************************
\label{chap:conclusion}

%\ifallcode
#include "Utilities_extra.nw"
%\fi

%******************************************************************************
\chapter*{Glossary}
\addcontentsline{toc}{chapter}{Glossary}
\label{sec:glossary}

\begin{verbatim}
LOC = Lines Of Code
CLI = Command-Line Interface
\end{verbatim}

\chapter*{Indexes}
\addcontentsline{toc}{chapter}{Index}

%src: wc.nw in noweb source
Here is a list of the identifiers used, and where they appear.
Underlined entries indicate the place of definition.
This index is generated automatically.

%\twocolumn does not work
\nowebindex

%\chapter{References} 
\addcontentsline{toc}{chapter}{References}

\bibliography{../docs/latex/Principia}
\bibliographystyle{alpha}

%******************************************************************************
% Postlude
%******************************************************************************

\end{document}
