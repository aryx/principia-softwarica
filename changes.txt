-*- org -*-

* 0.10 (Q2 2016) (intro and overview chapters for Graphics.pdf and Windows.pdf)

- intro+overview Windows.pdf
- intro+overview Graphics.pdf

- reorg code draw, rio
- reorg code 5l, 5a, better tabular

* 0.9 (Q1 2016) (LP split and understand more Graphics and Windows)

- deeper understanding of Graphics.nw, better LP split
- deeper understanding of Windows.nw, better LP split
- 5l in ocaml

* -----------------------------------------------------------

* 0.8 (Q4 2015) (Assembler.pdf, Linker.pdf)

- finish Assembler.pdf v1 (explanations for most chapters, figures)

- finish Linker.pdf v1 (explanations for most chapters, figures)

- Meeting Knuth! got emails from Knuth!

* 0.7 (Q3 2015) (marriage :), Principia.pdf)

- Principia.nw, the meta book! pretty good Principia.pdf

- started explaining the code and produce readable books:
  * Assembler.nw: intro + overview chapters finished
  * Machine.nw: intro chapter finished

- first lpized versions for:
  * Soldat (cruel hessian)

* 0.6 (Q2 2015) (plan9 port of ocaml/efuns, LPization Generator, Network)

Finished first lpized versions for almost all principia components except for
Libc/Profiler/Utilities.nw. Added a few other though (efuns, ocaml, mmm).

- OCaml, continue extensions (backtrace)
  and port to plan9!
- Efuns, continue extensions (minimap, position history, etc),
  and port to plan9!
- first lpized versions for
  * Lex/yacc Generator (actually ocamllex and my own ocamlyacc)
  * Network
  * Debugger (very partial)

* 0.5 (Q1 2015) (LPization Compiler, OCaml/Editor(Efuns)/Browser(mmm))

- switch to ARM for Compiler.nw
- continue work on
  * Linker.nw, Machine.nw, Assembler.nw
- switch to OCaml for Editor.nw, better than C candidates, and
  also for Browser.nw (and later for Generators.nw too)
- first lpized versions for a few ocaml software:
  * Efuns (and ported it to mac, extended it, eshell, dircolors, etc)
  * Ocaml (light) (and simplified the code, removed objects, functors, etc)
  * Browser mmm

* -----------------------------------------------------------

* 0.4 (Q4 2014) (LPization Graphics/Window/Shell, Machine/Assembler/Linker, Make)

- first lpized versions of many components:
   * Machine, Assembler, Linker, Compiler, 
   * Graphics, Window, Shell,
   * Make, 
    with each time a similar procedure summarized in Template.nw
- switched to ARM, starting with Machine.nw, and then Assembler.nw, Linker.nw
- left facebook so full-time on principia

* 0.3 (Q3 2014) (pfff -lpize finer grained split)

spent time on datalog and graph_code_c to answer questions I had while looking
at the kernel, such as who calls that, what constants can flow in this
integer field

- started Window.nw, Make.nw, etc.
- pfff -lpize which not only split in files but also split entities
  (thx to better pfff -parse_c), so quicker to get a first workable
  literate document
- change code to get codegraph -lang c to work on, and also introduced many
  globals.c to remove some backward dependencies.
- codegraph now works (conservatively) on the whole plan9

syncweb: pfff -lpize finer grained split

* 0.2 (Q2 2014) (Kernel.nw)

- made a first version of the literate program for the kernel, good TOC,
  Kernel.nw
- almost full LPization, 20 chapters!!, aspectize, lp split, reorg again,
  try to understand almost every parts of the code, simplified the code many
  times (e.g. for virtual memory), removed dead code, renamed important
  structures (e.g. Mach -> Cpu, m->cpus, externup removal), added arch/, 
  get rid of edf.c, aspectized advanced virtual memory (MAXKPA), rename
  Pte to pagetable, more consistent pte, pt, pde, pd, mmupxxx
- 4 or 5 bugs reported on 9fans!

syncweb: -lpize initial, M-x pad-literate-split refresh

* 0.1 (Q1 2014) (fork kencc and plan9, cross compile whole distro from Mac)

- got kencc working on my mac (but had to backport features from plan9 labs 8c
  such as elf support, and later some fixes related to unicode)
- forked kencc, cg/cm on kencc

- was able to cross compile 
   * the kernel, and then 
   * all the utilities, 
   * libraries
  (xv6 was actually hard to cross compile on Macos, binutils sucked)
- forked plan9 with the idea of making a xix based on plan9. I simplified 
  the code, removed support for some architectures, device drivers, etc
  I reorganized also a lot the code (and use xmv and symlinks to be compatible)
- was able to get to work on my own plan9 fork and my own plan9 distribution:
   * the kernel (via qemu -kernel), 
   * mini shell,
   * full shell,
   * dossrv
   * rio 
   * the network 
  Very quick iterative loop.
- simplified a lot the kernel, removed many syscalls, lots of dead code,
  reorg in different directories. Used codemap/codegraph on .clang/.clang2
  and introduced hook to remove some backward deps, split portdat.h, dat.h, etc,
  used scheck on plan9 code, annotated code with @scheck for false positives
- read balestero's notes on plan9 kernel

* -----------------------------------------------------------

* Alpha (Dec 2013) (it runs!)

- got plan9 working on virtual box and then qemu (was not that easy,
  qemu had some bugs and plan9-labs was not very qemu friendly),
- played with rio! (30 dec 2013, just before new year :) )
