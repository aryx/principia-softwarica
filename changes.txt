-*- org -*-

* 0.4 (Q4 2014)

 - spent time to write first lpized versions of many components
   (Assembler, Linker, Compiler, Interpreter, Window, Graphics, Shell,
    Make, Machine), with each time a similar procedure summarized in
    Template.nw
 - switched to ARM, starting with Machine.nw, and then Assembler.nw, Linker.nw

* 0.3 (Q3 2014)

 - spent time on datalog and graph_code_c to answer questions I had while looking
   at the kernel, such as who calls that, what constants can flow in this
   integer field
 - started Window.nw, Make.nw, etc.
 - pfff -lpize which not only split in files but also split entities
   (thx to better pfff -parse_c), so quicker to get a first workable
   literate document
 - change code to get codegraph -lang c to work on, and also introduced many
   globals.c to remove some backward dependencies.
 - codegraph now works (conservatively) on the whole plan9

syncweb: pfff -lpize finer grained split

* 0.2 (Q2 2014)

 - made a first version of the literate program for the kernel, good TOC,
   Kernel.nw
   almost full LPization, 20 chapters!!, aspectize, lp split, reorg again,
   try to understand almost every parts of the code, simplified the code many
   times (e.g. for virtual memory), removed dead code, renamed important
   structures (e.g. Mach -> Cpu, m->cpus, externup removal), added arch/, 
   get rid of edf.c, aspectized advanced virtual memory (MAXKPA), rename
   Pte to pagetable, more consistent pte, pt, pde, pd, mmupxxx
 - 4 or 5 bugs reported on 9fans!

syncweb: -lpize initial, M-x pad-literate-split refresh

* 0.1 (Q1 2014)

 - got kencc working on my mac (but had to backport features from plan9 labs 8c
   such as elf support, and later some fixes related to unicode)
 - forked kencc, cg/cm on kencc
 - was able to cross compile the kernel, and then all the utilities, libraries
   (xv6 was actually hard to cross compile on Macos, binutils sucked)
 - forked plan9 with the idea of making a xix based on plan9. I simplified 
   the code, removed support for some architectures, device drivers, etc
   I reorganized also a lot the code (and use xmv and symlinks to be compatible)
 - was able to get the kernel (via qemu -kernel), mini shell, then full shell, then
   dossrv and finally rio and the network to work on my own plan9 fork and my own
   plan9 distribution! Very quick iterative loop.
 - simplified a lot the kernel, removed many syscalls, lots of dead code,
   reorg in different directories. Used codemap/codegraph on .clang/.clang2
   and introduced hook to remove some backward deps, split portdat.h, dat.h, etc,
   used scheck on plan9 code, annotated code with @scheck for false positives
 - read balestero's notes on plan9 kernel

* Alpha (Dec 2013)

 - got plan9 working on virtual box and then qemu (was not that easy,
   qemu had some bugs and plan9 labs was not very qemu friendly),
   played with rio! (30 dec 2013, just before new year :) )
