\section{[[mk/]]}

\subsection{[[mk/fns.h]]}

%-------------------------------------------------------------

<<mk/fns.h>>=

// Constructors/destructors for core data structures

// bufblock.c
Bufblock* newbuf(void);
void	freebuf(Bufblock*);
void	growbuf(Bufblock *);
void	bufcpy(Bufblock *, char *, int);
void	insert(Bufblock *, int);
void	rinsert(Bufblock *, Rune);
<<macro [[isempty]]>>
<<macro [[resetbuf]]>>
<<macro [[bufcontent]]>>

// words.c
Word*	newword(char*);
void	freewords(Word*);
Word*	wdup(Word*);
char*	wtos(Word*, int);
void	addw(Word*, char*);

// symtab.c
Symtab*	symlook(char*, int, void*);
void	symtraverse(int, void(*)(Symtab*));
void	symstat(void);

// var.c
void	setvar(char*, void*);
char*	shname(char*);

// rule.c
void	addrule(char*, Word*, char*, Word*, int, int, char*);
void	addrules(Word*, Word*, char*, int, int, char*);
char*	rulecnt(void);



// env.c
void	inithash(void);
void	initenv(void);
ShellEnvVar*	buildenv(Job*, int);
void exportenv(ShellEnvVar *e);


// lex.c
bool		assline(Biobuf *, Bufblock *);
int		nextrune(Biobuf*, bool);

// parse.c
void	parse(char*, fdt, bool);

// varsub.c
Word*	stow(char*);



// graph.c
Node*	graph(char*);
void	nrep(void);

// file.c
ulong	timeof(char*, bool);
void	timeinit(char*);
void	touch(char*);
ulong	mkmtime(char*, bool);
void	delete(char*);

// match.c
bool		match(char*, char*, char*);
void	subst(char*, char*, char*, int);



// mk.c
void	mk(char*);
bool    outofdate(Node*, Arc*, bool);
void	update(Node*, bool);

// recipe.c
void		dorecipe(Node*, bool*);

// run.c
void	run(Job*);
int		waitup(int, int*);
void	nproc(void);
//
void	prusage(void);
void	usage(void);
//
int		execsh(char*, char*, Bufblock*, ShellEnvVar*);
int		pipecmd(char*, ShellEnvVar*, int*);
void	catchnotes(void);
void	Exit(void);

// shprint.c
void	shprint(char*, ShellEnvVar*, Bufblock*);
void	front(char*);



// rc.c
char* 	charin(char *, char *);
char*	copyq(char*, Rune, Bufblock*);
error0	escapetoken(Biobuf*, Bufblock*, bool, int);
char*	expandquote(char*, Rune, Bufblock*);


// archive.c
ulong	atimeof(int,char*);
void	atouch(char*);


// utils.c
void*	Malloc(int);
void*	Realloc(void*, int);
char*	maketmp(void);

// Dumpers
void	dumpv(char*);
void	dumpw(char*, Word*);
void	dumpr(char*, Rule*);
void	dumpn(char*, Node*);
void	dumpj(char*, Job*, int);

@


\subsection{[[mk/mk.h]]}

<<constant [[BIGBLOCK]]>>=
#define	BIGBLOCK	20000
@

<<function [[RERR]]>>=
//#define	RERR(r)		(fprint(STDERR, "mk: %s:%d: rule error; ", (r)->file, (r)->line))
@
<<function [[SEP]]>>=
//#define	SEP(c)		(((c)==' ')||((c)=='\t')||((c)=='\n'))
@

%-------------------------------------------------------------

<<mk/mk.h>>=
#include	<u.h>
#include	<libc.h>
#include	<bio.h>
#include	<regexp.h>

extern Biobuf bout;

typedef struct Symtab Symtab;
typedef struct Word Word;
typedef struct Rule Rule;
typedef struct Node Node;
typedef struct Arc Arc;
typedef struct ShellEnvVar ShellEnvVar;
typedef struct Job Job;
typedef struct Bufblock Bufblock;
typedef struct Shell Shell;

<<struct [[Bufblock]]>>

<<struct [[Word]]>>

// used by main and parse.c
extern Word *target1;


<<struct [[Envy]]>>

extern ShellEnvVar *shellenv;

<<struct [[Rule]]>>

extern Rule *rules, *metarules, *patrule;

<<enum [[Rule_attr]]>>

<<macro [[empty_recipe]]>>
<<macro [[empty_prereqs]]>>
<<macro [[empty_words]]>>

<<constant [[NREGEXP]]>>

<<struct [[Arc]]>>

<<struct [[Node]]>>

<<enum [[Node_flag]]>>
<<function [[MADESET]]>>

<<struct [[Job]]>>

extern Job *jobs;

<<struct [[Symtab]]>>

<<enum [[Namespace]]>>

<<type [[WaitupParam]]>>
<<type [[WaitupResult]]>>

extern	int	debug;
extern	bool	nflag, tflag, iflag, kflag, aflag;
extern	int	mkinline;
extern	char	*infile;
extern	bool explain;
extern int runerrs;

<<function [[SYNERR]]>>
<<function [[RERR]]>>
<<constant [[NAMEBLOCK]]>>
<<constant [[BIGBLOCK]]>>

<<function [[SEP]]>>
<<function [[WORDCHR]]>>

<<enum [[Dxxx]]>>
<<function [[DEBUG]]>>

<<function [[PERCENT]]>>

//pad: Shell below allows to change the shell used by mk at runtime.
// Thus, mk of goken can be used to compile goken itself and fork-plan9,
// which have different requirements. I did that in xix/mk first
// and apparently 9-cc-colombier did something similar but only
// with MKSHELL defined in the mkfile itself (with some pushshell()/popshell())
typedef struct Shell {
    char* shell;
    char* shellname;
//TODO: later
//    char *shflags;
//
//    int IWS;
//    char* termchars;
//
//    // methods
//    char* (*charin)(char *cp, char *pat);
//    char* (*expandquote)(char *s, Rune r, Bufblock *b);
//    int (*escapetoken)(Biobuf *bp, Bufblock *buf, int preserve, int esc);
//    char* (*copyq)(char *s, Rune q, Bufblock *buf);
} Shell;
//old:
//extern	char	*termchars;
//extern	int	IWS;
//extern	char 	*shell;
//extern	char 	*shellname;
//extern	char 	*shflags;
//extern Shell sh;
//extern Shell rc;
// either sh or rc
//extern Shell *shell;

// right now always rc, but can be configured with MKSHELL to use a different
// path than /bin/rc (e.g., /opt/plan9/bin/rc when under Linux or even goken/bin/rc/)
extern Shell *shell;

extern	char	*termchars;
extern	char 	*shflags;

#include	"fns.h"
@

%dead: local to a file
%//extern	char 	*shell;
%//extern	char 	*shellname;


\subsection{[[mk/globals.c]]}
%pad: I created this file (was in main.c before)

%-------------------------------------------------------------

<<mk/globals.c>>=
#include	"mk.h"

// used by DEBUG which is used by many files
<<global [[debug]]>>

<<global [[infile]]>>
<<global [[mkinline]]>>

<<global [[rules]]>>
<<global [[metarules]]>>
<<global [[patrule]]>>

// was in main.c, but used also by parse.c
<<global [[target1]]>>

<<global [[nflag]]>>
<<global [[tflag]]>>
<<global [[iflag]]>>
<<global [[kflag]]>>
<<global [[aflag]]>>

<<global [[explain]]>>

<<global [[jobs]]>>

<<global [[bout]]>>

@


\subsection{[[mk/utils.c]]}
%pad: I created this file (was in main.c)

%-------------------------------------------------------------

<<mk/utils.c>>=
#include "mk.h"

<<function [[Malloc]]>>

<<function [[Realloc]]>>

// maketmp() is back in Plan9.c
@


\subsection{[[mk/bufblock.c]]}

%-------------------------------------------------------------

<<mk/bufblock.c>>=
#include	"mk.h"

<<global [[freelist]]>>
<<constant [[QUANTA]]>>

<<constructor [[newbuf]]>>

<<destructor [[freebuf]]>>

<<function [[growbuf]]>>

<<function [[bufcpy]]>>

<<function [[insert]]>>

<<function [[rinsert]]>>
@


\subsection{[[mk/symtab.c]]}

%-------------------------------------------------------------

<<mk/symtab.c>>=
#include	"mk.h"

<<constant [[NHASH]]>>
<<constant [[HASHMUL]]>>
<<global [[hash]]>>

<<function [[symlook]]>>

<<function [[symtraverse]]>>

<<function [[symstat]]>>
@

%dead: <<function syminit>>

%//void	symdel(char*, int);

%//void
%//symdel(char *sym, int space)
%//{
%//    long h;
%//    char *p;
%//    Symtab *s, *ls;
%//
%//    /* multiple memory leaks */
%//
%//    for(p = sym, h = space; *p; h += *p++)
%//        h *= HASHMUL;
%//    if(h < 0)
%//        h = ~h;
%//    h %= NHASH;
%//    for(s = hash[h], ls = 0; s; ls = s, s = s->next)
%//        if((s->space == space) && (strcmp(s->name, sym) == 0)){
%//            if(ls)
%//                ls->next = s->next;
%//            else
%//                hash[h] = s->next;
%//            free((char *)s);
%//        }
%//}


\subsection{[[mk/rc.c]]}

% also a sh.c

%dead:
%<<global IWS>>=
%int	IWS = '\1';		/* inter-word separator in env - not used in plan 9 */
%@

%-------------------------------------------------------------

<<mk/rc.c>>=
#include	"mk.h"

<<global [[termchars]]>>
<<global [[shflags]]>>

/*
 *	This file contains functions that depend on rc's syntax.  Most
 *	of the routines extract strings observing rc's escape conventions
 */

<<function [[squote]]>>

<<function [[charin]]>>

<<function [[expandquote]]>>

<<function [[escapetoken]]>>

<<function [[copysingle]]>>

<<function [[copyq]]>>
@


\subsection{[[mk/word.c]]}

%-------------------------------------------------------------

<<mk/word.c>>=
#include	"mk.h"

<<constructor [[newword]]>>


<<function [[wtos]]>>

<<function [[wdup]]>>

<<destructor [[freewords]]>>

// was in recipe.c before
<<function [[addw]]>>

@


\subsection{[[mk/var.c]]}

%-------------------------------------------------------------

<<mk/var.c>>=
#include	"mk.h"

<<function [[setvar]]>>

<<function [[shname]]>>
@


\subsection{[[mk/archive.c]]}

%-------------------------------------------------------------

<<mk/archive.c>>=
#include	"mk.h"
#include	<ar.h>

static void atimes(char *);
static char *split(char*, char**);

<<function [[atimeof]]>>

<<function [[atouch]]>>

<<function [[atimes]]>>

<<function [[type]]>>

<<function [[split]]>>
@


\subsection{[[mk/match.c]]}

%-------------------------------------------------------------

<<mk/match.c>>=
#include	"mk.h"

<<function [[match]]>>

<<function [[subst]]>>
@


\subsection{[[mk/env.c]]}

%-------------------------------------------------------------

<<mk/env.c>>=
#include	"mk.h"

<<constant [[ENVQUANTA]]>>

<<global [[shellenv]]>>
<<global [[nextv]]>>

<<global [[specialvars]]>>

// encodenulls() is back in Plan9.c
// readenv() is back in Plan9.c
extern void readenv(void);
// exportenv() is back in plan9.c

<<function [[inithash]]>>

<<function [[envinsert]]>>

<<function [[envupd]]>>

<<function [[ecopy]]>>

<<function [[initenv]]>>

<<function [[buildenv]]>>
@


\subsection{[[mk/parse.c]]}

%-------------------------------------------------------------

<<mk/parse.c>>=
#include        "mk.h"

void    ipop(void);
void    ipush(void);
static int   rhead(char *, Word **, Word **, int *, char **);
static char* rbody(Biobuf*);

<<function [[parse]]>>

<<function [[addrules]]>>

<<function [[rhead]]>>

<<function [[rbody]]>>

<<struct [[input]]>>
<<global [[inputs]]>>

<<function [[ipush]]>>

<<function [[ipop]]>>

@


\subsection{[[mk/shprint.c]]}

%-------------------------------------------------------------

<<mk/shprint.c>>=
#include	"mk.h"

static char *vexpand(char*, ShellEnvVar*, Bufblock*);
static char *shquote(char*, Rune, Bufblock*);
static char *shbquote(char*, Bufblock*);

<<function [[shprint]]>>

<<function [[mygetenv]]>>

<<function [[vexpand]]>>

<<function [[front]]>>
@


\subsection{[[mk/job.c]]}
%pad: I deleted this file and moved functions were they were used (recipe.c)

%-------------------------------------------------------------

<<mk/job.c>>=
#include	"mk.h"

@


\subsection{[[mk/arc.c]]}
%pad: I deleted this file and moved functions were they were used (graph.c)

%-------------------------------------------------------------

<<mk/arc.c>>=
#include	"mk.h"

@


\subsection{[[mk/rule.c]]}

%-------------------------------------------------------------

<<mk/rule.c>>=
#include	"mk.h"

<<global [[lr]]>>
<<global [[lmr]]>>

<<global [[nrules]]>>

static int rcmp(Rule *r, char *target, Word *tail);


<<function [[addrule]]>>


<<function [[rcmp]]>>

<<function [[rulecnt]]>>

<<function [[regerror]]>>
@


\subsection{[[mk/lex.c]]}

%-------------------------------------------------------------

<<mk/lex.c>>=
#include	"mk.h"

static	int	bquote(Biobuf*, Bufblock*);

<<function [[assline]]>>

<<function [[bquote]]>>

<<function [[nextrune]]>>
@


\subsection{[[mk/file.c]]}

%-------------------------------------------------------------

<<mk/file.c>>=
#include	"mk.h"

// chgtime() is back in Plan9.c 
extern int chgtime(char *name);
// dirtime() is back in Plan9.c 
// bulkmtime() is back in Plan9.c 
// mkmtime is back in Plan9.c 

/* table-driven version in bootes dump of 12/31/96 */

<<function [[timeof]]>>

<<function [[touch]]>>

<<function [[delete]]>>

<<function [[timeinit]]>>
@


\subsection{[[mk/run.c]]}

%-------------------------------------------------------------

<<mk/run.c>>=
#include	"mk.h"

typedef struct RunEvent RunEvent;
typedef struct Process Process;

int	nextslot(void);
int pidslot(int);
void killchildren(char *msg);

static void sched(void);

static void pnew(int, int);
static void pdelete(Process *);

<<struct [[RunEvent]]>>

<<global [[events]]>>
<<global [[nevents]]>>
<<global [[nrunning]]>>
<<global [[nproclimit]]>>

<<struct [[Process]]>>
<<global [[phead]]>>
<<global [[pfree]]>>

<<function [[run]]>>

// shell is back in Plan9.c
// shellname is back in Plan9.c

<<function [[sched]]>>

// execsh() is back in Plan9.c
// xwaitfor() is back in Plan9.c
extern int xwaitfor(char *msg);

<<function [[waitup]]>>

<<function [[nproc]]>>

<<function [[nextslot]]>>

<<function [[pidslot]]>>


<<function [[pnew]]>>

<<function [[pdelete]]>>

// Exit() is back in Plan9.c
// notifyf() is back in Plan9.c
// catchnotes() is back in Plan9.c
// expunge() is back in Plan9.c
extern void expunge(int pid, char *msg);

<<function [[killchildren]]>>

<<global [[tslot]]>>
<<global [[tick]]>>

<<function [[usage]]>>

<<function [[prusage]]>>

// pipecmd() is back in Plan9.c
@

\subsection{[[mk/graph.c]]}


%-------------------------------------------------------------

<<mk/graph.c>>=
#include	"mk.h"

static Node *applyrules(char *, char *);
static void togo(Node *);
static bool vacuous(Node *);
Arc* newarc(Node *n, Rule *r, char *stem, Resub *match);

static Node *newnode(char *);
static void trace(char *, Arc *);
static void cyclechk(Node *);
static void ambiguous(Node *);
static void attribute(Node *);

<<global [[nreps]]>>

<<function [[graph]]>>

<<function [[applyrules]]>>

<<function [[nrep]]>>

<<function [[togo]]>>

<<function [[vacuous]]>>

<<constructor [[newnode]]>>

// rcopy() is back in Plan9.c
extern void rcopy(char **to, Resub *match, int n);

<<constructor [[newarc]]>>


<<function [[trace]]>>

<<function [[cyclechk]]>>

<<function [[ambiguous]]>>

<<function [[attribute]]>>
@


\subsection{[[mk/mk.c]]}


%-------------------------------------------------------------

<<mk/mk.c>>=
#include	"mk.h"

void clrmade(Node*);
void work(Node*, bool*, Node*, Arc*);

<<global [[runerrs]]>>

<<function [[mk]]>>

<<function [[clrmade]]>>

<<function [[unpretend]]>>

<<function [[work]]>>

<<function [[update]]>>

<<function [[pcmp]]>>

<<function [[outofdate]]>>
@


\subsection{[[mk/recipe.c]]}


%-------------------------------------------------------------

<<mk/recipe.c>>=
#include	"mk.h"

<<constructor [[newjob]]>>

<<function [[dorecipe]]>>

@


\subsection{[[mk/varsub.c]]}


%-------------------------------------------------------------

<<mk/varsub.c>>=
#include	"mk.h"

static	Word		*subsub(Word*, char*, char*);
static	Word		*expandvar(char**);
static	Bufblock	*varname(char**);
static	Word		*extractpat(char*, char**, char*, char*);
static	bool		submatch(char*, Word*, Word*, int*, char**);
static	Word		*varmatch(char *);

<<function [[varsub]]>>

<<function [[varname]]>>

<<function [[varmatch]]>>

<<function [[expandvar]]>>

<<function [[extractpat]]>>

<<function [[subsub]]>>

<<function [[submatch]]>>


<<function [[nextword]]>>

<<function [[stow]]>>

@

\subsection{[[mk/dumpers.c]]}
%pad: I created this file, the dumpers were spread in different files before

<<mk/dumpers.c>>=
#include	"mk.h"

void	dumpa(char*, Arc*);

<<dumper dumpn>>

<<dumper dumpa>>

<<dumper dumpj>>

<<function [[print1]]>>

<<dumper dumpv>>

<<dumper dumpr>>

<<dumper dumpw>>

@

\subsection{[[mk/main.c]]}


%-------------------------------------------------------------

<<mk/main.c>>=
#include	"mk.h"

<<constant [[MKFILE]]>>

<<global [[version]]>>

// see also globals.c

<<global [[uflag]]>>

void badusage(void);

#ifdef	PROF
<<global [[buf]]>>
#endif

<<function [[main]]>>

<<function [[badusage]]>>
@


\subsection{[[mk/Posix.c]]}

%-------------------------------------------------------------

<<mk/Posix.c>>=

// to avoid conflict for wait(), waitpid() signatures
#define NOPLAN9DEFINES
#include        "mk.h"

#include        <dirent.h>
#include        <signal.h>
#include        <sys/wait.h>
#include        <utime.h>
#include        <stdio.h>

typedef struct ShellEnvVar Envy;
int     IWS = '\1'; /* inter-word separator in env - not used in plan 9 */

//char  *shell =        "/bin/sh";
//char  *shellname =    "sh";

Shell rc = {
  .shellname = "rc",
  .shell = "/bin/rc",
};

Shell* shell = &rc;

extern char **environ;

void
readenv(void)
{
 char **p, *s;
 Word *w;

 for(p = environ; *p; p++){
  s = shname(*p);
  if(*s == '=') {
   *s = 0;
   w = newword(s+1);
  } else
   w = newword("");
  if (symlook(*p, S_INTERNAL, 0))
   continue;
  s = strdup(*p);
  setvar(s, (void *)w);
  //symlook(s, S_EXPORTED, (void*)"")->value = (void*)"";
 }
}

/*
 *      done on child side of fork, so parent's env is not affected
 *      and we don't care about freeing memory because we're going
 *      to exec immediately after this.
 */
void
exportenv(Envy *e)
{
 int i;
 char **p;
 char *values;

 p = 0;
 for(i = 0; e->name; e++, i++) {
  p = (char**) Realloc(p, (i+2)*sizeof(char*));
  if (e->values)
   values = wtos(e->values, IWS);
  else
   values = "";
  p[i] = malloc(strlen(e->name) + strlen(values) + 2);
  sprint(p[i], "%s=%s", e->name,  values);
 }
 p[i] = 0;
 environ = p;
}

int
xwaitfor(char *msg)
{
 int status;
 int pid;

 *msg = 0;
 pid = wait(&status);
 if(pid > 0) {
  if(status&0x7f) {
   if(status&0x80)
    snprint(msg, ERRMAX, "signal %d, core dumped", status&0x7f);
   else
    snprint(msg, ERRMAX, "signal %d", status&0x7f);
  } else if(status&0xff00)
   snprint(msg, ERRMAX, "exit(%d)", (status>>8)&0xff);
 }
 return pid;
}

void
expunge(int pid, char *msg)
{
 if(strcmp(msg, "interrupt"))
  kill(pid, SIGINT);
 else
  kill(pid, SIGHUP);
}

int
execsh(char *args, char *cmd, Bufblock *buf, Envy *e)
{
 char *p;
 int tot, n, pid, in[2], out[2];

 if(buf && pipe(out) < 0){
  perror("pipe");
  Exit();
 }
 pid = fork();
 if(pid < 0){
  perror("mk fork");
  Exit();
 }
 if(pid == 0){
  if(buf)
   close(out[0]);
  if(pipe(in) < 0){
   perror("pipe");
   Exit();
  }
  pid = fork();
  if(pid < 0){
   perror("mk fork");
   Exit();
  }
  if(pid != 0){
   dup2(in[0], 0);
   if(buf){
    dup2(out[1], 1);
    close(out[1]);
   }
   close(in[0]);
   close(in[1]);
   if (e)
    exportenv(e);
   if(shflags)
    execl(shell->shell, shell->shellname, shflags, args, nil);
   else
    execl(shell->shell, shell->shellname, args, nil);
   perror(shell->shell);
   _exits("exec");
  }
  close(out[1]);
  close(in[0]);
  if(DEBUG(D_EXEC))
   fprint(1, "starting: %s\n", cmd);
  p = cmd+strlen(cmd);
  while(cmd < p){
   n = write(in[1], cmd, p-cmd);
   if(n < 0)
    break;
   cmd += n;
  }
  close(in[1]);
  _exits(0);
 }
 if(buf){
  close(out[1]);
  tot = 0;
  for(;;){
   if (buf->current >= buf->end)
    growbuf(buf);
   n = read(out[0], buf->current, buf->end-buf->current);
   if(n <= 0)
    break;
   buf->current += n;
   tot += n;
  }
  if (tot && buf->current[-1] == '\n')
   buf->current--;
  close(out[0]);
 }
 return pid;
}

int
pipecmd(char *cmd, Envy *e, int *fd)
{
 int pid, pfd[2];

 if(DEBUG(D_EXEC))
  fprint(1, "pipecmd='%s'\n", cmd);/**/

 if(fd && pipe(pfd) < 0){
  perror("pipe");
  Exit();
 }
 pid = fork();
 if(pid < 0){
  perror("mk fork");
  Exit();
 }
 if(pid == 0){
  if(fd){
   close(pfd[0]);
   dup2(pfd[1], 1);
   close(pfd[1]);
  }
  if(e)
   exportenv(e);
  if(shflags)
   execl(shell->shell, shell->shellname, shflags, "-c", cmd, nil);
  else
   execl(shell->shell, shell->shellname, "-c", cmd, nil);
  perror(shell->shell);
  _exits("exec");
 }
 if(fd){
  close(pfd[1]);
  *fd = pfd[0];
 }
 return pid;
}

void
Exit(void)
{
 while(wait(0) >= 0)
  ;
 exits("error");
}

static  struct
{
 int    sig;
 char   *msg;
}       sigmsgs[] =
{
 SIGALRM,       "alarm",
 SIGFPE,                "sys: fp: fptrap",
 SIGPIPE,       "sys: write on closed pipe",
 SIGILL,                "sys: trap: illegal instruction",
 SIGSEGV,       "sys: segmentation violation",
 0,             0
};

static void
notifyf(int sig)
{
 int i;

 for(i = 0; sigmsgs[i].msg; i++)
  if(sigmsgs[i].sig == sig)
   killchildren(sigmsgs[i].msg);

 /* should never happen */
 signal(sig, SIG_DFL);
 kill(getpid(), sig);
}

void
catchnotes()
{
 int i;

 for(i = 0; sigmsgs[i].msg; i++)
  signal(sigmsgs[i].sig, notifyf);
}

char*
maketmp(void)
{
 static char temp[L_tmpnam];

 return tmpnam(temp);
}

int
chgtime(char *name)
{
 Dir *sbuf;
 struct utimbuf u;

 if((sbuf = dirstat(name)) != nil) {
  u.actime = sbuf->atime;
  free(sbuf);
  u.modtime = time(0);
  return utime(name, &u);
 }
 return close(p9create(name, OWRITE, 0666));
}

void
rcopy(char **to, Resub *match, int n)
{
 int c;
 char *p;

 *to = match->s.sp;             /* stem0 matches complete target */
 for(to++, match++; --n > 0; to++, match++){
  if(match->s.sp && match->e.ep){
   p = match->e.ep;
   c = *p;
   *p = 0;
   *to = strdup(match->s.sp);
   *p = c;
  }
  else
   *to = 0;
 }
}

ulong
mkmtime(char *name, bool _force)
{
 Dir *buf;
 ulong t;

 buf = dirstat(name);
 if(buf == nil)
  return 0;
 t = buf->mtime;
 free(buf);
 return t;
}


char *stab;

char *
membername(char *s, int fd, char *sz)
{
 long t;
 char *p, *q;

 if(s[0] == '/' && s[1] == '\0'){       /* long file name string table */
  t = atol(sz);
  if(t&01) t++;
  stab = malloc(t);
  if(read(fd, stab, t) != t)
   {}
  return nil;
 }
 else if(s[0] == '/' && stab != nil)    {       /* index into string table */
  p = stab+atol(s+1);
  q = strchr(p, '/');
  if (q)
   *q = 0;                              /* terminate string here */
  return p;
 }else
  return s;
}

@

\subsection{[[mk/Plan9.c]]}
%pad: I used to spread the content of Plan9.c around
% but with goken I reintroduced it so we could have mk for unix too

%-------------------------------------------------------------

<<mk/Plan9.c>>=
#include	"mk.h"

// could be in utils.c
<<function [[maketmp]]>>

// could be in env.c
<<function [[encodenulls]]>>
<<function [[readenv]]>>
<<function [[exportenv]]>>

// could be in file.c
<<function [[chgtime]]>>
<<function [[dirtime]]>>
<<function [[bulkmtime]]>>
<<function [[mkmtime]]>>

// could be in run.c
<<global [[shell]]>>
<<global [[shellname]]>>

// could be in run.c
<<function [[execsh]]>>
<<function [[waitfor]]>>

// could be in run.c
<<function [[Exit]]>>

// back in run.c
extern void killchildren(char *msg);

<<function [[notifyf]]>>
<<function [[catchnotes]]>>
<<function [[expunge]]>>

// could be in run.c
<<function [[pipecmd]]>>

// could be in graph.c
<<function [[rcopy]]>>

@
