\section{[[mk/]]}

\subsection*{[[mk/fns.h]]}

%-------------------------------------------------------------

<<mk/fns.h>>=

// Constructors/destructors for core data structures

// bufblock.c
Bufblock* newbuf(void);
void	freebuf(Bufblock*);
void	growbuf(Bufblock *);
void	bufcpy(Bufblock *, char *, int);
void	insert(Bufblock *, int);
void	rinsert(Bufblock *, Rune);
<<macro isempty>>
<<macro resetbuf>>
<<macro bufcontent>>

// words.c
Word*	newword(char*);
void	freewords(Word*);
Word*	wdup(Word*);
char*	wtos(Word*, int);
void	addw(Word*, char*);

// symtab.c
Symtab*	symlook(char*, int, void*);
void	symtraverse(int, void(*)(Symtab*));
void	symstat(void);

// var.c
void	setvar(char*, void*);
char*	shname(char*);

// rule.c
void	addrule(char*, Word*, char*, Word*, int, int, char*);
void	addrules(Word*, Word*, char*, int, int, char*);
char*	rulecnt(void);



// env.c
void	initenv(void);
void	execinit(void);
Envy*	buildenv(Job*, int);



// lex.c
int		assline(Biobuf *, Bufblock *);
int		nextrune(Biobuf*, int);

// parse.c
void	parse(char*, int, int);
Word*	stow(char*);

// varsub.c
Word*	varsub(char**);



// graph.c
Node*	graph(char*);
void	nrep(void);

// file.c
ulong	timeof(char*, int);
void	timeinit(char*);
void	touch(char*);

// match.c
int		match(char*, char*, char*);
void	subst(char*, char*, char*, int);



// mk.c
void	mk(char*);
int		outofdate(Node*, Arc*, int);
void	update(bool, Node*);

// recipe.c
void		dorecipe(Node*, bool*);

// run.c
void	run(Job*);
int		waitup(int, int*);
void	killchildren(char*);
void	nproc(void);

void	prusage(void);
void	usage(void);

// shprint.c
void	shprint(char*, Envy*, Bufblock*);
void	front(char*);



// plan9.c
int		execsh(char*, char*, Bufblock*, Envy*);
int		pipecmd(char*, Envy*, int*);
int		waitfor(char*);
void	catchnotes(void);
void	readenv(void);
ulong	mkmtime(char*, bool);
int		chgtime(char*);
void	Exit(void);
char*	maketmp(void);
void	delete(char*);
void	expunge(int, char*);
void	rcopy(char**, Resub*, int);

// rc.c
char* 	charin(char *, char *);
char*	copyq(char*, Rune, Bufblock*);
int		escapetoken(Biobuf*, Bufblock*, int, int);
char*	expandquote(char*, Rune, Bufblock*);


// archive.c
ulong	atimeof(int,char*);
void	atouch(char*);


// utils.c
void*	Malloc(int);
void*	Realloc(void*, int);

// Dumpers
void	dumpv(char*);
void	dumpw(char*, Word*);
void	dumpr(char*, Rule*);
void	dumpn(char*, Node*);
void	dumpj(char*, Job*, int);

@


\subsection*{[[mk/mk.h]]}



<<constant BIGBLOCK>>=
#define	BIGBLOCK	20000
@


<<function RERR>>=
//#define	RERR(r)		(fprint(STDERR, "mk: %s:%d: rule error; ", (r)->file, (r)->line))
@
<<function SEP>>=
//#define	SEP(c)		(((c)==' ')||((c)=='\t')||((c)=='\n'))
@


%-------------------------------------------------------------

<<mk/mk.h>>=
#include	<u.h>
#include	<libc.h>
#include	<bio.h>
#include	<regexp.h>

extern Biobuf bout;

typedef struct Symtab Symtab;
typedef struct Word Word;
typedef struct Rule Rule;
typedef struct Node Node;
typedef struct Arc Arc;
typedef struct Envy Envy;
typedef struct Job Job;
typedef struct Bufblock Bufblock;

<<struct Bufblock>>

<<struct Word>>

// used by main and parse.c
extern Word *target1;


<<struct Envy>>

extern Envy *envy;

<<struct Rule>>

extern Rule *rules, *metarules, *patrule;

<<enum Rule_attr>>

<<macro empty_recipe>>
<<macro empty_prereqs>>

<<constant NREGEXP>>

<<struct Arc>>

<<struct Node>>

<<enum Node_flag>>
<<function MADESET>>

<<struct Job>>

extern Job *jobs;

<<struct Symtab>>

<<enum Namespace>>

<<type WaitupParam>>
<<type WaitupResult>>

extern	int	debug;
extern	bool	nflag, tflag, iflag, kflag, aflag;
extern	int	mkinline;
extern	char	*infile;
extern	bool explain;
extern	char	*termchars;
extern	char 	*shflags;
extern int runerrs;

<<function SYNERR>>
<<function RERR>>
<<constant NAMEBLOCK>>
<<constant BIGBLOCK>>

<<function SEP>>
<<function WORDCHR>>

<<enum Dxxx>>
<<function DEBUG>>

<<function PERCENT>>

#include	"fns.h"
@

%dead: local to a file
%//extern	char 	*shell;
%//extern	char 	*shellname;


\subsection*{[[mk/globals.c]]}
%pad: I created this file (was in main.c before)


%-------------------------------------------------------------

<<mk/globals.c>>=
#include	"mk.h"

// used by DEBUG which is used by many files
<<global debug>>

<<global infile>>
<<global mkinline>>

<<global rules>>
<<global metarules>>
<<global patrule>>

// was in main.c, but used also by parse.c
<<global target1>>

<<global nflag>>
<<global tflag>>
<<global iflag>>
<<global kflag>>
<<global aflag>>

<<global explain>>

<<global jobs>>

<<global bout>>

@


\subsection*{[[mk/utils.c]]}
%pad: I created this file (was in main.c)

%-------------------------------------------------------------

<<mk/utils.c>>=
#include "mk.h"

<<function Malloc>>

<<function Realloc>>
@


\subsection*{[[mk/bufblock.c]]}

%-------------------------------------------------------------

<<mk/bufblock.c>>=
#include	"mk.h"

<<global freelist>>
<<constant QUANTA>>

<<constructor newbuf>>

<<destructor freebuf>>

<<function growbuf>>

<<function bufcpy>>

<<function insert>>

<<function rinsert>>
@


\subsection*{[[mk/symtab.c]]}



%-------------------------------------------------------------

<<mk/symtab.c>>=
#include	"mk.h"

<<constant NHASH>>
<<constant HASHMUL>>
<<global hash>>

<<function symlook>>

<<function symtraverse>>

<<function symstat>>
@

%dead: <<function syminit>>

%//void	symdel(char*, int);

%//void
%//symdel(char *sym, int space)
%//{
%//    long h;
%//    char *p;
%//    Symtab *s, *ls;
%//
%//    /* multiple memory leaks */
%//
%//    for(p = sym, h = space; *p; h += *p++)
%//        h *= HASHMUL;
%//    if(h < 0)
%//        h = ~h;
%//    h %= NHASH;
%//    for(s = hash[h], ls = 0; s; ls = s, s = s->next)
%//        if((s->space == space) && (strcmp(s->name, sym) == 0)){
%//            if(ls)
%//                ls->next = s->next;
%//            else
%//                hash[h] = s->next;
%//            free((char *)s);
%//        }
%//}


\subsection*{[[mk/rc.c]]}

% also a sh.c

%dead:
%<<global IWS>>=
%int	IWS = '\1';		/* inter-word separator in env - not used in plan 9 */
%@

%-------------------------------------------------------------

<<mk/rc.c>>=
#include	"mk.h"

<<global termchars>>
<<global shflags>>

/*
 *	This file contains functions that depend on rc's syntax.  Most
 *	of the routines extract strings observing rc's escape conventions
 */

<<function squote>>

<<function charin>>

<<function expandquote>>

<<function escapetoken>>

<<function copysingle>>

<<function copyq>>
@


\subsection*{[[mk/word.c]]}

%-------------------------------------------------------------

<<mk/word.c>>=
#include	"mk.h"

<<constructor newword>>


<<function wtos>>

<<function wdup>>

<<destructor freewords>>

// was in recipe.c before
<<function addw>>

@


\subsection*{[[mk/var.c]]}

%-------------------------------------------------------------

<<mk/var.c>>=
#include	"mk.h"

<<function setvar>>

<<function shname>>
@


\subsection*{[[mk/plan9.c]]}

% also a Posix.c

%-------------------------------------------------------------

<<mk/plan9.c>>=
#include	"mk.h"

<<global shell>>
<<global shellname>>

static	Word	*encodenulls(char*, int);

<<function readenv>>

<<function encodenulls>>

<<function exportenv>>

<<function waitfor>>

<<function expunge>>

<<function execsh>>

<<function pipecmd>>

<<function Exit>>

<<function notifyf>>

<<function catchnotes>>

<<function maketmp>>

<<function chgtime>>

<<function rcopy>>

<<function dirtime>>

<<function bulkmtime>>

<<function mkmtime>>

@


\subsection*{[[mk/archive.c]]}


%-------------------------------------------------------------

<<mk/archive.c>>=
#include	"mk.h"
#include	<ar.h>

static void atimes(char *);
static char *split(char*, char**);

<<function atimeof>>

<<function atouch>>

<<function atimes>>

<<function type>>

<<function split>>
@


\subsection*{[[mk/match.c]]}

%-------------------------------------------------------------

<<mk/match.c>>=
#include	"mk.h"

<<function match>>

<<function subst>>
@


\subsection*{[[mk/env.c]]}

%-------------------------------------------------------------

<<mk/env.c>>=
#include	"mk.h"

<<constant ENVQUANTA>>

<<global envy>>
<<global nextv>>

<<global myenv>>

<<function initenv>>

<<function envinsert>>

<<function envupd>>

<<function ecopy>>

<<function execinit>>

<<function buildenv>>
@


\subsection*{[[mk/parse.c]]}

%-------------------------------------------------------------

<<mk/parse.c>>=
#include	"mk.h"

void	ipop(void);
void	ipush(void);
static int   rhead(char *, Word **, Word **, int *, char **);
static char* rbody(Biobuf*);

<<function parse>>

<<function addrules>>

<<function rhead>>

<<function rbody>>

<<struct input>>
<<global inputs>>

<<function ipush>>

<<function ipop>>

@


\subsection*{[[mk/shprint.c]]}


%-------------------------------------------------------------

<<mk/shprint.c>>=
#include	"mk.h"

static char *vexpand(char*, Envy*, Bufblock*);
static char *shquote(char*, Rune, Bufblock*);
static char *shbquote(char*, Bufblock*);

<<function shprint>>

<<function mygetenv>>

<<function vexpand>>

<<function front>>
@


\subsection*{[[mk/job.c]]}
%pad: I deleted this file and moved functions were they were used (recipe.c)

%-------------------------------------------------------------

<<mk/job.c>>=
#include	"mk.h"

@


\subsection*{[[mk/arc.c]]}
%pad: I deleted this file and moved functions were they were used (graph.c)

%-------------------------------------------------------------

<<mk/arc.c>>=
#include	"mk.h"

@


\subsection*{[[mk/rule.c]]}


%-------------------------------------------------------------

<<mk/rule.c>>=
#include	"mk.h"

<<global lr>>
<<global lmr>>

<<global nrules>>

static int rcmp(Rule *r, char *target, Word *tail);


<<function addrule>>


<<function rcmp>>

<<function rulecnt>>

<<function regerror>>
@


\subsection*{[[mk/lex.c]]}

%-------------------------------------------------------------

<<mk/lex.c>>=
#include	"mk.h"

static	int	bquote(Biobuf*, Bufblock*);

<<function assline>>

<<function bquote>>

<<function nextrune>>
@


\subsection*{[[mk/file.c]]}

%-------------------------------------------------------------

<<mk/file.c>>=
#include	"mk.h"

/* table-driven version in bootes dump of 12/31/96 */

<<function timeof>>

<<function touch>>

<<function delete>>

<<function timeinit>>
@


\subsection*{[[mk/run.c]]}

%-------------------------------------------------------------

<<mk/run.c>>=
#include	"mk.h"

typedef struct RunEvent RunEvent;
typedef struct Process Process;

int	nextslot(void);
int pidslot(int);

static void sched(void);

static void pnew(int, int);
static void pdelete(Process *);

<<struct RunEvent>>

<<global events>>
<<global nevents>>
<<global nrunning>>
<<global nproclimit>>

<<struct Process>>
<<global phead>>
<<global pfree>>

<<function run>>

<<function sched>>

<<function waitup>>

<<function nproc>>

<<function nextslot>>

<<function pidslot>>


<<function pnew>>

<<function pdelete>>

<<function killchildren>>

<<global tslot>>
<<global tick>>

<<function usage>>

<<function prusage>>
@

\subsection*{[[mk/graph.c]]}


%-------------------------------------------------------------

<<mk/graph.c>>=
#include	"mk.h"

static Node *applyrules(char *, char *);
static void togo(Node *);
static int vacuous(Node *);
Arc* newarc(Node *n, Rule *r, char *stem, Resub *match);

static Node *newnode(char *);
static void trace(char *, Arc *);
static void cyclechk(Node *);
static void ambiguous(Node *);
static void attribute(Node *);

<<global nreps>>

<<function graph>>

<<function applyrules>>

<<function nrep>>

<<function togo>>

<<function vacuous>>

<<constructor newnode>>

<<constructor newarc>>


<<function trace>>

<<function cyclechk>>

<<function ambiguous>>

<<function attribute>>
@


\subsection*{[[mk/mk.c]]}


%-------------------------------------------------------------

<<mk/mk.c>>=
#include	"mk.h"

void clrmade(Node*);
void work(Node*, bool*, Node*, Arc*);

<<global runerrs>>

<<function mk>>

<<function clrmade>>

<<function unpretend>>

<<function work>>

<<function update>>

<<function pcmp>>

<<function outofdate>>
@


\subsection*{[[mk/recipe.c]]}


%-------------------------------------------------------------

<<mk/recipe.c>>=
#include	"mk.h"

<<constructor newjob>>

<<function dorecipe>>

@


\subsection*{[[mk/varsub.c]]}


%-------------------------------------------------------------

<<mk/varsub.c>>=
#include	"mk.h"

static	Word		*subsub(Word*, char*, char*);
static	Word		*expandvar(char**);
static	Bufblock	*varname(char**);
static	Word		*extractpat(char*, char**, char*, char*);
static	int		submatch(char*, Word*, Word*, int*, char**);
static	Word		*varmatch(char *);

<<function varsub>>

<<function varname>>

<<function varmatch>>

<<function expandvar>>

<<function extractpat>>

<<function subsub>>

<<function submatch>>


<<function nextword>>

<<function stow>>

@

\subsection*{[[mk/dumpers.c]]}
%pad: I created this file, the dumpers were spread in different files before

<<mk/dumpers.c>>=
#include	"mk.h"

void	dumpa(char*, Arc*);

<<dumper dumpn>>

<<dumper dumpa>>

<<dumper dumpj>>

<<function print1>>

<<dumper dumpv>>

<<dumper dumpr>>

<<dumper dumpw>>

@

\subsection*{[[mk/main.c]]}


%-------------------------------------------------------------

<<mk/main.c>>=
#include	"mk.h"

<<constant MKFILE>>

<<global version>>

// see also globals.c

<<global uflag>>

void badusage(void);

#ifdef	PROF
<<global buf>>
#endif

<<function main>>

<<function badusage>>
@
