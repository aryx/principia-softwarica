\section{[[mk/]]}

\subsection*{[[mk/fns.h]]}

%-------------------------------------------------------------

<<mk/fns.h>>=
// Utilities
void*	Malloc(int);
void*	Realloc(void*, int);
void	Exit(void);
char*	maketmp(void);
void	delete(char*);

// Constructors/destructors core data structures
// Bufblock
Bufblock* newbuf(void);
void	freebuf(Bufblock*);
void	growbuf(Bufblock *);
void	bufcpy(Bufblock *, char *, int);
char*	copyq(char*, Rune, Bufblock*);
void	insert(Bufblock *, int);
void	rinsert(Bufblock *, Rune);
// Word
Word*	newword(char*);
void	delword(Word*);
Word*	wdup(Word*);
char*	wtos(Word*, int);
// Node
// Node* graph(char* target)
// Arc
Arc*	newarc(Node*, Rule*, char*, Resub*);
// Rule
void	addrule(char*, Word*, char*, Word*, int, int, char*);
void	addrules(Word*, Word*, char*, int, int, char*);
// Job
Job*	newjob(Rule*, Node*, char*, char**, Word*, Word*, Word*, Word*);

// Dumpers
void	dumpv(char*);
void	dumpw(char*, Word*);
void	dumpr(char*, Rule*);
void	dumpn(char*, Node*);
void	dumpa(char*, Arc*);
void	dumpj(char*, Job*, int);



// Symbol table
void	syminit(void);
Symtab*	symlook(char*, int, void*);
void	symtraverse(int, void(*)(Symtab*));
void	symstat(void);
//void	symdel(char*, int);

// File time managment
ulong	timeof(char*, int);
void	timeinit(char*);
ulong	mkmtime(char*, bool);
int		chgtime(char*);
void	touch(char*);

// Archive managment
ulong	atimeof(int,char*);
void	atouch(char*);

// Env managment
void	initenv(void);
Envy*	buildenv(Job*, int);
void	readenv(void);
void	setvar(char*, void*);

// Matching and subst
int		match(char*, char*, char*);
void	subst(char*, char*, char*, int);
Word*	varsub(char**);

// Process managment
int		execsh(char*, char*, Bufblock*, Envy*);
void	killchildren(char*);
int		waitfor(char*);
int		waitup(int, int*);
int		pipecmd(char*, Envy*, int*);
void	nproc(void);
void	prusage(void);
void	usage(void);

// Parsing
void	parse(char*, int, int);
int		assline(Biobuf *, Bufblock *);
Word*	stow(char*);

// Main functions
void	mk(char*);
Node*	graph(char*);
int		outofdate(Node*, Arc*, int);
int		dorecipe(Node*);
void	run(Job*);

// MISC
void	catchnotes(void);
char* 	charin(char *, char *);
void	execinit(void);
int		escapetoken(Biobuf*, Bufblock*, int, int);
char*	expandquote(char*, Rune, Bufblock*);
void	expunge(int, char*);
void	front(char*);
int		nextrune(Biobuf*, int);
void	nrep(void);
void	rcopy(char**, Resub*, int);
char*	rulecnt(void);
char*	shname(char*);
void	shprint(char*, Envy*, Bufblock*);
void	update(bool, Node*);
@


\subsection*{[[mk/mk.h]]}


<<constant NAMEBLOCK>>=
#define	NAMEBLOCK	1000
@

<<constant BIGBLOCK>>=
#define	BIGBLOCK	20000
@


<<function RERR>>=
//#define	RERR(r)		(fprint(STDERR, "mk: %s:%d: rule error; ", (r)->file, (r)->line))
@
<<function SEP>>=
//#define	SEP(c)		(((c)==' ')||((c)=='\t')||((c)=='\n'))
@


%-------------------------------------------------------------

<<mk/mk.h>>=
#include	<u.h>
#include	<libc.h>
#include	<bio.h>
#include	<regexp.h>

extern Biobuf bout;

typedef struct Symtab Symtab;
typedef struct Word Word;
typedef struct Rule Rule;
typedef struct Node Node;
typedef struct Arc Arc;
typedef struct Envy Envy;
typedef struct Job Job;
typedef struct Bufblock Bufblock;

<<struct Bufblock>>

<<struct Word>>

// used by main and parse.c
extern Word *target1;


<<struct Envy>>

extern Envy *envy;

<<struct Rule>>

extern Rule *rules, *metarules, *patrule;

<<enum rule_attr>>

<<constant NREGEXP>>

<<struct Arc>>

<<constant TOGO>>

<<struct Node>>

<<enum node_flag>>
<<function MADESET>>

<<struct Job>>

extern Job *jobs;

<<struct Symtab>>

<<enum sxxx>>

extern	int	debug;
extern	bool	nflag, tflag, iflag, kflag, aflag;
extern	int	mkinline;
extern	char	*infile;
extern	int	nreps;
extern	bool explain;
extern	char	*termchars;
extern	char 	*shflags;
//extern	char 	*shell;
//extern	char 	*shellname;
//extern	int	IWS;
extern int runerrs;

<<function SYNERR>>
<<function RERR>>
<<constant NAMEBLOCK>>
<<constant BIGBLOCK>>

<<function SEP>>
<<function WORDCHR>>

<<enum dxxx>>
<<function DEBUG>>

<<function PERCENT>>

#include	"fns.h"
@


\subsection*{[[mk/globals.c]]}


%-------------------------------------------------------------

<<mk/globals.c>>=
#include	"mk.h"

<<global debug>>
<<global rules>>
<<global metarules>>
<<global nflag>>
<<global tflag>>
<<global iflag>>
<<global kflag>>
<<global aflag>>
<<global explain>>
<<global nreps>>
<<global jobs>>
<<global bout>>
<<global patrule>>
// was in main.c, but used also by parse.c
<<global target1>>
@


\subsection*{[[mk/utils.c]]}

%-------------------------------------------------------------

<<mk/utils.c>>=
#include "mk.h"

<<function Malloc>>
<<function Realloc>>
@


\subsection*{[[mk/bufblock.c]]}

%-------------------------------------------------------------

<<mk/bufblock.c>>=
#include	"mk.h"

<<global freelist>>
<<constant QUANTA>>

<<constructor newbuf>>

<<destructor freebuf>>

<<function growbuf>>

<<function bufcpy>>

<<function insert>>

<<function rinsert>>
@


\subsection*{[[mk/symtab.c]]}

%-------------------------------------------------------------

<<mk/symtab.c>>=
#include	"mk.h"

<<constant NHASH>>
<<constant HASHMUL>>
<<global hash>>

<<function syminit>>

<<function symlook>>

<<function symtraverse>>

<<function symstat>>
@

%//void
%//symdel(char *sym, int space)
%//{
%//    long h;
%//    char *p;
%//    Symtab *s, *ls;
%//
%//    /* multiple memory leaks */
%//
%//    for(p = sym, h = space; *p; h += *p++)
%//        h *= HASHMUL;
%//    if(h < 0)
%//        h = ~h;
%//    h %= NHASH;
%//    for(s = hash[h], ls = 0; s; ls = s, s = s->next)
%//        if((s->space == space) && (strcmp(s->name, sym) == 0)){
%//            if(ls)
%//                ls->next = s->next;
%//            else
%//                hash[h] = s->next;
%//            free((char *)s);
%//        }
%//}


\subsection*{[[mk/rc.c]]}

%-------------------------------------------------------------

<<mk/rc.c>>=
#include	"mk.h"

<<global termchars>>
<<global shflags>>
<<global IWS>>

/*
 *	This file contains functions that depend on rc's syntax.  Most
 *	of the routines extract strings observing rc's escape conventions
 */

<<function squote>>

<<function charin>>

<<function expandquote>>

<<function escapetoken>>

<<function copysingle>>

<<function copyq>>
@


\subsection*{[[mk/word.c]]}

%-------------------------------------------------------------

<<mk/word.c>>=
#include	"mk.h"

static	Word	*nextword(char**);

<<constructor newword>>

<<function stow>>

<<function wtos>>

<<function wdup>>

<<destructor delword>>

<<function nextword>>

<<dumper dumpw>>
@


\subsection*{[[mk/var.c]]}

%-------------------------------------------------------------

<<mk/var.c>>=
#include	"mk.h"

<<function setvar>>

<<function print1>>

<<dumper dumpv>>

<<function shname>>
@


\subsection*{[[mk/plan9.c]]}

<<enum sxxx cases>>=
S_EXPORTED,	/* var -> current exported value */
@

<<function readenv>>=
void
readenv(void)
{
    char *p;
    int envf, f;
    Dir *e;
    char nam[1024];
    int i, n, len;
    Word *w;

    rfork(RFENVG);	/*  use copy of the current environment variables */

    envf = open("/env", OREAD);
    if(envf < 0)
        return;
    while((n = dirread(envf, &e)) > 0){
        for(i = 0; i < n; i++){
            len = e[i].length;
                /* don't import funny names, NULL values,
                 * or internal mk variables
                 */
            if(len <= 0 || *shname(e[i].name) != '\0')
                continue;
            if (symlook(e[i].name, S_INTERNAL, 0))
                continue;
            snprint(nam, sizeof nam, "/env/%s", e[i].name);
            f = open(nam, OREAD);
            if(f < 0)
                continue;
            p = Malloc(len+1);
            if(read(f, p, len) != len){
                perror(nam);
                close(f);
                continue;
            }
            close(f);
            if (p[len-1] == 0)
                len--;
            else
                p[len] = 0;
            w = encodenulls(p, len);
            free(p);
            p = strdup(e[i].name);
            setvar(p, (void *) w);
            symlook(p, S_EXPORTED, (void*)"")->u.ptr = "";
        }
        free(e);
    }
    close(envf);
}
@

<<function shname>>=
char *
shname(char *a)
{
    Rune r;
    int n;

    while (*a) {
        n = chartorune(&r, a);
        if (!WORDCHR(r))
            break;
        a += n;
    }
    return a;
}
@

<<function encodenulls>>=
/* break string of values into words at 01's or nulls*/
static Word *
encodenulls(char *s, int n)
{
    Word *w, *head;
    char *cp;

    head = w = 0;
    while (n-- > 0) {
        for (cp = s; *cp && *cp != '\0'; cp++)
                n--;
        *cp = 0;
        if (w) {
            w->next = newword(s);
            w = w->next;
        } else
            head = w = newword(s);
        s = cp+1;
    }
    if (!head)
        head = newword("");
    return head;
}
@

<<function exportenv>>=
/* as well as 01's, change blanks to nulls, so that rc will
 * treat the words as separate arguments
 */
void
exportenv(Envy *e)
{
    int f, n, hasvalue, first;
    Word *w;
    Symtab *sy;
    char nam[256];

    for(;e->name; e++){
        sy = symlook(e->name, S_VAR, 0);
        if (e->values == 0 || e->values->s == 0 || e->values->s[0] == 0)
            hasvalue = 0;
        else
            hasvalue = 1;
        if(sy == 0 && !hasvalue)	/* non-existant null symbol */
            continue;
        snprint(nam, sizeof nam, "/env/%s", e->name);
        if (sy != 0 && !hasvalue) {	/* Remove from environment */
                /* we could remove it from the symbol table
                 * too, but we're in the child copy, and it
                 * would still remain in the parent's table.
                 */
            remove(nam);
            delword(e->values);
            e->values = 0;		/* memory leak */
            continue;
        }
    
        f = create(nam, OWRITE, 0666L);
        if(f < 0) {
            fprint(STDERR, "can't create %s, f=%d\n", nam, f);
            perror(nam);
            continue;
        }
        first = 1;
        for (w = e->values; w; w = w->next) {
            n = strlen(w->s);
            if (n) {
                if(first)
                    first = 0;
                else{
                    if (write (f, "\0", 1) != 1)
                        perror(nam);
                }
                if (write(f, w->s, n) != n)
                    perror(nam);
            }
        }
        close(f);
    }
}
@

<<function waitfor>>=
int
waitfor(char *msg)
{
    Waitmsg *w;
    int pid;

    if((w=wait()) == nil)
        return -1;
    strecpy(msg, msg+ERRMAX, w->msg);
    pid = w->pid;
    free(w);
    return pid;
}
@

<<function expunge>>=
void
expunge(int pid, char *msg)
{
    postnote(PNPROC, pid, msg);
}
@

<<function execsh>>=
int
execsh(char *args, char *cmd, Bufblock *buf, Envy *e)
{
    char *p;
    int tot, n, pid, in[2], out[2];

    if(buf && pipe(out) < 0){
        perror("pipe");
        Exit();
    }
    pid = rfork(RFPROC|RFFDG|RFENVG);
    if(pid < 0){
        perror("mk rfork");
        Exit();
    }
    if(pid == 0){
        if(buf)
            close(out[0]);
        if(pipe(in) < 0){
            perror("pipe");
            Exit();
        }
        pid = fork();
        if(pid < 0){
            perror("mk fork");
            Exit();
        }
        if(pid != 0){
            dup(in[0], 0);
            if(buf){
                dup(out[1], 1);
                close(out[1]);
            }
            close(in[0]);
            close(in[1]);
            if (e)
                exportenv(e);
            if(shflags)
                execl(shell, shellname, shflags, args, nil);
            else
                execl(shell, shellname, args, nil);
            perror(shell);
            _exits("exec");
        }
        close(out[1]);
        close(in[0]);
        p = cmd+strlen(cmd);
        while(cmd < p){
            n = write(in[1], cmd, p-cmd);
            if(n < 0)
                break;
            cmd += n;
        }
        close(in[1]);
        _exits(0);
    }
    if(buf){
        close(out[1]);
        tot = 0;
        for(;;){
            if (buf->current >= buf->end)
                growbuf(buf);
            n = read(out[0], buf->current, buf->end-buf->current);
            if(n <= 0)
                break;
            buf->current += n;
            tot += n;
        }
        if (tot && buf->current[-1] == '\n')
            buf->current--;
        close(out[0]);
    }
    return pid;
}
@

<<function pipecmd>>=
int
pipecmd(char *cmd, Envy *e, int *fd)
{
    int pid, pfd[2];

    if(DEBUG(D_EXEC))
        fprint(1, "pipecmd='%s'\n", cmd);/**/

    if(fd && pipe(pfd) < 0){
        perror("pipe");
        Exit();
    }
    pid = rfork(RFPROC|RFFDG|RFENVG);
    if(pid < 0){
        perror("mk fork");
        Exit();
    }
    if(pid == 0){
        if(fd){
            close(pfd[0]);
            dup(pfd[1], 1);
            close(pfd[1]);
        }
        if(e)
            exportenv(e);
        if(shflags)
            execl(shell, shellname, shflags, "-c", cmd, nil);
        else
            execl(shell, shellname, "-c", cmd, nil);
        perror(shell);
        _exits("exec");
    }
    if(fd){
        close(pfd[1]);
        *fd = pfd[0];
    }
    return pid;
}
@




<<function rcopy>>=
void
rcopy(char **to, Resub *match, int n)
{
    int c;
    char *p;

    *to = match->sp;		/* stem0 matches complete target */
    for(to++, match++; --n > 0; to++, match++){
        if(match->sp && match->ep){
            p = match->ep;
            c = *p;
            *p = 0;
            *to = strdup(match->sp);
            *p = c;
        }
        else
            *to = 0;
    }
}
@




%-------------------------------------------------------------

<<mk/plan9.c>>=
#include	"mk.h"

<<global shell>>
<<global shellname>>

static	Word	*encodenulls(char*, int);

<<function readenv>>

<<function encodenulls>>

<<function exportenv>>

<<function waitfor>>

<<function expunge>>

<<function execsh>>

<<function pipecmd>>

<<function Exit>>

<<function notifyf>>

<<function catchnotes>>

<<function maketmp>>

<<function chgtime>>

<<function rcopy>>

<<function dirtime>>

<<function bulkmtime>>

<<function mkmtime>>

@


\subsection*{[[mk/archive.c]]}


%-------------------------------------------------------------

<<mk/archive.c>>=
#include	"mk.h"
#include	<ar.h>

static void atimes(char *);
static char *split(char*, char**);

<<function atimeof>>

<<function atouch>>

<<function atimes>>

<<function type>>

<<function split>>
@


\subsection*{[[mk/match.c]]}

%-------------------------------------------------------------

<<mk/match.c>>=
#include	"mk.h"

<<function match>>

<<function subst>>
@


\subsection*{[[mk/env.c]]}

%-------------------------------------------------------------

<<mk/env.c>>=
#include	"mk.h"

<<constant ENVQUANTA>>

<<global envy>>
<<global nextv>>

<<global myenv>>

<<function initenv>>

<<function envinsert>>

<<function envupd>>

<<function ecopy>>

<<function execinit>>

<<function buildenv>>
@


\subsection*{[[mk/parse.c]]}

%-------------------------------------------------------------

<<mk/parse.c>>=
#include	"mk.h"

<<global infile>>
<<global mkinline>>

void	ipop(void);
void	ipush(void);
static int   rhead(char *, Word **, Word **, int *, char **);
static char* rbody(Biobuf*);

<<function parse>>

<<function addrules>>

<<function rhead>>

<<function rbody>>

<<struct input>>
<<global inputs>>

<<function ipush>>

<<function ipop>>
@


\subsection*{[[mk/shprint.c]]}


<<function shprint>>=
void
shprint(char *s, Envy *env, Bufblock *buf)
{
    int n;
    Rune r;

    while(*s) {
        n = chartorune(&r, s);
        if (r == '$')
            s = vexpand(s, env, buf);
        else {
            rinsert(buf, r);
            s += n;
            s = copyq(s, r, buf);	/*handle quoted strings*/
        }
    }
    insert(buf, 0);
}
@
%$


<<function mygetenv>>=
static char*
mygetenv(char *name, Envy *env)
{
    if (!env)
        return nil;
    if (symlook(name, S_WESET, 0) == 0 && symlook(name, S_INTERNAL, 0) == 0)
        return nil;
        /* only resolve internal variables and variables we've set */
    for(; env->name; env++){
        if (strcmp(env->name, name) == 0)
            return wtos(env->values, ' ');
    }
    return nil;
}
@

<<function vexpand>>=
static char*
vexpand(char *w, Envy *env, Bufblock *buf)
{
    char *s, carry, *p, *q;

    assert(/*vexpand no $*/ *w == '$');
    p = w+1;	/* skip dollar sign */
    if(*p == '{') {
        p++;
        q = utfrune(p, '}');
        if (!q)
            q = strchr(p, 0);
    } else
        q = shname(p);
    carry = *q;
    *q = 0;
    s = mygetenv(p, env);
    *q = carry;
    if (carry == '}')
        q++;
    if (s) {
        bufcpy(buf, s, strlen(s));
        free(s);
    } else 		/* copy name intact*/
        bufcpy(buf, w, q-w);
    return q;
}
@

<<function front>>=
void
front(char *s)
{
    char *t, *q;
    int i, j;
    char *flds[512];

    q = strdup(s);
    i = getfields(q, flds, nelem(flds), 0, " \t\n");
    if(i > 5){
        flds[4] = flds[i-1];
        flds[3] = "...";
        i = 5;
    }
    t = s;
    for(j = 0; j < i; j++){
        for(s = flds[j]; *s; *t++ = *s++);
        *t++ = ' ';
    }
    *t = 0;
    free(q);
}
@


%-------------------------------------------------------------

<<mk/shprint.c>>=
#include	"mk.h"

static char *vexpand(char*, Envy*, Bufblock*);
static char *shquote(char*, Rune, Bufblock*);
static char *shbquote(char*, Bufblock*);

<<function shprint>>

<<function mygetenv>>

<<function vexpand>>

<<function front>>
@


\subsection*{[[mk/job.c]]}

%-------------------------------------------------------------

<<mk/job.c>>=
#include	"mk.h"

<<constructor newjob>>

<<dumper dumpj>>
@


\subsection*{[[mk/arc.c]]}


%-------------------------------------------------------------

<<mk/arc.c>>=
#include	"mk.h"

<<constructor newarc>>

<<dumper dumpa>>

<<function nrep>>
@


\subsection*{[[mk/rule.c]]}


%-------------------------------------------------------------



<<mk/rule.c>>=
#include	"mk.h"

<<global lr>>
<<global lmr>>

<<global nrules>>

static int rcmp(Rule *r, char *target, Word *tail);


<<function addrule>>

<<dumper dumpr>>

<<function rcmp>>

<<function rulecnt>>

<<function regerror>>
@


\subsection*{[[mk/lex.c]]}

%-------------------------------------------------------------

<<mk/lex.c>>=
#include	"mk.h"

static	int	bquote(Biobuf*, Bufblock*);

<<function assline>>

<<function bquote>>

<<function nextrune>>
@


\subsection*{[[mk/file.c]]}

%-------------------------------------------------------------

<<mk/file.c>>=
#include	"mk.h"

/* table-driven version in bootes dump of 12/31/96 */

<<function timeof>>

<<function touch>>

<<function delete>>

<<function timeinit>>
@


\subsection*{[[mk/run.c]]}

%-------------------------------------------------------------





<<mk/run.c>>=
#include	"mk.h"

typedef struct RunEvent RunEvent;
typedef struct Process Process;

int	nextslot(void);
int pidslot(int);
static void sched(void);
static void pnew(int, int);
static void pdelete(Process *);

<<struct RunEvent>>

<<global events>>
<<global nevents>>
<<global nrunning>>
<<global nproclimit>>

<<struct Process>>
<<global phead>>
<<global pfree>>

<<function run>>

<<function sched>>

<<function waitup>>

<<function nproc>>

<<function nextslot>>

<<function pidslot>>


<<function pnew>>

<<function pdelete>>

<<function killchildren>>

<<global tslot>>
<<global tick>>

<<function usage>>

<<function prusage>>
@

\subsection*{[[mk/graph.c]]}


%-------------------------------------------------------------

<<mk/graph.c>>=
#include	"mk.h"

static Node *applyrules(char *, char *);
static void togo(Node *);
static int vacuous(Node *);
static Node *newnode(char *);
static void trace(char *, Arc *);
static void cyclechk(Node *);
static void ambiguous(Node *);
static void attribute(Node *);

<<function graph>>

<<function applyrules>>

<<function togo>>

<<function vacuous>>

<<constructor newnode>>

<<dumper dumpn>>

<<function trace>>

<<function cyclechk>>

<<function ambiguous>>

<<function attribute>>
@


\subsection*{[[mk/mk.c]]}


%-------------------------------------------------------------

<<mk/mk.c>>=
#include	"mk.h"

void clrmade(Node*);
int	 work(Node*, Node*, Arc*);

<<global runerrs>>

<<function mk>>

<<function clrmade>>

<<function unpretend>>

<<function work>>

<<function update>>

<<function pcmp>>

<<function outofdate>>
@


\subsection*{[[mk/recipe.c]]}


%-------------------------------------------------------------

<<mk/recipe.c>>=
#include	"mk.h"

void	addw(Word*, char*);

<<function dorecipe>>

<<function addw>>
@


\subsection*{[[mk/varsub.c]]}


%-------------------------------------------------------------

<<mk/varsub.c>>=
#include	"mk.h"

static	Word		*subsub(Word*, char*, char*);
static	Word		*expandvar(char**);
static	Bufblock	*varname(char**);
static	Word		*extractpat(char*, char**, char*, char*);
static	int		submatch(char*, Word*, Word*, int*, char**);
static	Word		*varmatch(char *);

<<function varsub>>

<<function varname>>

<<function varmatch>>

<<function expandvar>>

<<function extractpat>>

<<function subsub>>

<<function submatch>>
@


\subsection*{[[mk/main.c]]}


%-------------------------------------------------------------

<<mk/main.c>>=
#include	"mk.h"

<<constant MKFILE>>

<<global version>>

// see also globals.c

<<global uflag>>

void badusage(void);

#ifdef	PROF
<<global buf>>
#endif

<<function main>>

<<function badusage>>
@
