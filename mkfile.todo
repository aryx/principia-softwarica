release:V:
	mk nuke
	rm -f /$objtype/lib/ape/*.a
	rm -f /$objtype/lib/*.a
	mk install
	mk clean

--------------------------------------------

all:V:

# safer to clean all the libs and binaries, you never know, you could
# get some no-up-to-date libs or binaries there
clean:V:
	rm -f 386/bin/*
	rm -f 386/lib/*
#once mk all and mk install works in ape/
#	rm -f 386/lib/ape/*


----------------------------------------------

</$objtype/mkfile

TARG=`{ls *.[cy] | sed '/\.tab\.c$/d;s/..$//'}
HFILES=/$objtype/include/u.h /sys/include/libc.h /sys/include/bio.h
BIN=/$objtype/bin
PROGS=${TARG:%=$O.%}
YFLAGS=-d


cpuobjtype=`{sed -n 's/^O=//p' /$cputype/mkfile}

#NOMK=awk|faces
#DIRS=`{ls -l | sed '/^d/!d; s/.* //; /^('$NOMK')$/d'}

TOP=../../..




none:VQ:
	echo usage: mk cmds, dirs, all, install, installall, '$O'.cmd, cmd.install, or cmd.installall

cmds:V:	$PROGS

dirs:V:
	for(i in $DIRS) @{
		cd $i
		echo DIR: cmd/$i
		mk $MKFLAGS all
	}

all:V:	$PROGS dirs

#PAD: put $LDFLAGS and have weird behavior => I've removed it
^([$OS])\.(.*):R:	\2.\1
	$stem1^l -o $target $stem2.$stem1

.*\.[$OS]:R:	$HFILES

(.*)\.([$OS])'$':R:	\1.c
	$stem2^c $CFLAGS $stem1.c

&:n:	$O.&
	mv $O.$stem $stem

%.tab.h %.tab.c:	%.y
	$YACC $YFLAGS -s $stem $prereq

%.install:V: $BIN/%

$cpuobjtype._cp:	/bin/cp
	cp $prereq $target

%.safeinstall:	$O.% $cpuobjtype._cp
	test -e $BIN/$stem && mv $BIN/$stem $BIN/_$stem
	$cpuobjtype._cp $O.$stem $BIN/$stem

%.safeinstallall:
	for(objtype in $CPUS)
		mk $stem.safeinstall
	mk $stem.clean

$BIN/%:	$O.% $cpuobjtype._cp
	$cpuobjtype._cp $O.$stem $BIN/$stem

%.directories:V:
	for(i in $DIRS) @{
		cd $i
		echo mk $i
		mk $MKFLAGS $stem
	}

clean:V:	cleanfiles clean.directories

nuke:V:		cleanfiles nuke.directories

directories:V:	install.directories

cleanfiles:V:
	rm -f [$OS].out *.[$OS] y.tab.? y.debug y.output [$OS].$TARG [$OS].units.tab $TARG bc.c bc.tab.h units.tab.h units.c [$OS]._cp

%.clean:V:
	rm -f [$OS].$stem $stem.[$OS]

install:V:
	test -e $cpuobjtype._cp || cp /bin/cp $cpuobjtype._cp
	mk $MKFLAGS $TARG.install
	mk $MKFLAGS directories

installall:V:
	for(objtype in $CPUS)
		mk $MKFLAGS install

%.installall:	%.c
	test -e $cpuobjtype._cp || cp /bin/cp $cpuobjtype._cp
	for (objtype in $CPUS) {
		rfork e
		mk $stem.install &
	}
	wait
	rm -f $stem.[$OS] y.tab.? $stem.tab.? y.debug y.output [$OS].$stem bc.c bc.tab.h units.c

%.acid: %.$O $HFILES
	$CC $CFLAGS -a $stem.c >$target

$BIN/init:	$O.init
	cp $prereq /$objtype/init

%.update:V:
	update $stem.c /386/bin/$stem

compilers:V:
	for(i in ?c)
		if(! ~ $i cc rc) @{
			cd $i
			mk clean
			objtype=$cputype mk install
			mk clean
		}
	for(i in ?c)
		if(! ~ $i cc rc) @{
			cd $i
			mk clean
			mk installall
			mk clean
		}


----------------------------------------------------------------
</$objtype/mkfile

#TODO: consolefs? depend? mouse? reboot? searchfs? statusbar
#LESS: mklatinkbd
TARG=\
	data2s\
    mouse\

#	reboot\

BIN=/$objtype/bin/aux

UPDATE=\
	mkfile\
	$HFILES\
	${OFILES:%.$O=%.c}\
	${TARG:%=%.c}\

</sys/src/cmd/mkmany

DIRS=vga\

all:V:	$DIRS

$DIRS:V:
	for (i in $DIRS) @{
		echo DIR: cmd/aux/$i
		cd $i
		mk all
	}

install:V:	installdirs

nuke:V:	nukedirs

installdirs:V:
	for (i in $DIRS) @{
		echo mk $i
		cd $i
		mk install
	}

clean:V:
	for (i in $DIRS) @{
		echo clean $i
		cd $i
		mk clean
	}
	rm -f [$OS].* *.[$OS]

nukedirs:V:
	for (i in $DIRS) @{
		echo nuke $i
		cd $i
		mk nuke
	}

update:V:
	update $UPDATEFLAGS $UPDATE
	for (i in $DIRS) @{
		echo update $i
		cd $i
		mk 'UPDATEFLAGS='$"UPDATEFLAGS update
	}

------------------------------------------------------------------------

trace:
	mk clean
	mk libs > make_trace.txt
	mk kernels >> make_trace.txt
	mk cmds >> make_trace.txt

# when files are moved by xmv, need to rerun that
# need to have run 'mk' in 9/pc before cos need autogenerated files
compile_commands:
	~/pfff/pfff_test -analyze_make_trace make_trace.txt > compile_commands.json

clangfiles:
#	~/pfff/pfff -gen_clang compile_commands.json
#	~/pfff/pfff_test.opt -uninclude_clang

-----------------------------------------------------------------------

all:
	make compile && make disk && make run

compile:
	mkdir -p ROOT/386/bin/ape/
	cp ROOT/386/bin/rc ROOT/386/bin/ape/sh

disk:

run:
	qemu-system-i386 -smp 4 -m 512 \
           -kernel sys/src/9/pc/9$(CONFIG) \
           -hda dosdisk.img \
#           -net nic,model=ne2k_pci -net user
#-fda ~/floppy.img
#-hda ~/plan9.raw.img
#-cdrom plan9.iso? does not work?
#-vga cirrus

clean:
	cd sys/src; mk clean
	cd sys/src/9/pc; mk clean
	cd ROOT; mk clean

clean_pfff:
	mv PFFF_* *.marshall *.opti layer* pfff.log .pfff/


###########################################

##############################################################################
# Developer rules
##############################################################################

# codemap.opt has some issue with light db and graph db loading :(
#-symlinks
visual:
	~/pfff/codemap.opt -screen_size 2 -no_legend -filter xix .
graph:
	~/pfff/codegraph -derived_data -lang c -build .
tags:
	~/pfff/codegraph -derived_data -lang c -build .
check:
	~/pfff/scheck -filter 3 -lang c .

loc:
	~/pfff/codemap.opt -screen_size 2 -no_legend -filter xix -test_loc .


#todo? add libc, lib_networking, lib_memlayer/lib_memdraw/lib_draw, libmp?
KERNELSRC=include/ kernel/ lib_core/libc/9syscall lib_graphics/
# just kernel, but with new graph_code_c!
graph_kernel:
	~/pfff/codegraph -derived_data -lang c -build $(KERNELSRC)
graph_kernel2:
	~/pfff/codegraph -derived_data -lang c -build include/ kernel/ lib_core/libc/9syscall
prolog_kernel:
	~/pfff/codequery -lang c -build $(KERNELSRC)
datalog_kernel:
	~/pfff/codequery -datalog -lang c -build $(KERNELSRC)
loc_kernel:
	~/pfff/codemap -filter cpp -test_loc kernel

WINDOWSRC=include/ lib_graphics/ windows/ kernel/devices/screen/
graph_windows:
	~/pfff/codegraph -derived_data -lang c -build $(WINDOWSRC)
graph_windows2:
	~/pfff/codegraph -derived_data -lang c -build include/ lib_graphics/ windows/

# you need also to adjust skip list sometimes!
ASSEMBLERSRC=include assemblers/aa/ assemblers/5a

##############################################################################
# Literate Programming rules
##############################################################################

NWDIRS=kernel windows shells \
       assemblers compilers linkers \
       builders debuggers profilers generators
#TODO: lib (libc, fmt, libthread, malloc, libregexp, libbio, libstring, ...)
#LATER: network/ security/

sync:
	set -e; for i in $(NWDIRS); do $(MAKE) -C $$i sync || exit 1; done 

# take care!
lpdistclean:
	set -e; for i in $(NWDIRS); do $(MAKE) -C $$i lpdistclean || exit 1; done 

visual2:
	~/pfff/codemap.opt -no_legend -symlinks -filter nw -ft 1.0 .


NOWEB=~/github/syncweb/scripts/noweblatex
pdf:
	$(NOWEB) Principia.nw > Principia.tex
	pdflatex Principia.tex
	bibtex Principia
	pdflatex Principia.tex

#	cp sys/src/9/pc/apbootstrap.h kernel/init/386/
#	cp sys/src/9/pc/init.h kernel/init/user/preboot
#	cp sys/src/9/pc/reboot.h kernel/init/386
#	cp sys/src/9/pc/$(CONFIG).c kernel/conf
#	cp sys/src/9/pc/$(CONFIG).rootc.c kernel/conf
#	mv sys/src/9/pc/*.clang2 kernel/conf

