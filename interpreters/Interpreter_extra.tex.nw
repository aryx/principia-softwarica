\section{[[s9/]]}

\subsection*{[[s9/s9.c]]}

%-------------------------------------------------------------


<<s9/s9.c>>=
/*
 * Scheme 9 from Empty Space
 * Copyright (C) 2007 Nils M Holm <nmh@t3x.org>
 *
 * Modified by pad to compile on plan9 mostly by backporting
 * code from s9 20140804.tgz
 */

/*
 * Use -DNO_SIGNALS to disable POSIX signal handlers.
 */

/*----- Miscellanea -----*/

<<global Debug_GC>>

<<constant VERSION>>

// Plan9 support backport!
#include <u.h>
#include <libc.h>
#include <stdio.h>
#include <ctype.h>
<<function exit>>


<<constant TEXT_LEN>>
<<constant MAX_PORTS>>
<<constant SEGMENT_LEN>>
<<constant HASH_THRESHOLD>>
<<constant MEMORY_LIMIT_KN>>

//#if INT_MAX >= 1000000000000000000		/* 64-bit */
// #define DIGITS_PER_WORD	18
// #define INT_SEG_LIMIT		1000000000000000000
//#elif INT_MAX >= 1000000000 			/* 32-bit */
<<constant DIGITS_PER_WORD>>
<<constant INT_SEG_LIMIT>>
//#elif INT_MAX >= 10000				/* 16-bit */
// #define DIGITS_PER_WORD	4
// #define INT_SEG_LIMIT		10000
//#endif

<<constant xxxlags>>
<<enum EVAL_STATES>>

<<function special_value_p>>
<<constant NIL>>
<<constant TRUE>>
<<constant FALSE>>
<<constant ENDOFFILE>>
<<constant UNDEFINED>>
<<constant UNSPECIFIC>>
<<constant DOT>>
<<constant RPAREN>>
<<constant NOEXPR>>

<<global Pool_size>>
<<global Vpool_size>>
<<global Car>>
<<global Cdr>>
<<global Tag>>
<<global Vectors>>
<<global Free_vecs>>
<<global Stack>>
<<global Stack_bottom>>
<<global State_stack>>
<<global Tmp_car>>
<<global Tmp_cdr>>
<<global Tmp>>
<<global Free_list>>
<<global Symbols>>
<<global Program>>
<<global Environment>>
<<global Acc>>
<<global Ports>>
<<global Port_flags>>
<<global Input_port>>
<<global Output_port>>
<<global Level>>
<<global Error_flag>>
<<global Load_level>>
<<global Displaying>>
<<global Quiet_mode>>
<<global S_xxx>>
<<global GC_root>>

void mark(int n);
int error(char *msg, int expr);
void print2(int n);
int read_form(void);
void print2(int n);
int bignum_add(int a, int b);
int bignum_subtract(int a, int b);
int pp_write(int x);
int eval(int x);
int _eval(int x);



<<function nl>>
<<function reject>>
<<function string>>
<<function string_len>>
<<function vector_size>>
<<function vector>>
<<function vector_len>>
<<function port_no>>
<<function char_value>>

<<function caar>>
<<function cadr>>
<<function cdar>>
<<function cddr>>
<<function caaar>>
<<function caadr>>
<<function cadar>>
<<function caddr>>
<<function cdadr>>
<<function cddar>>
<<function cdddr>>
<<function caaddr>>
<<function caddar>>
<<function cadadr>>
<<function cadddr>>
<<function cdddar>>
<<function cddddr>>

<<function null_p>>
<<function eof_p>>
<<function undefined_p>>
<<function unspecific_p>>

<<function boolean_p>>

<<function integer_p>>
<<function primitive_p>>
<<function procedure_p>>
<<function special_p>>
<<function char_p>>
<<function syntax_p>>
<<function input_port_p>>
<<function output_port_p>>

<<function symbol_p>>
<<function vector_p>>
<<function string_p>>

<<function auto_quoting_p>>

<<function rib_args>>
<<function rib_append>>
<<function rib_result>>
<<function rib_source>>

<<function atom_p>>

<<function pair_p>>

<<function pr>>

<<function error>>

<<function fatal>>

/*----- GC -----*/

<<function new_segment>>

<<function mark_vector>>

<<function mark>>

<<function unmark_vectors>>

<<function gc>>

<<function alloc3>>

<<function alloc>>

<<function gcv>>

<<function allocv>>

<<function save>>

<<function unsave>>

/*----- Reader -----*/

<<function find_symbol>>

<<function make_symbol>>

<<function add_symbol>>

<<function read_c>>

<<function read_c_ci>>

<<function read_list>>

<<function quote>>

<<function str_numeric_p>>

<<function string_to_bignum>>

<<function make_char>>

<<function character>>

<<function make_string>>

<<function clone_string>>

<<function string_literal>>

<<function unreadable>>

<<function separator>>

<<function symbol_or_number>>

<<function nested_comment>>

<<function list_to_vector>>

<<function read_vector>>

<<function read_form>>

<<function xread>>

/*----- Printer -----*/

<<function print_integer>>

<<function print_quoted>>

<<function print_procedure>>

<<function print_char>>

<<function print_string>>

<<function print_symbol>>

<<function print_primitive>>

<<function print_syntax>>

<<function print_vector>>

<<function print_port>>

<<function print2>>

/*----- Miscellanea -----*/

<<function length>>

<<function appendb>>

<<function flat_copy>>

<<function argument_list_p>>

<<function list_of_symbols_p>>

<<function rehash>>

<<function extend>>

<<function make_env>>

<<global hash stats>>

<<function try_hash>>

/*----- Evaluator -----*/

<<function lookup>>

<<function location_of>>

<<function value_of>>

/*----- Specials -----*/

<<function too_few_args>>

<<function too_many_args>>

<<function make_sequence>>

<<function sf_and>>

<<function sf_begin>>

<<function sf_cond>>

<<function sf_if>>

<<function make_temporaries>>

<<function make_assignments>>

<<function make_undefineds>>

<<function make_recursive_lambda>>

<<constant VARS>>
<<constant ARGS>>

<<function extract_from_let>>

<<function extract_from_defines>>

<<function resolve_local_defines>>

<<function sf_lambda>>

<<function sf_let>>

<<function sf_letrec>>

<<function sf_quote>>

<<function sf_or>>

<<function sf_set_b>>

<<function find_local_variable>>

<<function sf_define>>

<<function sf_define_syntax>>

<<function sf_syntax_rules>>

/*----- Bignums -----*/

<<function make_integer>>

<<function integer_value>>

<<function bignum_abs>>

<<function bignum_negate>>

<<function bignum_negative_p>>

<<function bignum_zero_p>>

<<function reverse_segments>>

<<function _bignum_add>>

<<function bignum_add>>

<<function bignum_less_p>>

<<function bignum_equal_p>>

<<function _bignum_subtract>>

<<function bignum_subtract>>

<<function bignum_shift_left>>

<<function bignum_shift_right>>

<<function bignum_multiply>>

<<function bignum_equalize>>

<<function _bignum_divide>>

<<function bignum_divide>>

/*----- Primitives -----*/

<<function pp_apply>>

<<function pp_boolean_p>>

<<function pp_car>>

<<function pp_cdr>>

<<function pp_char_p>>

<<function pp_char_to_integer>>

<<function pp_char_alphabetic_p>>

<<function L>>
<<function char_ci_le>>
<<function char_ci_lt>>
<<function char_ci_eq>>
<<function char_ci_ge>>
<<function char_ci_gt>>

<<function char_le>>
<<function char_lt>>
<<function char_eq>>
<<function char_ge>>
<<function char_gt>>

<<function char_predicate>>

//#define R return

<<function pp_char_ci_le_p>>
<<function pp_char_ci_lt_p>>
<<function pp_char_ci_eq_p>>
<<function pp_char_ci_ge_p>>
<<function pp_char_ci_gt_p>>

<<function pp_char_le_p>>
<<function pp_char_lt_p>>
<<function pp_char_eq_p>>
<<function pp_char_ge_p>>
<<function pp_char_gt_p>>

<<function pp_char_downcase>>

<<function pp_char_lower_case_p>>

<<function pp_char_numeric_p>>

<<function pp_char_upcase>>

<<function pp_char_upper_case_p>>

<<function pp_char_whitespace_p>>

<<function close_port>>

<<function pp_close_input_port>>

<<function pp_close_output_port>>

<<function pp_cons>>

<<function make_port>>

<<function pp_current_input_port>>

<<function pp_current_output_port>>

<<function pp_display>>

<<function pp_eof_object_p>>

<<function pp_eq_p>>

<<function pp_equal>>

<<function pp_greater>>

<<function pp_greater_equal>>

<<function pp_input_port_p>>

<<function pp_integer_to_char>>

<<function pp_integer_p>>

<<function pp_less>>

<<function pp_less_equal>>

<<function pp_list_to_string>>

<<function pp_list_to_vector>>

<<function open_port>>

<<function load>>

<<function pp_load>>

<<function pp_make_string>>

<<function pp_make_vector>>

<<function pp_minus>>

<<function pp_open_input_file>>

<<function pp_open_output_file>>

<<function pp_output_port_p>>

<<function pp_pair_p>>

<<function pp_plus>>

<<function pp_procedure_p>>

<<function pp_quotient>>

<<function pp_read>>

<<function read_char>>

<<function pp_peek_char>>

<<function pp_read_char>>

<<function pp_remainder>>

<<function pp_set_car_b>>

<<function pp_set_cdr_b>>

<<function pp_set_input_port_b>>

<<function pp_set_output_port_b>>

<<function pp_string_to_list>>

<<function pp_string_to_symbol>>


<<function pp_string_append>>

<<function pp_string_copy>>

<<function pp_string_fill_b>>

<<function pp_substring>>

<<function pp_string_length>>

<<function pp_string_ref>>

<<function pp_string_set_b>>

<<function strcmp_ci>>

<<function string_ci_le>>
<<function string_ci_lt>>
<<function string_ci_eq>>
<<function string_ci_ge>>
<<function string_ci_gt>>

<<function string_le>>
<<function string_lt>>
<<function string_eq>>
<<function string_ge>>
<<function string_gt>>

<<function string_predicate>>

<<function pp_string_ci_le_p>>
<<function pp_string_ci_lt_p>>
<<function pp_string_ci_eq_p>>
<<function pp_string_ci_ge_p>>
<<function pp_string_ci_gt_p>>

<<function pp_string_le_p>>
<<function pp_string_lt_p>>
<<function pp_string_eq_p>>
<<function pp_string_ge_p>>
<<function pp_string_gt_p>>

<<function pp_string_p>>

<<function pp_symbol_to_string>>

<<function pp_symbol_p>>

<<function pp_syntax_to_list>>

<<function pp_times>>

<<function pp_unquote>>

<<function pp_unquote_splicing>>

<<function pp_vector_to_list>>

<<function pp_vector_fill_b>>

<<function pp_vector_length>>

<<function pp_vector_ref>>

<<function pp_vector_set_b>>

<<function pp_vector_p>>

<<function pp_write>>

<<function pp_write_char>>

<<function pp_wrong>>

/*----- Evaluator -----*/

<<enum TYPES>>

<<struct Primitive_procedure>>

<<enum PRIMITIVES>>

<<global Primitives>>

<<function expected>>

<<function primitive>>

<<function make_application>>

<<function has_property_p>>

<<function syntactic_symbol_p>>

<<function quasiquotation_p>>

<<function uses_transformer_p>>

<<function uses_quasiquote_p>>

<<function expand_qq>>

<<function expand_quasiquote>>

<<function expand_all_syntax>>

<<function expand_syntax>>

<<function save_state>>

<<function restore_state>>

<<function bind_arguments>>

<<function tail_call>>

<<function apply_special>>

<<function make_dynamic>>

<<function _eval>>

<<function eval>>

/*----- REPL -----*/

<<function clear_local_envs>>

//#ifndef NO_SIGNALS
//void keyboard_interrupt(int sig) {
//	error("interrupted", NOEXPR);
//	signal(SIGINT, keyboard_interrupt);
//}
//
//void keyboard_quit(int sig) {
//	fatal("received quit signal, exiting");
//}
//#endif

<<function repl>>

/*----- Miscellanea -----*/

<<function make_primitive>>

<<function add_primitive>>

<<function make_initial_env>>

<<function init>>

<<function load_library>>

<<function load_rc>>

<<function usage>>

<<function main>>
@
