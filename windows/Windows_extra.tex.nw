\section{[[include/]]}

\subsection*{[[include/complete.h]]}

<<struct Completion>>=
struct Completion{
    uchar advance;		/* whether forward progress has been made */
    uchar complete;	/* whether the completion now represents a file or directory */
    char *string;		/* the string to advance, suffixed " " or "/" for file or directory */
    int nmatch;		/* number of files that matched */
    int nfile;			/* number of files returned */
    char **filename;	/* their names */
};
@


%-------------------------------------------------------------

<<include/complete.h>>=
#pragma	lib	"libcomplete.a"
#pragma src "/sys/src/libcomplete"

typedef struct Completion Completion;

<<struct Completion>>

Completion* complete(char *dir, char *s);
void freecompletion(Completion*);
@

\subsection*{[[include/frame.h]]}


<<function NRUNE>>=
#define	NRUNE(b)	((b)->nrune<0? 1 : (b)->nrune)
@

<<function NBYTE>>=
#define	NBYTE(b)	strlen((char*)(b)->ptr)
@


%-------------------------------------------------------------

<<include/frame.h>>=
#pragma	src	"/sys/src/libframe"
#pragma	lib	"libframe.a"

typedef struct Frbox Frbox;
typedef struct Frame Frame;

<<enum _anon_ (include/frame.h)>>

<<constant FRTICKW>>

<<struct Frbox>>

<<struct Frame>>

ulong	frcharofpt(Frame*, Point);
Point	frptofchar(Frame*, ulong);
int	frdelete(Frame*, ulong, ulong);
void	frinsert(Frame*, Rune*, Rune*, ulong);
void	frselect(Frame*, Mousectl*);
void	frselectpaint(Frame*, Point, Point, Image*);
void	frdrawsel(Frame*, Point, ulong, ulong, int);
Point frdrawsel0(Frame*, Point, ulong, ulong, Image*, Image*);
void	frinit(Frame*, Rectangle, Font*, Image*, Image**);
void	frsetrects(Frame*, Rectangle, Image*);
void	frclear(Frame*, int);

uchar	*_frallocstr(Frame*, unsigned);
void	_frinsure(Frame*, int, unsigned);
Point	_frdraw(Frame*, Point);
void	_frgrowbox(Frame*, int);
void	_frfreebox(Frame*, int, int);
void	_frmergebox(Frame*, int);
void	_frdelbox(Frame*, int, int);
void	_frsplitbox(Frame*, int, int);
int	_frfindbox(Frame*, int, ulong, ulong);
void	_frclosebox(Frame*, int, int);
int	_frcanfit(Frame*, Point, Frbox*);
void	_frcklinewrap(Frame*, Point*, Frbox*);
void	_frcklinewrap0(Frame*, Point*, Frbox*);
void	_fradvance(Frame*, Point*, Frbox*);
int	_frnewwid(Frame*, Point, Frbox*);
int	_frnewwid0(Frame*, Point, Frbox*);
void	_frclean(Frame*, Point, int, int);
void	_frdrawtext(Frame*, Point, Image*, Image*);
void	_fraddbox(Frame*, int, int);
Point	_frptofcharptb(Frame*, ulong, Point, int);
Point	_frptofcharnb(Frame*, ulong, int);
int	_frstrlen(Frame*, int);
void	frtick(Frame*, Point, int);
void	frinittick(Frame*);
void	frredraw(Frame*);

<<function NRUNE>>
<<function NBYTE>>
@


\subsection*{[[include/plumb.h]]}

<<struct Plumbmsg>>=
struct Plumbmsg
{
    char		*src;
    char		*dst;
    char		*wdir;
    char		*type;
    Plumbattr	*attr;
    int		ndata;
    char		*data;
};
@

<<struct Plumbattr>>=
struct Plumbattr
{
    char		*name;
    char		*value;
    Plumbattr	*next;
};
@


%-------------------------------------------------------------

<<include/plumb.h>>=
#pragma	lib	"libplumb.a"
#pragma	src	"/sys/src/libplumb"

/*
 * Message format:
 *	source application\n
 *	destination port\n
 *	working directory\n
 *	type\n
 *	attributes\n
 *	nbytes\n
 *	n bytes of data
 */

typedef struct Plumbattr Plumbattr;
typedef struct Plumbmsg Plumbmsg;

<<struct Plumbmsg>>

<<struct Plumbattr>>

int			plumbsend(int, Plumbmsg*);
int			plumbsendtext(int, char*, char*, char*, char*);
Plumbmsg*	plumbrecv(int);
char*		plumbpack(Plumbmsg*, int*);
Plumbmsg*	plumbunpack(char*, int);
Plumbmsg*	plumbunpackpartial(char*, int, int*);
char*		plumbpackattr(Plumbattr*);
Plumbattr*	plumbunpackattr(char*);
Plumbattr*	plumbaddattr(Plumbattr*, Plumbattr*);
Plumbattr*	plumbdelattr(Plumbattr*, char*);
void			plumbfree(Plumbmsg*);
char*		plumblookup(Plumbattr*, char*);
int			plumbopen(char*, int);
int			eplumb(int, char*);
@


\section{[[windows/rio/]]}

\subsection*{[[windows/rio/globals.c]]}

<<windows/rio/globals.c>>=
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <thread.h>
#include <cursor.h>
#include <mouse.h>
#include <keyboard.h>
#include <frame.h>
#include <fcall.h>

#include "dat.h"
#include "fns.h"

<<global font>>
<<global mousectl>>
<<global mouse>>
<<global keyboardctl>>
<<global display>>
<<global view>>
<<global wscreen>>
<<global background>>
<<global lightgrey>>
<<global red>>
<<global window>>
<<global wkeyboard>>
<<global nwindow>>
<<global snarffd>>
<<global input>>
<<global all>>
<<global filsys>>
<<global hidden>>
<<global nhidden>>
<<global nsnarf>>
<<global snarf>>
<<global scrolling>>
<<global maxtab>>
<<global deletechan>>
<<global startdir>>
<<global sweeping>>
<<global wctlfd>>
<<global menuing>>
<<global snarfversion>>
<<global errorshouldabort>>
<<global winclosechan>>
<<global messagesize>>
@

\subsection*{[[windows/rio/dat.h]]}

<<enum _anon_ (windows/rio/dat.h)>>=
enum
{
    Qdir,			/* /dev for this window */
    Qcons,
    Qconsctl,
    Qcursor,
    Qwdir,
    Qwinid,
    Qwinname,
    Qkbdin,
    Qlabel,
    Qmouse,
    Qnew,
    Qscreen,
    Qsnarf,
    Qtext,
    Qwctl,
    Qwindow,
    Qwsys,		/* directory of window directories */
    Qwsysdir,		/* window directory, child of wsys */

    QMAX,
};
@

<<enum _anon_ (windows/rio/dat.h)2>>=
enum
{
    Kscrolloneup = KF|0x20,
    Kscrollonedown = KF|0x21,
};
@

<<constant STACK>>=
#define	STACK	8192
@

<<enum _anon_ (windows/rio/dat.h)3>>=
enum
{
    Selborder		= 4,		/* border of selected window */
    Unselborder	= 1,		/* border of unselected window */
    Scrollwid 		= 12,		/* width of scroll bar */
    Scrollgap 		= 4,		/* gap right of scroll bar */
    BIG			= 3,		/* factor by which window dimension can exceed screen */
};
@

<<enum _anon_ (windows/rio/dat.h)4>>=
enum
{
    TRUE		= 1,
    FALSE		= 0,
};
@

<<function QID>>=
#define	QID(w,q)	((w<<8)|(q))
@

<<function WIN>>=
#define	WIN(q)	((((ulong)(q).path)>>8) & 0xFFFFFF)
@

<<function FILE>>=
#define	FILE(q)	(((ulong)(q).path) & 0xFF)
@

<<enum _anon_ (windows/rio/dat.h)5>>=
enum	/* control messages */
{
    Wakeup,
    Reshaped,
    Moved,
    Refresh,
    Movemouse,
    Rawon,
    Rawoff,
    Holdon,
    Holdoff,
    Deleted,
    Exited,
};
@

<<struct Wctlmesg>>=
struct Wctlmesg
{
    int		type;
    Rectangle	r;
    Image	*image;
};
@

<<struct Conswritemesg>>=
struct Conswritemesg
{
    Channel	*cw;		/* chan(Stringpair) */
};
@

<<struct Consreadmesg>>=
struct Consreadmesg
{
    Channel	*c1;		/* chan(tuple(char*, int) == Stringpair) */
    Channel	*c2;		/* chan(tuple(char*, int) == Stringpair) */
};
@

<<struct Mousereadmesg>>=
struct Mousereadmesg
{
    Channel	*cm;		/* chan(Mouse) */
};
@

<<struct Stringpair>>=
struct Stringpair	/* rune and nrune or byte and nbyte */
{
    void		*s;
    int		ns;
};
@

<<struct Mousestate>>=
struct Mousestate
{
    Mouse;
    ulong	counter;	/* serial no. of mouse event */
};
@

<<struct Mouseinfo>>=
struct Mouseinfo
{
    Mousestate	queue[16];
    int	ri;	/* read index into queue */
    int	wi;	/* write index */
    ulong	counter;	/* serial no. of last mouse event we received */
    ulong	lastcounter;	/* serial no. of last mouse event sent to client */
    int	lastb;	/* last button state we received */
    uchar	qfull;	/* filled the queue; no more recording until client comes back */	
};	
@


<<struct Dirtab>>=
struct Dirtab
{
    char		*name;
    uchar	type;
    uint		qid;
    uint		perm;
};
@





<<struct Timer>>=
struct Timer
{
    int		dt;
    int		cancel;
    Channel	*c;	/* chan(int) */
    Timer	*next;
};
@


%-------------------------------------------------------------

<<windows/rio/dat.h>>=
<<enum _anon_ (windows/rio/dat.h)>>

<<enum _anon_ (windows/rio/dat.h)2>>

<<constant STACK>>

typedef	struct	Consreadmesg Consreadmesg;
typedef	struct	Conswritemesg Conswritemesg;
typedef	struct	Stringpair Stringpair;
typedef	struct	Dirtab Dirtab;
typedef	struct	FidRio Fid;
typedef	struct	Filsys Filsys;
typedef	struct	Mouseinfo	Mouseinfo;
typedef	struct	Mousereadmesg Mousereadmesg;
typedef	struct	Mousestate	Mousestate;
typedef	struct	Ref Ref;
typedef	struct	Timer Timer;
typedef	struct	Wctlmesg Wctlmesg;
typedef	struct	Window Window;
typedef	struct	Xfid Xfid;

<<enum _anon_ (windows/rio/dat.h)3>>

<<enum _anon_ (windows/rio/dat.h)4>>

<<function QID>>
<<function WIN>>
<<function FILE>>

<<enum _anon_ (windows/rio/dat.h)5>>

<<struct Wctlmesg>>

<<struct Conswritemesg>>

<<struct Consreadmesg>>

<<struct Mousereadmesg>>

<<struct Stringpair>>

<<struct Mousestate>>

<<struct Mouseinfo>>

<<struct Window>>

<<struct Dirtab>>

<<struct FidRio>>

<<struct Xfid>>


<<constant Nhash>>

<<struct Filsys>>


<<struct Timer>>

extern Font		*font;
extern Mousectl	*mousectl;
extern Mouse	*mouse;
extern Keyboardctl	*keyboardctl;
extern Display	*display;
extern Image	*view;
extern Screen	*wscreen;
extern Cursor	boxcursor;
extern Cursor	crosscursor;
extern Cursor	sightcursor;
extern Cursor	whitearrow;
extern Cursor	query;
extern Cursor	*corners[9];
extern Image	*background;
//extern Image	*lightgrey;
extern Image	*red;
extern Window	**window;
extern Window	*wkeyboard;	/* window of simulated keyboard */
extern int		nwindow;
extern int		snarffd;
extern Window	*input;
extern QLock	all;			/* BUG */
extern Filsys	*filsys;
extern Window	*hidden[100];
extern int		nhidden;
extern int		nsnarf;
extern Rune*	snarf;
extern int		scrolling;
extern int		maxtab;
extern Channel*	winclosechan;
extern Channel*	deletechan;
extern char		*startdir;
extern int		sweeping;
extern int		wctlfd;
extern int		errorshouldabort;
extern int		menuing;
extern int		snarfversion;	/* updated each time it is written */
extern int		messagesize; 		/* negotiated in 9P version setup */

@


\subsection*{[[windows/rio/data.c]]}

<<global crosscursor (windows/rio/data.c)>>=
Cursor crosscursor = {
    {-7, -7},
    {0x03, 0xC0, 0x03, 0xC0, 0x03, 0xC0, 0x03, 0xC0,
     0x03, 0xC0, 0x03, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF,
     0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0xC0, 0x03, 0xC0,
     0x03, 0xC0, 0x03, 0xC0, 0x03, 0xC0, 0x03, 0xC0, },
    {0x00, 0x00, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80,
     0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x7F, 0xFE,
     0x7F, 0xFE, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80,
     0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x00, 0x00, }
};
@

<<global boxcursor (windows/rio/data.c)>>=
Cursor boxcursor = {
    {-7, -7},
    {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
     0xFF, 0xFF, 0xF8, 0x1F, 0xF8, 0x1F, 0xF8, 0x1F,
     0xF8, 0x1F, 0xF8, 0x1F, 0xF8, 0x1F, 0xFF, 0xFF,
     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, },
    {0x00, 0x00, 0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE,
     0x70, 0x0E, 0x70, 0x0E, 0x70, 0x0E, 0x70, 0x0E,
     0x70, 0x0E, 0x70, 0x0E, 0x70, 0x0E, 0x70, 0x0E,
     0x7F, 0xFE, 0x7F, 0xFE, 0x7F, 0xFE, 0x00, 0x00, }
};
@

<<global sightcursor (windows/rio/data.c)>>=
Cursor sightcursor = {
    {-7, -7},
    {0x1F, 0xF8, 0x3F, 0xFC, 0x7F, 0xFE, 0xFB, 0xDF,
     0xF3, 0xCF, 0xE3, 0xC7, 0xFF, 0xFF, 0xFF, 0xFF,
     0xFF, 0xFF, 0xFF, 0xFF, 0xE3, 0xC7, 0xF3, 0xCF,
     0x7B, 0xDF, 0x7F, 0xFE, 0x3F, 0xFC, 0x1F, 0xF8, },
    {0x00, 0x00, 0x0F, 0xF0, 0x31, 0x8C, 0x21, 0x84,
     0x41, 0x82, 0x41, 0x82, 0x41, 0x82, 0x7F, 0xFE,
     0x7F, 0xFE, 0x41, 0x82, 0x41, 0x82, 0x41, 0x82,
     0x21, 0x84, 0x31, 0x8C, 0x0F, 0xF0, 0x00, 0x00, }
};
@

<<global whitearrow (windows/rio/data.c)>>=
Cursor whitearrow = {
    {0, 0},
    {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFC, 
     0xFF, 0xF0, 0xFF, 0xF0, 0xFF, 0xF8, 0xFF, 0xFC, 
     0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFC, 
     0xF3, 0xF8, 0xF1, 0xF0, 0xE0, 0xE0, 0xC0, 0x40, },
    {0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x06, 0xC0, 0x1C, 
     0xC0, 0x30, 0xC0, 0x30, 0xC0, 0x38, 0xC0, 0x1C, 
     0xC0, 0x0E, 0xC0, 0x07, 0xCE, 0x0E, 0xDF, 0x1C, 
     0xD3, 0xB8, 0xF1, 0xF0, 0xE0, 0xE0, 0xC0, 0x40, }
};
@

<<global query (windows/rio/data.c)>>=
Cursor query = {
    {-7,-7},
    {0x0f, 0xf0, 0x1f, 0xf8, 0x3f, 0xfc, 0x7f, 0xfe, 
     0x7c, 0x7e, 0x78, 0x7e, 0x00, 0xfc, 0x01, 0xf8, 
     0x03, 0xf0, 0x07, 0xe0, 0x07, 0xc0, 0x07, 0xc0, 
     0x07, 0xc0, 0x07, 0xc0, 0x07, 0xc0, 0x07, 0xc0, },
    {0x00, 0x00, 0x0f, 0xf0, 0x1f, 0xf8, 0x3c, 0x3c, 
     0x38, 0x1c, 0x00, 0x3c, 0x00, 0x78, 0x00, 0xf0, 
     0x01, 0xe0, 0x03, 0xc0, 0x03, 0x80, 0x03, 0x80, 
     0x00, 0x00, 0x03, 0x80, 0x03, 0x80, 0x00, 0x00, }
};
@

<<global tl>>=
Cursor tl = {
    {-4, -4},
    {0xfe, 0x00, 0x82, 0x00, 0x8c, 0x00, 0x87, 0xff, 
     0xa0, 0x01, 0xb0, 0x01, 0xd0, 0x01, 0x11, 0xff, 
     0x11, 0x00, 0x11, 0x00, 0x11, 0x00, 0x11, 0x00, 
     0x11, 0x00, 0x11, 0x00, 0x11, 0x00, 0x1f, 0x00, },
    {0x00, 0x00, 0x7c, 0x00, 0x70, 0x00, 0x78, 0x00, 
     0x5f, 0xfe, 0x4f, 0xfe, 0x0f, 0xfe, 0x0e, 0x00, 
     0x0e, 0x00, 0x0e, 0x00, 0x0e, 0x00, 0x0e, 0x00, 
     0x0e, 0x00, 0x0e, 0x00, 0x0e, 0x00, 0x00, 0x00, }
};
@

<<global t>>=
static Cursor t = {
    {-7, -8},
    {0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x06, 0xc0, 
     0x1c, 0x70, 0x10, 0x10, 0x0c, 0x60, 0xfc, 0x7f, 
     0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0xff, 0xff, 
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, },
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 
     0x03, 0x80, 0x0f, 0xe0, 0x03, 0x80, 0x03, 0x80, 
     0x7f, 0xfe, 0x7f, 0xfe, 0x7f, 0xfe, 0x00, 0x00, 
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }
};
@

<<global tr>>=
Cursor tr = {
    {-11, -4},
    {0x00, 0x7f, 0x00, 0x41, 0x00, 0x31, 0xff, 0xe1, 
     0x80, 0x05, 0x80, 0x0d, 0x80, 0x0b, 0xff, 0x88, 
     0x00, 0x88, 0x0, 0x88, 0x00, 0x88, 0x00, 0x88, 
     0x00, 0x88, 0x00, 0x88, 0x00, 0x88, 0x00, 0xf8, },
    {0x00, 0x00, 0x00, 0x3e, 0x00, 0x0e, 0x00, 0x1e, 
     0x7f, 0xfa, 0x7f, 0xf2, 0x7f, 0xf0, 0x00, 0x70, 
     0x00, 0x70, 0x00, 0x70, 0x00, 0x70, 0x00, 0x70, 
     0x00, 0x70, 0x00, 0x70, 0x00, 0x70, 0x00, 0x00, }
};
@

<<global r>>=
Cursor r = {
    {-8, -7},
    {0x07, 0xc0, 0x04, 0x40, 0x04, 0x40, 0x04, 0x58, 
     0x04, 0x68, 0x04, 0x6c, 0x04, 0x06, 0x04, 0x02, 
     0x04, 0x06, 0x04, 0x6c, 0x04, 0x68, 0x04, 0x58, 
     0x04, 0x40, 0x04, 0x40, 0x04, 0x40, 0x07, 0xc0, },
    {0x00, 0x00, 0x03, 0x80, 0x03, 0x80, 0x03, 0x80, 
     0x03, 0x90, 0x03, 0x90, 0x03, 0xf8, 0x03, 0xfc, 
     0x03, 0xf8, 0x03, 0x90, 0x03, 0x90, 0x03, 0x80, 
     0x03, 0x80, 0x03, 0x80, 0x03, 0x80, 0x00, 0x00, }
};
@

<<global br>>=
Cursor br = {
    {-11, -11},
    {0x00, 0xf8, 0x00, 0x88, 0x00, 0x88, 0x00, 0x88, 
     0x00, 0x88, 0x00, 0x88, 0x00, 0x88, 0x00, 0x88, 
     0xff, 0x88, 0x80, 0x0b, 0x80, 0x0d, 0x80, 0x05, 
     0xff, 0xe1, 0x00, 0x31, 0x00, 0x41, 0x00, 0x7f, },
    {0x00, 0x00, 0x00, 0x70, 0x00, 0x70, 0x00, 0x70, 
     0x0, 0x70, 0x00, 0x70, 0x00, 0x70, 0x00, 0x70, 
     0x00, 0x70, 0x7f, 0xf0, 0x7f, 0xf2, 0x7f, 0xfa, 
     0x00, 0x1e, 0x00, 0x0e, 0x00, 0x3e, 0x00, 0x00, }
};
@

<<global b>>=
Cursor b = {
    {-7, -7},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
     0xff, 0xff, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 
     0xfc, 0x7f, 0x0c, 0x60, 0x10, 0x10, 0x1c, 0x70, 
     0x06, 0xc0, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, },
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
     0x00, 0x00, 0x7f, 0xfe, 0x7f, 0xfe, 0x7f, 0xfe, 
     0x03, 0x80, 0x03, 0x80, 0x0f, 0xe0, 0x03, 0x80, 
     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, }
};
@

<<global bl>>=
Cursor bl = {
    {-4, -11},
    {0x1f, 0x00, 0x11, 0x00, 0x11, 0x00, 0x11, 0x00, 
     0x11, 0x00, 0x11, 0x00, 0x11, 0x00, 0x11, 0x00, 
     0x11, 0xff, 0xd0, 0x01, 0xb0, 0x01, 0xa0, 0x01, 
     0x87, 0xff, 0x8c, 0x00, 0x82, 0x00, 0xfe, 0x00, },
    {0x00, 0x00, 0x0e, 0x00, 0x0e, 0x00, 0x0e, 0x00, 
     0x0e, 0x00, 0x0e, 0x00, 0x0e, 0x00, 0x0e, 0x00, 
     0x0e, 0x00, 0x0f, 0xfe, 0x4f, 0xfe, 0x5f, 0xfe, 
     0x78, 0x00, 0x70, 0x00, 0x7c, 0x00, 0x00, 0x0, }
};
@

<<global l>>=
Cursor l = {
    {-7, -7},
    {0x03, 0xe0, 0x02, 0x20, 0x02, 0x20, 0x1a, 0x20, 
     0x16, 0x20, 0x36, 0x20, 0x60, 0x20, 0x40, 0x20, 
     0x60, 0x20, 0x36, 0x20, 0x16, 0x20, 0x1a, 0x20, 
     0x02, 0x20, 0x02, 0x20, 0x02, 0x20, 0x03, 0xe0, },
    {0x00, 0x00, 0x01, 0xc0, 0x01, 0xc0, 0x01, 0xc0, 
     0x09, 0xc0, 0x09, 0xc0, 0x1f, 0xc0, 0x3f, 0xc0, 
     0x1f, 0xc0, 0x09, 0xc0, 0x09, 0xc0, 0x01, 0xc0, 
     0x01, 0xc0, 0x01, 0xc0, 0x01, 0xc0, 0x00, 0x00, }
};
@

<<global corners (windows/rio/data.c)>>=
Cursor *corners[9] = {
    &tl,	&t,	&tr,
    &l,	nil,	&r,
    &bl,	&b,	&br,
};
@

<<function iconinit>>=
void
iconinit(void)
{
    background = allocimage(display, Rect(0,0,1,1), RGB24, 1, 0x777777FF);
    red = allocimage(display, Rect(0,0,1,1), RGB24, 1, 0xDD0000FF);
}
@


%-------------------------------------------------------------

<<windows/rio/data.c>>=
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <thread.h>
#include <cursor.h>
#include <mouse.h>
#include <keyboard.h>
#include <frame.h>
#include <fcall.h>

#include "dat.h"
#include "fns.h"

<<global crosscursor (windows/rio/data.c)>>

<<global boxcursor (windows/rio/data.c)>>

<<global sightcursor (windows/rio/data.c)>>

<<global whitearrow (windows/rio/data.c)>>

<<global query (windows/rio/data.c)>>

<<global tl>>

<<global t>>

<<global tr>>

<<global r>>

<<global br>>

<<global b>>

<<global bl>>

<<global l>>

<<global corners (windows/rio/data.c)>>

<<function iconinit>>
@


\subsection*{[[windows/rio/fns.h]]}

<<function runemalloc>>=
#define	runemalloc(n)		malloc((n)*sizeof(Rune))
@

<<function runerealloc>>=
#define	runerealloc(a, n)	realloc(a, (n)*sizeof(Rune))
@

<<function runemove>>=
#define	runemove(a, b, n)	memmove(a, b, (n)*sizeof(Rune))
@


%-------------------------------------------------------------

<<windows/rio/fns.h>>=

// Window stuff
int		winborder(Window*, Point);
void		winctl(void*);
void		winshell(void*);
Window*	wlookid(int);
Window*	wmk(Image*, Mousectl*, Channel*, Channel*, int);
Window*	wpointto(Point);
Window*	wtop(Point);
void		wtopme(Window*);
void		wbottomme(Window*);
char*	wcontents(Window*, int*);
int		wclose(Window*);

uint		wbacknl(Window*, uint, uint);
uint		winsert(Window*, Rune*, int, uint);
void		waddraw(Window*, Rune*, int);
void		wcurrent(Window*);
void		wcut(Window*);
void		wmovemouse(Window*, Point);
void		wpaste(Window*);
void		wplumb(Window*);

void		wscrdraw(Window*);
void		wscroll(Window*, int);
void		wsendctlmesg(Window*, int, Rectangle, Image*);
void		wsetcursor(Window*, int);
void		wsetname(Window*);
void		wsetorigin(Window*, uint, int);
void		wsetpid(Window*, int, int);
void		wsetselect(Window*, uint, uint);
void		wshow(Window*, uint);
void		wsnarf(Window*);
void 		wscrsleep(Window*, uint);


// XFid stuff
Channel*	xfidinit(void);
void		xfidflush(Xfid*);
void		xfidattach(Xfid*);
void		xfidopen(Xfid*);
void		xfidclose(Xfid*);
void		xfidread(Xfid*);
void		xfidwrite(Xfid*);

// Filsys stuff
Filsys*	filsysinit(Channel*);
int		filsysmount(Filsys*, int);
Xfid*		filsysrespond(Filsys*, Xfid*, Fcall*, char*);
void		filsyscancel(Xfid*);

void		wctlproc(void*);
void		wctlthread(void*);

void		deletetimeoutproc(void*);



// Misc stuff
void	keyboardsend(char*, int);
int	whide(Window*);
int	wunhide(int);
void	freescrtemps(void);
int	parsewctl(char**, Rectangle, Rectangle*, int*, int*, int*, int*, char**, char*, char*);
int	writewctl(Xfid*, char*);
Window *new(Image*, int, int, int, char*, char*, char**);
void	riosetcursor(Cursor*, int);
int	min(int, int);
int	max(int, int);
Rune*	strrune(Rune*, Rune);
int	isalnum(Rune);
void	timerstop(Timer*);
void	timercancel(Timer*);
Timer*	timerstart(int);
void	error(char*);
void	iconinit(void);
void	*erealloc(void*, uint);
void *emalloc(uint);
char *estrdup(char*);
void	cvttorunes(char*, int, Rune*, int*, int*, int*);
/* was (byte*,int)	runetobyte(Rune*, int); */
char* runetobyte(Rune*, int, int*);
void	putsnarf(void);
void	getsnarf(void);
void	timerinit(void);
int	goodrect(Rectangle);


<<function runemalloc>>
<<function runerealloc>>
<<function runemove>>
@


\subsection*{[[windows/rio/fsys.c]]}

<<global Eperm>>=
char Eperm[] = "permission denied";
@

<<global Eexist>>=
char Eexist[] = "file does not exist";
@

<<global Enotdir>>=
char Enotdir[] = "not a directory";
@

<<global Ebadfcall>>=
char	Ebadfcall[] = "bad fcall type";
@

<<global Eoffset>>=
char	Eoffset[] = "illegal offset";
@

<<global messagesize>>=
int	messagesize = 8192+IOHDRSZ;	/* good start */
@

<<enum _anon_ (windows/rio/fsys.c)>>=
enum{
    DEBUG = 0
};
@

<<global dirtab>>=
Dirtab dirtab[]=
{
    { ".",			QTDIR,	Qdir,			0500|DMDIR },
    { "cons",		QTFILE,	Qcons,		0600 },
    { "cursor",		QTFILE,	Qcursor,		0600 },
    { "consctl",	QTFILE,	Qconsctl,		0200 },
    { "winid",		QTFILE,	Qwinid,		0400 },
    { "winname",	QTFILE,	Qwinname,	0400 },
    { "kbdin",		QTFILE,	Qkbdin,		0200 },
    { "label",		QTFILE,	Qlabel,		0600 },
    { "mouse",	QTFILE,	Qmouse,		0600 },
    { "screen",		QTFILE,	Qscreen,		0400 },
    { "snarf",		QTFILE,	Qsnarf,		0600 },
    { "text",		QTFILE,	Qtext,		0400 },
    { "wdir",		QTFILE,	Qwdir,		0600 },
    { "wctl",		QTFILE,	Qwctl,		0600 },
    { "window",	QTFILE,	Qwindow,		0400 },
    { "wsys",		QTDIR,	Qwsys,		0500|DMDIR },
    { nil, }
};
@

<<global clockfd>>=
int	clockfd;
@

<<global firstmessage>>=
int	firstmessage = 1;
@

<<global srvpipe (windows/rio/fsys.c)>>=
char	srvpipe[64];
@

<<global srvwctl (windows/rio/fsys.c)>>=
char	srvwctl[64];
@

<<global fcall>>=
Xfid* 	(*fcall[Tmax])(Filsys*, Xfid*, Fid*) =
{
    [Tflush]	= filsysflush,
    [Tversion]	= filsysversion,
    [Tauth]	= filsysauth,
    [Tattach]	= filsysattach,
    [Twalk]	= filsyswalk,
    [Topen]	= filsysopen,
    [Tcreate]	= filsyscreate,
    [Tread]	= filsysread,
    [Twrite]	= filsyswrite,
    [Tclunk]	= filsysclunk,
    [Tremove]= filsysremove,
    [Tstat]	= filsysstat,
    [Twstat]	= filsyswstat,
};
@

<<function post>>=
void
post(char *name, char *envname, int srvfd)
{
    int fd;
    char buf[32];

    fd = create(name, OWRITE|ORCLOSE|OCEXEC, 0600);
    if(fd < 0)
        error(name);
    sprint(buf, "%d",srvfd);
    if(write(fd, buf, strlen(buf)) != strlen(buf))
        error("srv write");
    putenv(envname, name);
}
@

<<function cexecpipe>>=
/*
 * Build pipe with OCEXEC set on second fd.
 * Can't put it on both because we want to post one in /srv.
 */
int
cexecpipe(int *p0, int *p1)
{
    /* pipe the hard way to get close on exec */
    if(bind("#|", "/mnt/temp", MREPL) < 0)
        return -1;
    *p0 = open("/mnt/temp/data", ORDWR);
    *p1 = open("/mnt/temp/data1", ORDWR|OCEXEC);
    unmount(nil, "/mnt/temp");
    if(*p0<0 || *p1<0)
        return -1;
    return 0;
}
@

<<function filsysinit>>=
Filsys*
filsysinit(Channel *cxfidalloc)
{
    int n, fd, pid, p0;
    Filsys *fs;
    Channel *c;
    char buf[128];

    fs = emalloc(sizeof(Filsys));
    if(cexecpipe(&fs->cfd, &fs->sfd) < 0)
        goto Rescue;
    fmtinstall('F', fcallfmt);
    clockfd = open("/dev/time", OREAD|OCEXEC);
    fd = open("/dev/user", OREAD);
    strcpy(buf, "Jean-Paul_Belmondo");
    if(fd >= 0){
        n = read(fd, buf, sizeof buf-1);
        if(n > 0)
            buf[n] = 0;
        close(fd);
    }
    fs->user = estrdup(buf);
    fs->cxfidalloc = cxfidalloc;
    pid = getpid();

    /*
     * Create and post wctl pipe
     */
    if(cexecpipe(&p0, &wctlfd) < 0)
        goto Rescue;
    sprint(srvwctl, "/srv/riowctl.%s.%d", fs->user, pid);
    post(srvwctl, "wctl", p0);
    close(p0);

    /*
     * Start server processes
     */
    c = chancreate(sizeof(char*), 0);
    if(c == nil)
        error("wctl channel");
    proccreate(wctlproc, c, 4096);
    threadcreate(wctlthread, c, 4096);
    proccreate(filsysproc, fs, 10000);

    /*
     * Post srv pipe
     */
    sprint(srvpipe, "/srv/rio.%s.%d", fs->user, pid);
    post(srvpipe, "wsys", fs->cfd);

    return fs;

Rescue:
    free(fs);
    return nil;
}
@

<<function filsysproc>>=
static
void
filsysproc(void *arg)
{
    int n;
    Xfid *x;
    Fid *f;
    Fcall t;
    uchar *buf;
    Filsys *fs;

    threadsetname("FILSYSPROC");
    fs = arg;
    fs->pid = getpid();
    x = nil;
    for(;;){
        buf = emalloc(messagesize+UTFmax);	/* UTFmax for appending partial rune in xfidwrite */
        n = read9pmsg(fs->sfd, buf, messagesize);
        if(n <= 0){
            yield();	/* if threadexitsall'ing, will not return */
            fprint(2, "rio: %d: read9pmsg: %d %r\n", getpid(), n);
            errorshouldabort = 0;
            error("eof or i/o error on server channel");
        }
        if(x == nil){
            send(fs->cxfidalloc, nil);
            recv(fs->cxfidalloc, &x);
            x->fs = fs;
        }
        x->buf = buf;
        if(convM2S(buf, n, x) != n)
            error("convert error in convM2S");
        if(DEBUG)
            fprint(2, "rio:<-%F\n", &x->Fcall);
        if(fcall[x->type] == nil)
            x = filsysrespond(fs, x, &t, Ebadfcall);
        else{
            if(x->type==Tversion || x->type==Tauth)
                f = nil;
            else
                f = newfid(fs, x->fid);
            x->f = f;
            x  = (*fcall[x->type])(fs, x, f);
        }
        firstmessage = 0;
    }
}
@

<<function filsysmount>>=
/*
 * Called only from a different FD group
 */
int
filsysmount(Filsys *fs, int id)
{
    char buf[32];

    close(fs->sfd);	/* close server end so mount won't hang if exiting */
    sprint(buf, "%d", id);
    if(mount(fs->cfd, -1, "/mnt/wsys", MREPL, buf) < 0){
        fprint(2, "mount failed: %r\n");
        return -1;
    }
    if(bind("/mnt/wsys", "/dev", MBEFORE) < 0){
        fprint(2, "bind failed: %r\n");
        return -1;
    }
    return 0;
}
@

<<function filsysrespond>>=
Xfid*
filsysrespond(Filsys *fs, Xfid *x, Fcall *t, char *err)
{
    int n;

    if(err){
        t->type = Rerror;
        t->ename = err;
    }else
        t->type = x->type+1;
    t->fid = x->fid;
    t->tag = x->tag;
    if(x->buf == nil)
        x->buf = malloc(messagesize);
    n = convS2M(t, x->buf, messagesize);
    if(n <= 0)
        error("convert error in convS2M");
    if(write(fs->sfd, x->buf, n) != n)
        error("write error in respond");
    if(DEBUG)
        fprint(2, "rio:->%F\n", t);
    free(x->buf);
    x->buf = nil;
    return x;
}
@

<<function filsyscancel>>=
void
filsyscancel(Xfid *x)
{
    if(x->buf){
        free(x->buf);
        x->buf = nil;
    }
}
@

<<function filsysversion>>=
static
Xfid*
filsysversion(Filsys *fs, Xfid *x, Fid*)
{
    Fcall t;

    if(!firstmessage)
        return filsysrespond(x->fs, x, &t, "version request not first message");
    if(x->msize < 256)
        return filsysrespond(x->fs, x, &t, "version: message size too small");
    messagesize = x->msize;
    t.msize = messagesize;
    if(strncmp(x->version, "9P2000", 6) != 0)
        return filsysrespond(x->fs, x, &t, "unrecognized 9P version");
    t.version = "9P2000";
    return filsysrespond(fs, x, &t, nil);
}
@

<<function filsysauth>>=
static
Xfid*
filsysauth(Filsys *fs, Xfid *x, Fid*)
{
    Fcall t;

        return filsysrespond(fs, x, &t, "rio: authentication not required");
}
@

<<function filsysflush>>=
static
Xfid*
filsysflush(Filsys*, Xfid *x, Fid*)
{
    sendp(x->c, xfidflush);
    return nil;
}
@

<<function filsysattach>>=
static
Xfid*
filsysattach(Filsys *, Xfid *x, Fid *f)
{
    Fcall t;

    if(strcmp(x->uname, x->fs->user) != 0)
        return filsysrespond(x->fs, x, &t, Eperm);
    f->busy = TRUE;
    f->open = FALSE;
    f->qid.path = Qdir;
    f->qid.type = QTDIR;
    f->qid.vers = 0;
    f->dir = dirtab;
    f->nrpart = 0;
    sendp(x->c, xfidattach);
    return nil;
}
@

<<function numeric>>=
static
int
numeric(char *s)
{
    for(; *s!='\0'; s++)
        if(*s<'0' || '9'<*s)
            return 0;
    return 1;
}
@

<<function filsyswalk>>=
static
Xfid*
filsyswalk(Filsys *fs, Xfid *x, Fid *f)
{
    Fcall t;
    Fid *nf;
    int i, id;
    uchar type;
    ulong path;
    Dirtab *d, *dir;
    Window *w;
    char *err;
    Qid qid;

    if(f->open)
        return filsysrespond(fs, x, &t, "walk of open file");
    nf = nil;
    if(x->fid  != x->newfid){
        /* BUG: check exists */
        nf = newfid(fs, x->newfid);
        if(nf->busy)
            return filsysrespond(fs, x, &t, "clone to busy fid");
        nf->busy = TRUE;
        nf->open = FALSE;
        nf->dir = f->dir;
        nf->qid = f->qid;
        nf->w = f->w;
        incref(f->w);
        nf->nrpart = 0;	/* not open, so must be zero */
        f = nf;	/* walk f */
    }

    t.nwqid = 0;
    err = nil;

    /* update f->qid, f->dir only if walk completes */
    qid = f->qid;
    dir = f->dir;

    if(x->nwname > 0){
        for(i=0; i<x->nwname; i++){
            if((qid.type & QTDIR) == 0){
                err = Enotdir;
                break;
            }
            if(strcmp(x->wname[i], "..") == 0){
                type = QTDIR;
                path = Qdir;
                dir = dirtab;
                if(FILE(qid) == Qwsysdir)
                    path = Qwsys;
                id = 0;
    Accept:
                if(i == MAXWELEM){
                    err = "name too long";
                    break;
                }
                qid.type = type;
                qid.vers = 0;
                qid.path = QID(id, path);
                t.wqid[t.nwqid++] = qid;
                continue;
            }

            if(qid.path == Qwsys){
                /* is it a numeric name? */
                if(!numeric(x->wname[i]))
                    break;
                /* yes: it's a directory */
                id = atoi(x->wname[i]);
                qlock(&all);
                w = wlookid(id);
                if(w == nil){
                    qunlock(&all);
                    break;
                }
                path = Qwsysdir;
                type = QTDIR;
                qunlock(&all);
                incref(w);
                sendp(winclosechan, f->w);
                f->w = w;
                dir = dirtab;
                goto Accept;
            }
        
            if(snarffd>=0 && strcmp(x->wname[i], "snarf")==0)
                break;	/* don't serve /dev/snarf if it's provided in the environment */
            id = WIN(f->qid);
            d = dirtab;
            d++;	/* skip '.' */
            for(; d->name; d++)
                if(strcmp(x->wname[i], d->name) == 0){
                    path = d->qid;
                    type = d->type;
                    dir = d;
                    goto Accept;
                }

            break;	/* file not found */
        }

        if(i==0 && err==nil)
            err = Eexist;
    }

    if(err!=nil || t.nwqid<x->nwname){
        if(nf){
            if(nf->w)
                sendp(winclosechan, nf->w);
            nf->open = FALSE;
            nf->busy = FALSE;
        }
    }else if(t.nwqid == x->nwname){
        f->dir = dir;
        f->qid = qid;
    }

    return filsysrespond(fs, x, &t, err);
}
@

<<function filsysopen>>=
static
Xfid*
filsysopen(Filsys *fs, Xfid *x, Fid *f)
{
    Fcall t;
    int m;

    /* can't truncate anything, so just disregard */
    x->mode &= ~(OTRUNC|OCEXEC);
    /* can't execute or remove anything */
    if(x->mode==OEXEC || (x->mode&ORCLOSE))
        goto Deny;
    switch(x->mode){
    default:
        goto Deny;
    case OREAD:
        m = 0400;
        break;
    case OWRITE:
        m = 0200;
        break;
    case ORDWR:
        m = 0600;
        break;
    }
    if(((f->dir->perm&~(DMDIR|DMAPPEND))&m) != m)
        goto Deny;
        
    sendp(x->c, xfidopen);
    return nil;

    Deny:
    return filsysrespond(fs, x, &t, Eperm);
}
@

<<function filsyscreate>>=
static
Xfid*
filsyscreate(Filsys *fs, Xfid *x, Fid*)
{
    Fcall t;

    return filsysrespond(fs, x, &t, Eperm);
}
@

<<function idcmp>>=
static
int
idcmp(void *a, void *b)
{
    return *(int*)a - *(int*)b;
}
@

<<function filsysread>>=
static
Xfid*
filsysread(Filsys *fs, Xfid *x, Fid *f)
{
    Fcall t;
    uchar *b;
    int i, n, o, e, len, j, k, *ids;
    Dirtab *d, dt;
    uint clock;
    char buf[16];

    if((f->qid.type & QTDIR) == 0){
        sendp(x->c, xfidread);
        return nil;
    }
    o = x->offset;
    e = x->offset+x->count;
    clock = getclock();
    b = malloc(messagesize-IOHDRSZ);	/* avoid memset of emalloc */
    if(b == nil)
        return filsysrespond(fs, x, &t, "out of memory");
    n = 0;
    switch(FILE(f->qid)){
    case Qdir:
    case Qwsysdir:
        d = dirtab;
        d++;	/* first entry is '.' */
        for(i=0; d->name!=nil && i<e; i+=len){
            len = dostat(fs, WIN(x->f->qid), d, b+n, x->count-n, clock);
            if(len <= BIT16SZ)
                break;
            if(i >= o)
                n += len;
            d++;
        }
        break;
    case Qwsys:
        qlock(&all);
        ids = emalloc(nwindow*sizeof(int));
        for(j=0; j<nwindow; j++)
            ids[j] = window[j]->id;
        qunlock(&all);
        qsort(ids, nwindow, sizeof ids[0], idcmp);
        dt.name = buf;
        for(i=0, j=0; j<nwindow && i<e; i+=len){
            k = ids[j];
            sprint(dt.name, "%d", k);
            dt.qid = QID(k, Qdir);
            dt.type = QTDIR;
            dt.perm = DMDIR|0700;
            len = dostat(fs, k, &dt, b+n, x->count-n, clock);
            if(len == 0)
                break;
            if(i >= o)
                n += len;
            j++;
        }
        free(ids);
        break;
    }
    t.data = (char*)b;
    t.count = n;
    filsysrespond(fs, x, &t, nil);
    free(b);
    return x;
}
@

<<function filsyswrite>>=
static
Xfid*
filsyswrite(Filsys*, Xfid *x, Fid*)
{
    sendp(x->c, xfidwrite);
    return nil;
}
@

<<function filsysclunk>>=
static
Xfid*
filsysclunk(Filsys *fs, Xfid *x, Fid *f)
{
    Fcall t;

    if(f->open){
        f->busy = FALSE;
        f->open = FALSE;
        sendp(x->c, xfidclose);
        return nil;
    }
    if(f->w)
        sendp(winclosechan, f->w);
    f->busy = FALSE;
    f->open = FALSE;
    return filsysrespond(fs, x, &t, nil);
}
@

<<function filsysremove>>=
static
Xfid*
filsysremove(Filsys *fs, Xfid *x, Fid*)
{
    Fcall t;

    return filsysrespond(fs, x, &t, Eperm);
}
@

<<function filsysstat>>=
static
Xfid*
filsysstat(Filsys *fs, Xfid *x, Fid *f)
{
    Fcall t;

    t.stat = emalloc(messagesize-IOHDRSZ);
    t.nstat = dostat(fs, WIN(x->f->qid), f->dir, t.stat, messagesize-IOHDRSZ, getclock());
    x = filsysrespond(fs, x, &t, nil);
    free(t.stat);
    return x;
}
@

<<function filsyswstat>>=
static
Xfid*
filsyswstat(Filsys *fs, Xfid *x, Fid*)
{
    Fcall t;

    return filsysrespond(fs, x, &t, Eperm);
}
@

<<function newfid>>=
static
Fid*
newfid(Filsys *fs, int fid)
{
    Fid *f, *ff, **fh;

    ff = nil;
    fh = &fs->fids[fid&(Nhash-1)];
    for(f=*fh; f; f=f->next)
        if(f->fid == fid)
            return f;
        else if(ff==nil && f->busy==FALSE)
            ff = f;
    if(ff){
        ff->fid = fid;
        return ff;
    }
    f = emalloc(sizeof *f);
    f->fid = fid;
    f->next = *fh;
    *fh = f;
    return f;
}
@

<<function getclock>>=
static
uint
getclock(void)
{
    char buf[32];

    seek(clockfd, 0, 0);
    read(clockfd, buf, sizeof buf);
    return atoi(buf);
}
@

<<function dostat>>=
static
int
dostat(Filsys *fs, int id, Dirtab *dir, uchar *buf, int nbuf, uint clock)
{
    Dir d;

    d.qid.path = QID(id, dir->qid);
    if(dir->qid == Qsnarf)
        d.qid.vers = snarfversion;
    else
        d.qid.vers = 0;
    d.qid.type = dir->type;
    d.mode = dir->perm;
    d.length = 0;	/* would be nice to do better */
    d.name = dir->name;
    d.uid = fs->user;
    d.gid = fs->user;
    d.muid = fs->user;
    d.atime = clock;
    d.mtime = clock;
    return convD2M(&d, buf, nbuf);
}
@


%-------------------------------------------------------------

<<windows/rio/fsys.c>>=
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <thread.h>
#include <cursor.h>
#include <mouse.h>
#include <keyboard.h>
#include <frame.h>
#include <fcall.h>

#include "dat.h"
#include "fns.h"

<<global Eperm>>
<<global Eexist>>
<<global Enotdir>>
<<global Ebadfcall>>
<<global Eoffset>>


<<enum _anon_ (windows/rio/fsys.c)>>

<<global dirtab>>

static uint		getclock(void);
static void		filsysproc(void*);
static Fid*		newfid(Filsys*, int);
static int		dostat(Filsys*, int, Dirtab*, uchar*, int, uint);

<<global clockfd>>
<<global firstmessage>>

<<global srvpipe (windows/rio/fsys.c)>>
<<global srvwctl (windows/rio/fsys.c)>>

static	Xfid*	filsysflush(Filsys*, Xfid*, Fid*);
static	Xfid*	filsysversion(Filsys*, Xfid*, Fid*);
static	Xfid*	filsysauth(Filsys*, Xfid*, Fid*);
static	Xfid*	filsysnop(Filsys*, Xfid*, Fid*);
static	Xfid*	filsysattach(Filsys*, Xfid*, Fid*);
static	Xfid*	filsyswalk(Filsys*, Xfid*, Fid*);
static	Xfid*	filsysopen(Filsys*, Xfid*, Fid*);
static	Xfid*	filsyscreate(Filsys*, Xfid*, Fid*);
static	Xfid*	filsysread(Filsys*, Xfid*, Fid*);
static	Xfid*	filsyswrite(Filsys*, Xfid*, Fid*);
static	Xfid*	filsysclunk(Filsys*, Xfid*, Fid*);
static	Xfid*	filsysremove(Filsys*, Xfid*, Fid*);
static	Xfid*	filsysstat(Filsys*, Xfid*, Fid*);
static	Xfid*	filsyswstat(Filsys*, Xfid*, Fid*);

<<global fcall>>

<<function post>>

<<function cexecpipe>>

<<function filsysinit>>

<<function filsysproc>>

<<function filsysmount>>

<<function filsysrespond>>

<<function filsyscancel>>

<<function filsysversion>>

<<function filsysauth>>

<<function filsysflush>>

<<function filsysattach>>

<<function numeric>>

<<function filsyswalk>>

<<function filsysopen>>

<<function filsyscreate>>

<<function idcmp>>

<<function filsysread>>

<<function filsyswrite>>

<<function filsysclunk>>

<<function filsysremove>>

<<function filsysstat>>

<<function filsyswstat>>

<<function newfid>>

<<function getclock>>

<<function dostat>>
@


\subsection*{[[windows/rio/rio.c]]}

<<global exitchan>>=
Channel	*exitchan;	/* chan(int) */
@

<<global winclosechan>>=
Channel	*winclosechan; /* chan(Window*); */
@

<<global viewr>>=
Rectangle	viewr;
@

<<global threadrforkflag>>=
int threadrforkflag = 0;/* should be RFENVG but that hides rio from plumber */
@

<<global fontname>>=
char		*fontname;
@

<<global mainpid>>=
int		mainpid;
@

<<enum _anon_ (windows/rio/rio.c)>>=
enum
{
    New,
    Reshape,
    Move,
    Delete,
    Hide,
    Exit,
};
@

<<enum _anon_ (windows/rio/rio.c)2>>=
enum
{
    Cut,
    Paste,
    Snarf,
    Plumb,
    Send,
    Scroll,
};
@

<<global menu2str>>=
char		*menu2str[] = {
 [Cut]		"cut",
 [Paste]	"paste",
 [Snarf]	"snarf",
 [Plumb]	"plumb",
 [Send]		"send",
 [Scroll]	"scroll",
 nil
};
@

<<global menu2>>=
Menu menu2 =
{
    menu2str
};
@

<<global Hidden>>=
int	Hidden = Exit+1;
@

<<global menu3str>>=
char		*menu3str[100] = {
 [New]		"New",
 [Reshape]	"Resize",
 [Move]		"Move",
 [Delete]	"Delete",
 [Hide]		"Hide",
 [Exit]		"Exit",
 nil
};
@

<<global menu3>>=
Menu menu3 =
{
    menu3str
};
@

<<global rcargv>>=
char *rcargv[] = { "rc", "-i", nil };
@

<<global kbdargv>>=
char *kbdargv[] = { "rc", "-c", nil, nil };
@






<<function initcmd>>=
void
initcmd(void *arg)
{
    char *cmd;

    cmd = arg;
    rfork(RFENVG|RFFDG|RFNOTEG|RFNAMEG);
    procexecl(nil, "/bin/rc", "rc", "-c", cmd, nil);
    fprint(2, "rio: exec failed: %r\n");
    exits("exec");
}
@

<<global oknotes>>=
char *oknotes[] =
{
    "delete",
    "hangup",
    "kill",
    "exit",
    nil
};
@

<<function shutdown>>=
int
shutdown(void *, char *msg)
{
    int i;
    static Lock shutdownlk;
    
    killprocs();
    for(i=0; oknotes[i]; i++)
        if(strncmp(oknotes[i], msg, strlen(oknotes[i])) == 0){
            lock(&shutdownlk);	/* only one can threadexitsall */
            threadexitsall(msg);
        }
    fprint(2, "rio %d: abort: %s\n", getpid(), msg);
    abort();
    exits(msg);
    return 0;
}
@

<<function killprocs>>=
void
killprocs(void)
{
    int i;

    for(i=0; i<nwindow; i++)
        postnote(PNGROUP, window[i]->pid, "hangup");
}
@

<<function keyboardthread>>=
void
keyboardthread(void*)
{
    Rune buf[2][20], *rp;
    int n, i;

    threadsetname("keyboardthread");
    n = 0;
    for(;;){
        rp = buf[n];
        n = 1-n;
        recv(keyboardctl->c, rp);
        for(i=1; i<nelem(buf[0])-1; i++)
            if(nbrecv(keyboardctl->c, rp+i) <= 0)
                break;
        rp[i] = L'\0';
        if(input != nil)
            sendp(input->ck, rp);
    }
}
@

<<function keyboardsend>>=
/*
 * Used by /dev/kbdin
 */
void
keyboardsend(char *s, int cnt)
{
    Rune *r;
    int i, nb, nr;

    r = runemalloc(cnt);
    /* BUGlet: partial runes will be converted to error runes */
    cvttorunes(s, cnt, r, &nb, &nr, nil);
    for(i=0; i<nr; i++)
        send(keyboardctl->c, &r[i]);
    free(r);
}
@

<<function portion>>=
int
portion(int x, int lo, int hi)
{
    x -= lo;
    hi -= lo;
    if(x < 20)
        return 0;
    if(x > hi-20)
        return 2;
    return 1;
}
@

<<function whichcorner>>=
int
whichcorner(Window *w, Point p)
{
    int i, j;
    
    i = portion(p.x, w->screenr.min.x, w->screenr.max.x);
    j = portion(p.y, w->screenr.min.y, w->screenr.max.y);
    return 3*j+i;
}
@

<<function cornercursor>>=
void
cornercursor(Window *w, Point p, int force)
{
    if(w!=nil && winborder(w, p))
        riosetcursor(corners[whichcorner(w, p)], force);
    else
        wsetcursor(w, force);
}
@

<<function winclosethread>>=
/* thread to allow fsysproc to synchronize window closing with main proc */
void
winclosethread(void*)
{
    Window *w;

    threadsetname("winclosethread");
    for(;;){
        w = recvp(winclosechan);
        wclose(w);
    }
}
@

<<function deletethread>>=
/* thread to make Deleted windows that the client still holds disappear offscreen after an interval */
void
deletethread(void*)
{
    char *s;
    Image *i;

    threadsetname("deletethread");
    for(;;){
        s = recvp(deletechan);
        i = namedimage(display, s);
        if(i != nil){
            /* move it off-screen to hide it, since client is slow in letting it go */
            originwindow(i, i->r.min, view->r.max);
        }
        freeimage(i);
        free(s);
    }
}
@

<<function deletetimeoutproc>>=
void
deletetimeoutproc(void *v)
{
    char *s;

    s = v;
    sleep(750);	/* remove window from screen after 3/4 of a second */
    sendp(deletechan, s);
}
@

<<function keyboardhide>>=
/*
 * Button 6 - keyboard toggle - has been pressed.
 * Send event to keyboard, wait for button up, send that.
 * Note: there is no coordinate translation done here; this
 * is just about getting button 6 to the keyboard simulator.
 */
void
keyboardhide(void)
{
    send(wkeyboard->mc.c, mouse);
    do
        readmouse(mousectl);
    while(mouse->buttons & (1<<5));
    send(wkeyboard->mc.c, mouse);
}
@

<<enum _anon_ (windows/rio/rio.c)3>>=
enum {
    MReshape,
    MMouse,
    NALT
};
@

<<function mousethread>>=
void
mousethread(void*)
{
    int sending, inside, scrolling, moving, band;
    Window *oin, *w, *winput;
    Image *i;
    Rectangle r;
    Point xy;
    Mouse tmp;
    static Alt alts[NALT+1];

    threadsetname("mousethread");
    sending = FALSE;
    scrolling = FALSE;
    moving = FALSE;

    alts[MReshape].c = mousectl->resizec;
    alts[MReshape].v = nil;
    alts[MReshape].op = CHANRCV;
    alts[MMouse].c = mousectl->c;
    alts[MMouse].v = &mousectl->Mouse;
    alts[MMouse].op = CHANRCV;
    alts[NALT].op = CHANEND;

    for(;;)
        switch(alt(alts)){
        case MReshape:
            resized();
            break;
        case MMouse:
            if(wkeyboard!=nil && (mouse->buttons & (1<<5))){
                keyboardhide();
                break;
            }
        Again:
            winput = input;
            /* override everything for the keyboard window */
            if(wkeyboard!=nil && ptinrect(mouse->xy, wkeyboard->screenr)){
                /* make sure it's on top; this call is free if it is */
                wtopme(wkeyboard);
                winput = wkeyboard;
            }
            if(winput!=nil && winput->i!=nil){
                /* convert to logical coordinates */
                xy.x = mouse->xy.x + (winput->i->r.min.x-winput->screenr.min.x);
                xy.y = mouse->xy.y + (winput->i->r.min.y-winput->screenr.min.y);

                /* the up and down scroll buttons are not subject to the usual rules */
                if((mouse->buttons&(8|16)) && !winput->mouseopen)
                    goto Sending;

                inside = ptinrect(mouse->xy, insetrect(winput->screenr, Selborder));
                if(winput->mouseopen)
                    scrolling = FALSE;
                else if(scrolling)
                    scrolling = mouse->buttons;
                else
                    scrolling = mouse->buttons && ptinrect(xy, winput->scrollr);
                /* topped will be zero or less if window has been bottomed */
                if(sending == FALSE && !scrolling && winborder(winput, mouse->xy) && winput->topped>0){
                    moving = TRUE;
                }else if(inside && (scrolling || winput->mouseopen || (mouse->buttons&1)))
                    sending = TRUE;
            }else
                sending = FALSE;
            if(sending){
            Sending:
                if(mouse->buttons == 0){
                    cornercursor(winput, mouse->xy, 0);
                    sending = FALSE;
                }else
                    wsetcursor(winput, 0);
                tmp = mousectl->Mouse;
                tmp.xy = xy;
                send(winput->mc.c, &tmp);
                continue;
            }
            w = wpointto(mouse->xy);
            /* change cursor if over anyone's border */
            if(w != nil)
                cornercursor(w, mouse->xy, 0);
            else
                riosetcursor(nil, 0);
            if(moving && (mouse->buttons&7)){
                oin = winput;
                band = mouse->buttons & 3;
                sweeping = 1;
                if(band)
                    i = bandsize(winput);
                else
                    i = drag(winput, &r);
                sweeping = 0;
                if(i != nil){
                    if(winput == oin){
                        if(band)
                            wsendctlmesg(winput, Reshaped, i->r, i);
                        else
                            wsendctlmesg(winput, Moved, r, i);
                        cornercursor(winput, mouse->xy, 1);
                    }else
                        freeimage(i);
                }
            }
            if(w != nil)
                cornercursor(w, mouse->xy, 0);
            /* we're not sending the event, but if button is down maybe we should */
            if(mouse->buttons){
                /* w->topped will be zero or less if window has been bottomed */
                if(w==nil || (w==winput && w->topped>0)){
                    if(mouse->buttons & 1){
                        ;
                    }else if(mouse->buttons & 2){
                        if(winput && !winput->mouseopen)
                            button2menu(winput);
                    }else if(mouse->buttons & 4)
                        button3menu();
                }else{
                    /* if button 1 event in the window, top the window and wait for button up. */
                    /* otherwise, top the window and pass the event on */
                    if(wtop(mouse->xy) && (mouse->buttons!=1 || winborder(w, mouse->xy)))
                        goto Again;
                    goto Drain;
                }
            }
            moving = FALSE;
            break;

        Drain:
            do
                readmouse(mousectl);
            while(mousectl->buttons);
            moving = FALSE;
            goto Again;	/* recalculate mouse position, cursor */
        }
}
@

<<function resized>>=
void
resized(void)
{
    Image *im;
    int i, j, ishidden;
    Rectangle r;
    Point o, n;
    Window *w;

    if(getwindow(display, Refnone) < 0)
        error("failed to re-attach window");
    freescrtemps();
    view = screen;
    freescreen(wscreen);
    wscreen = allocscreen(screen, background, 0);
    if(wscreen == nil)
        error("can't re-allocate screen");
    draw(view, view->r, background, nil, ZP);
    o = subpt(viewr.max, viewr.min);
    n = subpt(view->clipr.max, view->clipr.min);
    for(i=0; i<nwindow; i++){
        w = window[i];
        if(w->deleted)
            continue;
        r = rectsubpt(w->i->r, viewr.min);
        r.min.x = (r.min.x*n.x)/o.x;
        r.min.y = (r.min.y*n.y)/o.y;
        r.max.x = (r.max.x*n.x)/o.x;
        r.max.y = (r.max.y*n.y)/o.y;
        r = rectaddpt(r, screen->clipr.min);
        ishidden = 0;
        for(j=0; j<nhidden; j++)
            if(w == hidden[j]){
                ishidden = 1;
                break;
            }
        if(ishidden){
            im = allocimage(display, r, screen->chan, 0, DWhite);
            r = ZR;
        }else
            im = allocwindow(wscreen, r, Refbackup, DWhite);
        if(im)
            wsendctlmesg(w, Reshaped, r, im);
    }
    viewr = screen->r;
    flushimage(display, 1);
}
@

<<function button3menu>>=
void
button3menu(void)
{
    int i;

    for(i=0; i<nhidden; i++)
        menu3str[i+Hidden] = hidden[i]->label;
    menu3str[i+Hidden] = nil;

    sweeping = 1;
    switch(i = menuhit(3, mousectl, &menu3, wscreen)){
    case -1:
        break;
    case New:
        new(sweep(), FALSE, scrolling, 0, nil, "/bin/rc", nil);
        break;
    case Reshape:
        resize();
        break;
    case Move:
        move();
        break;
    case Delete:
        delete();
        break;
    case Hide:
        hide();
        break;
    case Exit:
        if(Hidden > Exit){
            send(exitchan, nil);
            break;
        }
        /* else fall through */
    default:
        unhide(i);
        break;
    }
    sweeping = 0;
}
@

<<function button2menu>>=
void
button2menu(Window *w)
{
    if(w->deleted)
        return;
    incref(w);
    if(w->scrolling)
        menu2str[Scroll] = "noscroll";
    else
        menu2str[Scroll] = "scroll";
    switch(menuhit(2, mousectl, &menu2, wscreen)){
    case Cut:
        wsnarf(w);
        wcut(w);
        wscrdraw(w);
        break;

    case Snarf:
        wsnarf(w);
        break;

    case Paste:
        getsnarf();
        wpaste(w);
        wscrdraw(w);
        break;

    case Plumb:
        wplumb(w);
        break;

    case Send:
        getsnarf();
        wsnarf(w);
        if(nsnarf == 0)
            break;
        if(w->rawing){
            waddraw(w, snarf, nsnarf);
            if(snarf[nsnarf-1]!='\n' && snarf[nsnarf-1]!='\004')
                          waddraw(w, L"\n", 1);
        }else{
            winsert(w, snarf, nsnarf, w->nr);
            if(snarf[nsnarf-1]!='\n' && snarf[nsnarf-1]!='\004')
                winsert(w, L"\n", 1, w->nr);
        }
        wsetselect(w, w->nr, w->nr);
        wshow(w, w->nr);
        break;

    case Scroll:
        if(w->scrolling ^= 1)
            wshow(w, w->nr);
        break;
    }
    wclose(w);
    wsendctlmesg(w, Wakeup, ZR, nil);
    flushimage(display, 1);
}
@

<<function onscreen>>=
Point
onscreen(Point p)
{
    p.x = max(screen->clipr.min.x, p.x);
    p.x = min(screen->clipr.max.x, p.x);
    p.y = max(screen->clipr.min.y, p.y);
    p.y = min(screen->clipr.max.y, p.y);
    return p;
}
@

<<function sweep>>=
Image*
sweep(void)
{
    Image *i, *oi;
    Rectangle r;
    Point p0, p;

    i = nil;
    menuing = TRUE;
    riosetcursor(&crosscursor, 1);
    while(mouse->buttons == 0)
        readmouse(mousectl);
    p0 = onscreen(mouse->xy);
    p = p0;
    r.min = p;
    r.max = p;
    oi = nil;
    while(mouse->buttons == 4){
        readmouse(mousectl);
        if(mouse->buttons != 4 && mouse->buttons != 0)
            break;
        if(!eqpt(mouse->xy, p)){
            p = onscreen(mouse->xy);
            r = canonrect(Rpt(p0, p));
            if(Dx(r)>5 && Dy(r)>5){
                i = allocwindow(wscreen, r, Refnone, 0xEEEEEEFF); /* grey */
                freeimage(oi);
                if(i == nil)
                    goto Rescue;
                oi = i;
                border(i, r, Selborder, red, ZP);
                flushimage(display, 1);
            }
        }
    }
    if(mouse->buttons != 0)
        goto Rescue;
    if(i==nil || Dx(i->r)<100 || Dy(i->r)<3*font->height)
        goto Rescue;
    oi = i;
    i = allocwindow(wscreen, oi->r, Refbackup, DWhite);
    freeimage(oi);
    if(i == nil)
        goto Rescue;
    border(i, r, Selborder, red, ZP);
    cornercursor(input, mouse->xy, 1);
    goto Return;

 Rescue:
    freeimage(i);
    i = nil;
    cornercursor(input, mouse->xy, 1);
    while(mouse->buttons)
        readmouse(mousectl);

 Return:
    moveto(mousectl, mouse->xy);	/* force cursor update; ugly */
    menuing = FALSE;
    return i;
}
@

<<function drawedge>>=
void
drawedge(Image **bp, Rectangle r)
{
    Image *b = *bp;
    if(b != nil && Dx(b->r) == Dx(r) && Dy(b->r) == Dy(r))
        originwindow(b, r.min, r.min);
    else{
        freeimage(b);
        *bp = allocwindow(wscreen, r, Refbackup, DRed);
    }
}
@

<<function drawborder>>=
void
drawborder(Rectangle r, int show)
{
    static Image *b[4];
    int i;
    if(show == 0){
        for(i = 0; i < 4; i++){
            freeimage(b[i]);
            b[i] = nil;
        }
    }else{
        r = canonrect(r);
        drawedge(&b[0], Rect(r.min.x, r.min.y, r.min.x+Borderwidth, r.max.y));
        drawedge(&b[1], Rect(r.min.x+Borderwidth, r.min.y, r.max.x-Borderwidth, r.min.y+Borderwidth));
        drawedge(&b[2], Rect(r.max.x-Borderwidth, r.min.y, r.max.x, r.max.y));
        drawedge(&b[3], Rect(r.min.x+Borderwidth, r.max.y-Borderwidth, r.max.x-Borderwidth, r.max.y));
    }
}
@

<<function drag>>=
Image*
drag(Window *w, Rectangle *rp)
{
    Image *i, *ni;
    Point p, op, d, dm, om;
    Rectangle r;

    i = w->i;
    menuing = TRUE;
    om = mouse->xy;
    riosetcursor(&boxcursor, 1);
    dm = subpt(mouse->xy, w->screenr.min);
    d = subpt(i->r.max, i->r.min);
    op = subpt(mouse->xy, dm);
    drawborder(Rect(op.x, op.y, op.x+d.x, op.y+d.y), 1);
    flushimage(display, 1);
    while(mouse->buttons == 4){
        p = subpt(mouse->xy, dm);
        if(!eqpt(p, op)){
            drawborder(Rect(p.x, p.y, p.x+d.x, p.y+d.y), 1);
            flushimage(display, 1);
            op = p;
        }
        readmouse(mousectl);
    }
    r = Rect(op.x, op.y, op.x+d.x, op.y+d.y);
    drawborder(r, 0);
    cornercursor(w, mouse->xy, 1);
    moveto(mousectl, mouse->xy);	/* force cursor update; ugly */
    menuing = FALSE;
    flushimage(display, 1);
    if(mouse->buttons!=0 || (ni=allocwindow(wscreen, r, Refbackup, DWhite))==nil){
        moveto(mousectl, om);
        while(mouse->buttons)
            readmouse(mousectl);
        *rp = Rect(0, 0, 0, 0);
        return nil;
    }
    draw(ni, ni->r, i, nil, i->r.min);
    *rp = r;
    return ni;
}
@

<<function cornerpt>>=
Point
cornerpt(Rectangle r, Point p, int which)
{
    switch(which){
    case 0:	/* top left */
        p = Pt(r.min.x, r.min.y);
        break;
    case 2:	/* top right */
        p = Pt(r.max.x,r.min.y);
        break;
    case 6:	/* bottom left */
        p = Pt(r.min.x, r.max.y);
        break;
    case 8:	/* bottom right */
        p = Pt(r.max.x, r.max.y);
        break;
    case 1:	/* top edge */
        p = Pt(p.x,r.min.y);
        break;
    case 5:	/* right edge */
        p = Pt(r.max.x, p.y);
        break;
    case 7:	/* bottom edge */
        p = Pt(p.x, r.max.y);
        break;
    case 3:		/* left edge */
        p = Pt(r.min.x, p.y);
        break;
    }
    return p;
}
@

<<function whichrect>>=
Rectangle
whichrect(Rectangle r, Point p, int which)
{
    switch(which){
    case 0:	/* top left */
        r = Rect(p.x, p.y, r.max.x, r.max.y);
        break;
    case 2:	/* top right */
        r = Rect(r.min.x, p.y, p.x, r.max.y);
        break;
    case 6:	/* bottom left */
        r = Rect(p.x, r.min.y, r.max.x, p.y);
        break;
    case 8:	/* bottom right */
        r = Rect(r.min.x, r.min.y, p.x, p.y);
        break;
    case 1:	/* top edge */
        r = Rect(r.min.x, p.y, r.max.x, r.max.y);
        break;
    case 5:	/* right edge */
        r = Rect(r.min.x, r.min.y, p.x, r.max.y);
        break;
    case 7:	/* bottom edge */
        r = Rect(r.min.x, r.min.y, r.max.x, p.y);
        break;
    case 3:		/* left edge */
        r = Rect(p.x, r.min.y, r.max.x, r.max.y);
        break;
    }
    return canonrect(r);
}
@

<<function bandsize>>=
Image*
bandsize(Window *w)
{
    Image *i;
    Rectangle r, or;
    Point p, startp;
    int which, but;

    p = mouse->xy;
    but = mouse->buttons;
    which = whichcorner(w, p);
    p = cornerpt(w->screenr, p, which);
    wmovemouse(w, p);
    readmouse(mousectl);
    r = whichrect(w->screenr, p, which);
    drawborder(r, 1);
    or = r;
    startp = p;
    
    while(mouse->buttons == but){
        p = onscreen(mouse->xy);
        r = whichrect(w->screenr, p, which);
        if(!eqrect(r, or) && goodrect(r)){
            drawborder(r, 1);
            flushimage(display, 1);
            or = r;
        }
        readmouse(mousectl);
    }
    p = mouse->xy;
    drawborder(or, 0);
    flushimage(display, 1);
    wsetcursor(w, 1);
    if(mouse->buttons!=0 || Dx(or)<100 || Dy(or)<3*font->height){
        while(mouse->buttons)
            readmouse(mousectl);
        return nil;
    }
    if(abs(p.x-startp.x)+abs(p.y-startp.y) <= 1)
        return nil;
    i = allocwindow(wscreen, or, Refbackup, DWhite);
    if(i == nil)
        return nil;
    border(i, r, Selborder, red, ZP);
    return i;
}
@

<<function pointto>>=
Window*
pointto(int wait)
{
    Window *w;

    menuing = TRUE;
    riosetcursor(&sightcursor, 1);
    while(mouse->buttons == 0)
        readmouse(mousectl);
    if(mouse->buttons == 4)
        w = wpointto(mouse->xy);
    else
        w = nil;
    if(wait){
        while(mouse->buttons){
            if(mouse->buttons!=4 && w !=nil){	/* cancel */
                cornercursor(input, mouse->xy, 0);
                w = nil;
            }
            readmouse(mousectl);
        }
        if(w != nil && wpointto(mouse->xy) != w)
            w = nil;
    }
    cornercursor(input, mouse->xy, 0);
    moveto(mousectl, mouse->xy);	/* force cursor update; ugly */
    menuing = FALSE;
    return w;
}
@

<<function delete>>=
void
delete(void)
{
    Window *w;

    w = pointto(TRUE);
    if(w)
        wsendctlmesg(w, Deleted, ZR, nil);
}
@

<<function resize>>=
void
resize(void)
{
    Window *w;
    Image *i;

    w = pointto(TRUE);
    if(w == nil)
        return;
    i = sweep();
    if(i)
        wsendctlmesg(w, Reshaped, i->r, i);
}
@

<<function move>>=
void
move(void)
{
    Window *w;
    Image *i;
    Rectangle r;

    w = pointto(FALSE);
    if(w == nil)
        return;
    i = drag(w, &r);
    if(i)
        wsendctlmesg(w, Moved, r, i);
    cornercursor(input, mouse->xy, 1);
}
@

<<function whide>>=
int
whide(Window *w)
{
    Image *i;
    int j;

    for(j=0; j<nhidden; j++)
        if(hidden[j] == w)	/* already hidden */
            return -1;
    i = allocimage(display, w->screenr, w->i->chan, 0, DWhite);
    if(i){
        hidden[nhidden++] = w;
        wsendctlmesg(w, Reshaped, ZR, i);
        return 1;
    }
    return 0;
}
@

<<function wunhide>>=
int
wunhide(int h)
{
    Image *i;
    Window *w;

    w = hidden[h];
    i = allocwindow(wscreen, w->i->r, Refbackup, DWhite);
    if(i){
        --nhidden;
        memmove(hidden+h, hidden+h+1, (nhidden-h)*sizeof(Window*));
        wsendctlmesg(w, Reshaped, w->i->r, i);
        return 1;
    }
    return 0;
}
@

<<function hide>>=
void
hide(void)
{
    Window *w;

    w = pointto(TRUE);
    if(w == nil)
        return;
    whide(w);
}
@

<<function unhide>>=
void
unhide(int h)
{
    Window *w;

    h -= Hidden;
    w = hidden[h];
    if(w == nil)
        return;
    wunhide(h);
}
@



%-------------------------------------------------------------

<<windows/rio/rio.c>>=
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <thread.h>
#include <cursor.h>
#include <mouse.h>
#include <keyboard.h>
#include <frame.h>
#include <fcall.h>
#include <plumb.h>

#include "dat.h"
#include "fns.h"

/*
 *  WASHINGTON (AP) - The Food and Drug Administration warned
 * consumers Wednesday not to use ``Rio'' hair relaxer products
 * because they may cause severe hair loss or turn hair green....
 *    The FDA urged consumers who have experienced problems with Rio
 * to notify their local FDA office, local health department or the
 * company at 1‑800‑543‑3002.
 */

void	killprocs(void);
int	shutdown(void*, char*);
void	button3menu(void);
void	button2menu(Window*);

void		resize(void);
void		move(void);
void		delete(void);
void		hide(void);
void		unhide(int);
Image	*sweep(void);
Image	*bandsize(Window*);
Image*	drag(Window*, Rectangle*);
void		resized(void);

void	mousethread(void*);
void	keyboardthread(void*);
void winclosethread(void*);
void deletethread(void*);
void	initcmd(void*);

<<global exitchan>>
<<global viewr>>
<<global threadrforkflag>>
<<global fontname>>
<<global mainpid>>

<<enum _anon_ (windows/rio/rio.c)>>

<<enum _anon_ (windows/rio/rio.c)2>>

<<global menu2str>>

<<global menu2>>

<<global Hidden>>

<<global menu3str>>

<<global menu3>>

<<global rcargv>>
<<global kbdargv>>



<<function derror>>

<<function usage>>

<<function threadmain>>

<<function putsnarf>>

<<function getsnarf>>

<<function initcmd>>

<<global oknotes>>

<<function shutdown>>

<<function killprocs>>

<<function keyboardthread>>

//pad: Dead?
<<function keyboardsend>>

<<function portion>>

<<function whichcorner>>

<<function cornercursor>>

<<function winclosethread>>

<<function deletethread>>

<<function deletetimeoutproc>>

<<function keyboardhide>>

<<enum _anon_ (windows/rio/rio.c)3>>

<<function mousethread>>

<<function resized>>

<<function button3menu>>

<<function button2menu>>

<<function onscreen>>

<<function sweep>>

<<function drawedge>>

<<function drawborder>>

<<function drag>>

<<function cornerpt>>

<<function whichrect>>

<<function bandsize>>

<<function pointto>>

<<function delete>>

<<function resize>>

<<function move>>

<<function whide>>

<<function wunhide>>

<<function hide>>

<<function unhide>>

<<function new>>
@


\subsection*{[[windows/rio/scrl.c]]}

<<global scrtmp>>=
static Image *scrtmp;
@

<<function scrtemps>>=
static
void
scrtemps(void)
{
    int h;

    if(scrtmp)
        return;
    h = BIG*Dy(screen->r);
    scrtmp = allocimage(display, Rect(0, 0, 32, h), screen->chan, 0, DWhite);
    if(scrtmp == nil)
        error("scrtemps");
}
@

<<function freescrtemps>>=
void
freescrtemps(void)
{
    freeimage(scrtmp);
    scrtmp = nil;
}
@

<<function scrpos>>=
static
Rectangle
scrpos(Rectangle r, uint p0, uint p1, uint tot)
{
    Rectangle q;
    int h;

    q = r;
    h = q.max.y-q.min.y;
    if(tot == 0)
        return q;
    if(tot > 1024*1024){
        tot>>=10;
        p0>>=10;
        p1>>=10;
    }
    if(p0 > 0)
        q.min.y += h*p0/tot;
    if(p1 < tot)
        q.max.y -= h*(tot-p1)/tot;
    if(q.max.y < q.min.y+2){
        if(q.min.y+2 <= r.max.y)
            q.max.y = q.min.y+2;
        else
            q.min.y = q.max.y-2;
    }
    return q;
}
@

<<function wscrdraw>>=
void
wscrdraw(Window *w)
{
    Rectangle r, r1, r2;
    Image *b;

    scrtemps();
    if(w->i == nil)
        error("scrdraw");
    r = w->scrollr;
    b = scrtmp;
    r1 = r;
    r1.min.x = 0;
    r1.max.x = Dx(r);
    r2 = scrpos(r1, w->org, w->org+w->nchars, w->nr);
    if(!eqrect(r2, w->lastsr)){
        w->lastsr = r2;
        /* move r1, r2 to (0,0) to avoid clipping */
        r2 = rectsubpt(r2, r1.min);
        r1 = rectsubpt(r1, r1.min);
        draw(b, r1, w->cols[BORD], nil, ZP);
        draw(b, r2, w->cols[BACK], nil, ZP);
        r2.min.x = r2.max.x-1;
        draw(b, r2, w->cols[BORD], nil, ZP);
        draw(w->i, r, b, nil, Pt(0, r1.min.y));
    }
}
@

<<function wscrsleep>>=
void
wscrsleep(Window *w, uint dt)
{
    Timer	*timer;
    int y, b;
    static Alt alts[3];

    timer = timerstart(dt);
    y = w->mc.xy.y;
    b = w->mc.buttons;
    alts[0].c = timer->c;
    alts[0].v = nil;
    alts[0].op = CHANRCV;
    alts[1].c = w->mc.c;
    alts[1].v = &w->mc.Mouse;
    alts[1].op = CHANRCV;
    alts[2].op = CHANEND;
    for(;;)
        switch(alt(alts)){
        case 0:
            timerstop(timer);
            return;
        case 1:
            if(abs(w->mc.xy.y-y)>2 || w->mc.buttons!=b){
                timercancel(timer);
                return;
            }
            break;
        }
}
@

<<function wscroll>>=
void
wscroll(Window *w, int but)
{
    uint p0, oldp0;
    Rectangle s;
    int x, y, my, h, first;

    s = insetrect(w->scrollr, 1);
    h = s.max.y-s.min.y;
    x = (s.min.x+s.max.x)/2;
    oldp0 = ~0;
    first = TRUE;
    do{
        flushimage(display, 1);
        if(w->mc.xy.x<s.min.x || s.max.x<=w->mc.xy.x){
            readmouse(&w->mc);
        }else{
            my = w->mc.xy.y;
            if(my < s.min.y)
                my = s.min.y;
            if(my >= s.max.y)
                my = s.max.y;
            if(!eqpt(w->mc.xy, Pt(x, my))){
                wmovemouse(w, Pt(x, my));
                readmouse(&w->mc);		/* absorb event generated by moveto() */
            }
            if(but == 2){
                y = my;
                if(y > s.max.y-2)
                    y = s.max.y-2;
                if(w->nr > 1024*1024)
                    p0 = ((w->nr>>10)*(y-s.min.y)/h)<<10;
                else
                    p0 = w->nr*(y-s.min.y)/h;
                if(oldp0 != p0)
                    wsetorigin(w, p0, FALSE);
                oldp0 = p0;
                readmouse(&w->mc);
                continue;
            }
            if(but == 1)
                p0 = wbacknl(w, w->org, (my-s.min.y)/w->font->height);
            else
                p0 = w->org+frcharofpt(w, Pt(s.max.x, my));
            if(oldp0 != p0)
                wsetorigin(w, p0, TRUE);
            oldp0 = p0;
            /* debounce */
            if(first){
                flushimage(display, 1);
                sleep(200);
                nbrecv(w->mc.c, &w->mc.Mouse);
                first = FALSE;
            }
            wscrsleep(w, 100);
        }
    }while(w->mc.buttons & (1<<(but-1)));
    while(w->mc.buttons)
        readmouse(&w->mc);
}
@


%-------------------------------------------------------------

<<windows/rio/scrl.c>>=
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <thread.h>
#include <cursor.h>
#include <mouse.h>
#include <keyboard.h>
#include <frame.h>
#include <fcall.h>

#include "dat.h"
#include "fns.h"

<<global scrtmp>>

<<function scrtemps>>

<<function freescrtemps>>

<<function scrpos>>

<<function wscrdraw>>

<<function wscrsleep>>

<<function wscroll>>
@


\subsection*{[[windows/rio/time.c]]}

<<global ctimer>>=
static Channel*	ctimer;	/* chan(Timer*)[100] */
@

<<global timer>>=
static Timer *timer;
@

<<function msec>>=
static
uint
msec(void)
{
    return nsec()/1000000;
}
@

<<function timerstop>>=
void
timerstop(Timer *t)
{
    t->next = timer;
    timer = t;
}
@

<<function timercancel>>=
void
timercancel(Timer *t)
{
    t->cancel = TRUE;
}
@

<<function timerproc>>=
static
void
timerproc(void*)
{
    int i, nt, na, dt, del;
    Timer **t, *x;
    uint old, new;

    rfork(RFFDG);
    threadsetname("TIMERPROC");
    t = nil;
    na = 0;
    nt = 0;
    old = msec();
    for(;;){
        sleep(1);	/* will sleep minimum incr */
        new = msec();
        dt = new-old;
        old = new;
        if(dt < 0)	/* timer wrapped; go around, losing a tick */
            continue;
        for(i=0; i<nt; i++){
            x = t[i];
            x->dt -= dt;
            del = 0;
            if(x->cancel){
                timerstop(x);
                del = 1;
            }else if(x->dt <= 0){
                /*
                 * avoid possible deadlock if client is
                 * now sending on ctimer
                 */
                if(nbsendul(x->c, 0) > 0)
                    del = 1;
            }
            if(del){
                memmove(&t[i], &t[i+1], (nt-i-1)*sizeof t[0]);
                --nt;
                --i;
            }
        }
        if(nt == 0){
            x = recvp(ctimer);
    gotit:
            if(nt == na){
                na += 10;
                t = realloc(t, na*sizeof(Timer*));
                if(t == nil)
                    abort();
            }
            t[nt++] = x;
            old = msec();
        }
        if(nbrecv(ctimer, &x) > 0)
            goto gotit;
    }
}
@

<<function timerinit>>=
void
timerinit(void)
{
    ctimer = chancreate(sizeof(Timer*), 100);
    proccreate(timerproc, nil, STACK);
}
@

<<function timerstart>>=
/*
 * timeralloc() and timerfree() don't lock, so can only be
 * called from the main proc.
 */
Timer*
timerstart(int dt)
{
    Timer *t;

    t = timer;
    if(t)
        timer = timer->next;
    else{
        t = emalloc(sizeof(Timer));
        t->c = chancreate(sizeof(int), 0);
    }
    t->next = nil;
    t->dt = dt;
    t->cancel = FALSE;
    sendp(ctimer, t);
    return t;
}
@


%-------------------------------------------------------------

<<windows/rio/time.c>>=
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <thread.h>
#include <cursor.h>
#include <mouse.h>
#include <keyboard.h>
#include <frame.h>
#include <fcall.h>

#include "dat.h"
#include "fns.h"

<<global ctimer>>
<<global timer>>

<<function msec>>

<<function timerstop>>

<<function timercancel>>

<<function timerproc>>

<<function timerinit>>

<<function timerstart>>
@


\subsection*{[[windows/rio/util.c]]}

<<function cvttorunes>>=
void
cvttorunes(char *p, int n, Rune *r, int *nb, int *nr, int *nulls)
{
    uchar *q;
    Rune *s;
    int j, w;

    /*
     * Always guaranteed that n bytes may be interpreted
     * without worrying about partial runes.  This may mean
     * reading up to UTFmax-1 more bytes than n; the caller
     * knows this.  If n is a firm limit, the caller should
     * set p[n] = 0.
     */
    q = (uchar*)p;
    s = r;
    for(j=0; j<n; j+=w){
        if(*q < Runeself){
            w = 1;
            *s = *q++;
        }else{
            w = chartorune(s, (char*)q);
            q += w;
        }
        if(*s)
            s++;
        else if(nulls)
                *nulls = TRUE;
    }
    *nb = (char*)q-p;
    *nr = s-r;
}
@

<<function error>>=
void
error(char *s)
{
    fprint(2, "rio: %s: %r\n", s);
    if(errorshouldabort)
        abort();
    threadexitsall("error");
}
@

<<function erealloc>>=
void*
erealloc(void *p, uint n)
{
    p = realloc(p, n);
    if(p == nil)
        error("realloc failed");
    return p;
}
@

<<function emalloc>>=
void*
emalloc(uint n)
{
    void *p;

    p = malloc(n);
    if(p == nil)
        error("malloc failed");
    memset(p, 0, n);
    return p;
}
@

<<function estrdup>>=
char*
estrdup(char *s)
{
    char *p;

    p = malloc(strlen(s)+1);
    if(p == nil)
        error("strdup failed");
    strcpy(p, s);
    return p;
}
@

<<function isalnum>>=
//@Scheck: not dead, but conflict with the one in ctype.h
int isalnum(Rune c)
{
    /*
     * Hard to get absolutely right.  Use what we know about ASCII
     * and assume anything above the Latin control characters is
     * potentially an alphanumeric.
     */
    if(c <= ' ')
        return FALSE;
    if(0x7F<=c && c<=0xA0)
        return FALSE;
    if(utfrune("!\"#$%&'()*+,-./:;<=>?@[\\]^`{|}~", c))
        return FALSE;
    return TRUE;
}
@
%$

<<function strrune>>=
Rune*
strrune(Rune *s, Rune c)
{
    Rune c1;

    if(c == 0) {
        while(*s++)
            ;
        return s-1;
    }

    while(c1 = *s++)
        if(c1 == c)
            return s-1;
    return nil;
}
@

<<function min>>=
int
min(int a, int b)
{
    if(a < b)
        return a;
    return b;
}
@

<<function max (windows/rio/util.c)>>=
int
max(int a, int b)
{
    if(a > b)
        return a;
    return b;
}
@

<<function runetobyte>>=
char*
runetobyte(Rune *r, int n, int *ip)
{
    char *s;
    int m;

    s = emalloc(n*UTFmax+1);
    m = snprint(s, n*UTFmax+1, "%.*S", n, r);
    *ip = m;
    return s;
}
@


%-------------------------------------------------------------

<<windows/rio/util.c>>=
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <thread.h>
#include <cursor.h>
#include <mouse.h>
#include <keyboard.h>
#include <frame.h>
#include <fcall.h>

#include "dat.h"
#include "fns.h"

<<function cvttorunes>>

<<function error>>

<<function erealloc>>

<<function emalloc>>

<<function estrdup>>

<<function isalnum>>

<<function strrune>>

<<function min>>

<<function max (windows/rio/util.c)>>

<<function runetobyte>>

@


\subsection*{[[windows/rio/wctl.c]]}

<<global Ebadwr>>=
char	Ebadwr[]		= "bad rectangle in wctl request";
@

<<global Ewalloc>>=
char	Ewalloc[]		= "window allocation failed in wctl request";
@

<<enum _anon_ (windows/rio/wctl.c)>>=
/* >= Top are disallowed if mouse button is pressed */
enum
{
    New,
    Resize,
    Move,
    Scroll,
    Noscroll,
    Set,
    Top,
    Bottom,
    Current,
    Hide,
    Unhide,
    Delete,
};
@

<<global cmds>>=
static char *cmds[] = {
    [New]	= "new",
    [Resize]	= "resize",
    [Move]	= "move",
    [Scroll]	= "scroll",
    [Noscroll]	= "noscroll",
    [Set]		= "set",
    [Top]	= "top",
    [Bottom]	= "bottom",
    [Current]	= "current",
    [Hide]	= "hide",
    [Unhide]	= "unhide",
    [Delete]	= "delete",
    nil
};
@

<<enum _anon_ (windows/rio/wctl.c)2>>=
enum
{
    Cd,
    Deltax,
    Deltay,
    Hidden,
    Id,
    Maxx,
    Maxy,
    Minx,
    Miny,
    PID,
    R,
    Scrolling,
    Noscrolling,
};
@

<<global params>>=
static char *params[] = {
    [Cd]	 			= "-cd",
    [Deltax]			= "-dx",
    [Deltay]			= "-dy",
    [Hidden]			= "-hide",
    [Id]				= "-id",
    [Maxx]			= "-maxx",
    [Maxy]			= "-maxy",
    [Minx]			= "-minx",
    [Miny]			= "-miny",
    [PID]				= "-pid",
    [R]				= "-r",
    [Scrolling]			= "-scroll",
    [Noscrolling]		= "-noscroll",
    nil
};
@

<<function goodrect>>=
/*
 * Check that newly created window will be of manageable size
 */
int
goodrect(Rectangle r)
{
    if(!eqrect(canonrect(r), r))
        return 0;
    if(Dx(r)<100 || Dy(r)<3*font->height)
        return 0;
    /* must have some screen and border visible so we can move it out of the way */
    if(Dx(r) >= Dx(screen->r) && Dy(r) >= Dy(screen->r))
        return 0;
    /* reasonable sizes only please */
    if(Dx(r) > BIG*Dx(screen->r))
        return 0;
    if(Dy(r) > BIG*Dx(screen->r))
        return 0;
    return 1;
}
@

<<function word>>=
static
int
word(char **sp, char *tab[])
{
    char *s, *t;
    int i;

    s = *sp;
    while(isspace(*s))
        s++;
    t = s;
    while(*s!='\0' && !isspace(*s))
        s++;
    for(i=0; tab[i]!=nil; i++)
        if(strncmp(tab[i], t, strlen(tab[i])) == 0){
            *sp = s;
            return i;
    }
    return -1;
}
@

<<function set>>=
int
set(int sign, int neg, int abs, int pos)
{
    if(sign < 0)
        return neg;
    if(sign > 0)
        return pos;
    return abs;
}
@

<<function newrect>>=
Rectangle
newrect(void)
{
    static int i = 0;
    int minx, miny, dx, dy;

    dx = min(600, Dx(screen->r) - 2*Borderwidth);
    dy = min(400, Dy(screen->r) - 2*Borderwidth);
    minx = 32 + 16*i;
    miny = 32 + 16*i;
    i++;
    i %= 10;

    return Rect(minx, miny, minx+dx, miny+dy);
}
@

<<function shift>>=
void
shift(int *minp, int *maxp, int min, int max)
{
    if(*minp < min){
        *maxp += min-*minp;
        *minp = min;
    }
    if(*maxp > max){
        *minp += max-*maxp;
        *maxp = max;
    }
}
@

<<function rectonscreen>>=
Rectangle
rectonscreen(Rectangle r)
{
    shift(&r.min.x, &r.max.x, screen->r.min.x, screen->r.max.x);
    shift(&r.min.y, &r.max.y, screen->r.min.y, screen->r.max.y);
    return r;
}
@

<<function riostrtol>>=
/* permit square brackets, in the manner of %R */
int
riostrtol(char *s, char **t)
{
    int n;

    while(*s!='\0' && (*s==' ' || *s=='\t' || *s=='['))
        s++;
    if(*s == '[')
        s++;
    n = strtol(s, t, 10);
    if(*t != s)
        while((*t)[0] == ']')
            (*t)++;
    return n;
}
@

<<function parsewctl>>=
int
parsewctl(char **argp, Rectangle r, Rectangle *rp, int *pidp, int *idp, int *hiddenp, int *scrollingp, char **cdp, char *s, char *err)
{
    int cmd, param, xy, sign;
    char *t;

    *pidp = 0;
    *hiddenp = 0;
    *scrollingp = scrolling;
    *cdp = nil;
    cmd = word(&s, cmds);
    if(cmd < 0){
        strcpy(err, "unrecognized wctl command");
        return -1;
    }
    if(cmd == New)
        r = newrect();

    strcpy(err, "missing or bad wctl parameter");
    while((param = word(&s, params)) >= 0){
        switch(param){	/* special cases */
        case Hidden:
            *hiddenp = 1;
            continue;
        case Scrolling:
            *scrollingp = 1;
            continue;
        case Noscrolling:
            *scrollingp = 0;
            continue;
        case R:
            r.min.x = riostrtol(s, &t);
            if(t == s)
                return -1;
            s = t;
            r.min.y = riostrtol(s, &t);
            if(t == s)
                return -1;
            s = t;
            r.max.x = riostrtol(s, &t);
            if(t == s)
                return -1;
            s = t;
            r.max.y = riostrtol(s, &t);
            if(t == s)
                return -1;
            s = t;
            continue;
        }
        while(isspace(*s))
            s++;
        if(param == Cd){
            *cdp = s;
            while(*s && !isspace(*s))
                s++;
            if(*s != '\0')
                *s++ = '\0';
            continue;
        }
        sign = 0;
        if(*s == '-'){
            sign = -1;
            s++;
        }else if(*s == '+'){
            sign = +1;
            s++;
        }
        if(!isdigit(*s))
            return -1;
        xy = riostrtol(s, &s);
        switch(param){
        case -1:
            strcpy(err, "unrecognized wctl parameter");
            return -1;
        case Minx:
            r.min.x = set(sign, r.min.x-xy, xy, r.min.x+xy);
            break;
        case Miny:
            r.min.y = set(sign, r.min.y-xy, xy, r.min.y+xy);
            break;
        case Maxx:
            r.max.x = set(sign, r.max.x-xy, xy, r.max.x+xy);
            break;
        case Maxy:
            r.max.y = set(sign, r.max.y-xy, xy, r.max.y+xy);
            break;
        case Deltax:
            r.max.x = set(sign, r.max.x-xy, r.min.x+xy, r.max.x+xy);
            break;
        case Deltay:
            r.max.y = set(sign, r.max.y-xy, r.min.y+xy, r.max.y+xy);
            break;
        case Id:
            if(idp != nil)
                *idp = xy;
            break;
        case PID:
            if(pidp != nil)
                *pidp = xy;
            break;
        }
    }

    *rp = rectonscreen(rectaddpt(r, screen->r.min));

    while(isspace(*s))
        s++;
    if(cmd!=New && *s!='\0'){
        strcpy(err, "extraneous text in wctl message");
        return -1;
    }

    if(argp)
        *argp = s;

    return cmd;
}
@

<<function wctlnew>>=
int
wctlnew(Rectangle rect, char *arg, int pid, int hideit, int scrollit, char *dir, char *err)
{
    char **argv;
    Image *i;

    if(!goodrect(rect)){
        strcpy(err, Ebadwr);
        return -1;
    }
    argv = emalloc(4*sizeof(char*));
    argv[0] = "rc";
    argv[1] = "-c";
    while(isspace(*arg))
        arg++;
    if(*arg == '\0'){
        argv[1] = "-i";
        argv[2] = nil;
    }else{
        argv[2] = arg;
        argv[3] = nil;
    }
    if(hideit)
        i = allocimage(display, rect, screen->chan, 0, DWhite);
    else
        i = allocwindow(wscreen, rect, Refbackup, DWhite);
    if(i == nil){
        strcpy(err, Ewalloc);
        return -1;
    }
    border(i, rect, Selborder, red, ZP);

    new(i, hideit, scrollit, pid, dir, "/bin/rc", argv);

    free(argv);	/* when new() returns, argv and args have been copied */
    return 1;
}
@

<<function writewctl>>=
int
writewctl(Xfid *x, char *err)
{
    int cnt, cmd, j, id, hideit, scrollit, pid;
    Image *i;
    char *arg, *dir;
    Rectangle rect;
    Window *w;

    w = x->f->w;
    cnt = x->count;
    x->data[cnt] = '\0';
    id = 0;

    rect = rectsubpt(w->screenr, screen->r.min);
    cmd = parsewctl(&arg, rect, &rect, &pid, &id, &hideit, &scrollit, &dir, x->data, err);
    if(cmd < 0)
        return -1;

    if(mouse->buttons!=0 && cmd>=Top){
        strcpy(err, "action disallowed when mouse active");
        return -1;
    }

    if(id != 0){
        for(j=0; j<nwindow; j++)
            if(window[j]->id == id)
                break;
        if(j == nwindow){
            strcpy(err, "no such window id");
            return -1;
        }
        w = window[j];
        if(w->deleted || w->i==nil){
            strcpy(err, "window deleted");
            return -1;
        }
    }

    switch(cmd){
    case New:
        return wctlnew(rect, arg, pid, hideit, scrollit, dir, err);
    case Set:
        if(pid > 0)
            wsetpid(w, pid, 0);
        return 1;
    case Move:
        rect = Rect(rect.min.x, rect.min.y, rect.min.x+Dx(w->screenr), rect.min.y+Dy(w->screenr));
        rect = rectonscreen(rect);
        /* fall through */
    case Resize:
        if(!goodrect(rect)){
            strcpy(err, Ebadwr);
            return -1;
        }
        if(eqrect(rect, w->screenr))
            return 1;
        i = allocwindow(wscreen, rect, Refbackup, DWhite);
        if(i == nil){
            strcpy(err, Ewalloc);
            return -1;
        }
        border(i, rect, Selborder, red, ZP);
        wsendctlmesg(w, Reshaped, i->r, i);
        return 1;
    case Scroll:
        w->scrolling = 1;
        wshow(w, w->nr);
        wsendctlmesg(w, Wakeup, ZR, nil);
        return 1;
    case Noscroll:
        w->scrolling = 0;
        wsendctlmesg(w, Wakeup, ZR, nil);
        return 1;
    case Top:
        wtopme(w);
        return 1;
    case Bottom:
        wbottomme(w);
        return 1;
    case Current:
        wcurrent(w);
        return 1;
    case Hide:
        switch(whide(w)){
        case -1:
            strcpy(err, "window already hidden");
            return -1;
        case 0:
            strcpy(err, "hide failed");
            return -1;
        default:
            break;
        }
        return 1;
    case Unhide:
        for(j=0; j<nhidden; j++)
            if(hidden[j] == w)
                break;
        if(j == nhidden){
            strcpy(err, "window not hidden");
            return -1;
        }
        if(wunhide(j) == 0){
            strcpy(err, "hide failed");
            return -1;
        }
        return 1;
    case Delete:
        wsendctlmesg(w, Deleted, ZR, nil);
        return 1;
    }
    strcpy(err, "invalid wctl message");
    return -1;
}
@

<<function wctlthread>>=
void
wctlthread(void *v)
{
    char *buf, *arg, *dir;
    int cmd, id, pid, hideit, scrollit;
    Rectangle rect;
    char err[ERRMAX];
    Channel *c;

    c = v;

    threadsetname("WCTLTHREAD");

    for(;;){
        buf = recvp(c);
        cmd = parsewctl(&arg, ZR, &rect, &pid, &id, &hideit, &scrollit, &dir, buf, err);

        switch(cmd){
        case New:
            wctlnew(rect, arg, pid, hideit, scrollit, dir, err);
        }
        free(buf);
    }
}
@

<<function wctlproc>>=
void
wctlproc(void *v)
{
    char *buf;
    int n, eofs;
    Channel *c;

    threadsetname("WCTLPROC");
    c = v;

    eofs = 0;
    for(;;){
        buf = emalloc(messagesize);
        n = read(wctlfd, buf, messagesize-1);	/* room for \0 */
        if(n < 0)
            break;
        if(n == 0){
            if(++eofs > 20)
                break;
            continue;
        }
        eofs = 0;

        buf[n] = '\0';
        sendp(c, buf);
    }
}
@


%-------------------------------------------------------------

<<windows/rio/wctl.c>>=
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <thread.h>
#include <cursor.h>
#include <mouse.h>
#include <keyboard.h>
#include <frame.h>
#include <fcall.h>
#include <plumb.h>

#include "dat.h"
#include "fns.h"

#include <ctype.h>

<<global Ebadwr>>
<<global Ewalloc>>

<<enum _anon_ (windows/rio/wctl.c)>>

<<global cmds>>

<<enum _anon_ (windows/rio/wctl.c)2>>

<<global params>>

<<function goodrect>>

<<function word>>

<<function set>>

<<function newrect>>

<<function shift>>

<<function rectonscreen>>

<<function riostrtol>>


<<function parsewctl>>

<<function wctlnew>>

<<function writewctl>>

<<function wctlthread>>

<<function wctlproc>>
@


\subsection*{[[windows/rio/wind.c]]}

<<enum _anon_ (windows/rio/wind.c)>>=
enum
{
    HiWater	= 640000,	/* max size of history */
    LoWater	= 400000,	/* min size of history after max'ed */
    MinWater	= 20000,	/* room to leave available when reallocating */
};
@

<<global topped>>=
static	int		topped;
@

<<global id>>=
static	int		id;
@

<<global cols>>=
static	Image	*cols[NCOL];
@

<<global grey>>=
static	Image	*grey;
@

<<global darkgrey>>=
static	Image	*darkgrey;
@

<<global lastcursor>>=
static	Cursor	*lastcursor;
@

<<global titlecol>>=
static	Image	*titlecol;
@

<<global lighttitlecol>>=
static	Image	*lighttitlecol;
@

<<global holdcol>>=
static	Image	*holdcol;
@

<<global lightholdcol>>=
static	Image	*lightholdcol;
@

<<global paleholdcol>>=
static	Image	*paleholdcol;
@

<<function wmk>>=
Window*
wmk(Image *i, Mousectl *mc, Channel *ck, Channel *cctl, int scrolling)
{
    Window *w;
    Rectangle r;

    if(cols[0] == nil){
        /* greys are multiples of 0x11111100+0xFF, 14* being palest */
        grey = allocimage(display, Rect(0,0,1,1), CMAP8, 1, 0xEEEEEEFF);
        darkgrey = allocimage(display, Rect(0,0,1,1), CMAP8, 1, 0x666666FF);
        cols[BACK] = display->white;
        cols[HIGH] = allocimage(display, Rect(0,0,1,1), CMAP8, 1, 0xCCCCCCFF);
        cols[BORD] = allocimage(display, Rect(0,0,1,1), CMAP8, 1, 0x999999FF);
        cols[TEXT] = display->black;
        cols[HTEXT] = display->black;
        titlecol = allocimage(display, Rect(0,0,1,1), CMAP8, 1, DGreygreen);
        lighttitlecol = allocimage(display, Rect(0,0,1,1), CMAP8, 1, DPalegreygreen);
        holdcol = allocimage(display, Rect(0,0,1,1), CMAP8, 1, DMedblue);
        lightholdcol = allocimage(display, Rect(0,0,1,1), CMAP8, 1, DGreyblue);
        paleholdcol = allocimage(display, Rect(0,0,1,1), CMAP8, 1, DPalegreyblue);
    }
    w = emalloc(sizeof(Window));
    w->screenr = i->r;
    r = insetrect(i->r, Selborder+1);
    w->i = i;
    w->mc = *mc;
    w->ck = ck;
    w->cctl = cctl;
    w->cursorp = nil;
    w->conswrite = chancreate(sizeof(Conswritemesg), 0);
    w->consread =  chancreate(sizeof(Consreadmesg), 0);
    w->mouseread =  chancreate(sizeof(Mousereadmesg), 0);
    w->wctlread =  chancreate(sizeof(Consreadmesg), 0);
    w->scrollr = r;
    w->scrollr.max.x = r.min.x+Scrollwid;
    w->lastsr = ZR;
    r.min.x += Scrollwid+Scrollgap;
    frinit(w, r, font, i, cols);
    w->maxtab = maxtab*stringwidth(font, "0");
    w->topped = ++topped;
    w->id = ++id;
    w->notefd = -1;
    w->scrolling = scrolling;
    w->dir = estrdup(startdir);
    w->label = estrdup("<unnamed>");
    r = insetrect(w->i->r, Selborder);
    draw(w->i, r, cols[BACK], nil, w->entire.min);
    wborder(w, Selborder);
    wscrdraw(w);
    incref(w);	/* ref will be removed after mounting; avoids delete before ready to be deleted */
    return w;
}
@

<<function wsetname>>=
void
wsetname(Window *w)
{
    int i, n;
    char err[ERRMAX];
    
    n = sprint(w->name, "window.%d.%d", w->id, w->namecount++);
    for(i='A'; i<='Z'; i++){
        if(nameimage(w->i, w->name, 1) > 0)
            return;
        errstr(err, sizeof err);
        if(strcmp(err, "image name in use") != 0)
            break;
        w->name[n] = i;
        w->name[n+1] = 0;
    }
    w->name[0] = 0;
    fprint(2, "rio: setname failed: %s\n", err);
}
@

<<function wresize>>=
void
wresize(Window *w, Image *i, int move)
{
    Rectangle r, or;

    or = w->i->r;
    if(move || (Dx(or)==Dx(i->r) && Dy(or)==Dy(i->r)))
        draw(i, i->r, w->i, nil, w->i->r.min);
    freeimage(w->i);
    w->i = i;
    wsetname(w);
    w->mc.image = i;
    r = insetrect(i->r, Selborder+1);
    w->scrollr = r;
    w->scrollr.max.x = r.min.x+Scrollwid;
    w->lastsr = ZR;
    r.min.x += Scrollwid+Scrollgap;
    if(move)
        frsetrects(w, r, w->i);
    else{
        frclear(w, FALSE);
        frinit(w, r, w->font, w->i, cols);
        wsetcols(w);
        w->maxtab = maxtab*stringwidth(w->font, "0");
        r = insetrect(w->i->r, Selborder);
        draw(w->i, r, cols[BACK], nil, w->entire.min);
        wfill(w);
        wsetselect(w, w->q0, w->q1);
        wscrdraw(w);
    }
    wborder(w, Selborder);
    w->topped = ++topped;
    w->resized = TRUE;
    w->mouse.counter++;
}
@

<<function wrefresh>>=
void
wrefresh(Window *w, Rectangle)
{
    /* BUG: rectangle is ignored */
    if(w == input)
        wborder(w, Selborder);
    else
        wborder(w, Unselborder);
    if(w->mouseopen)
        return;
    draw(w->i, insetrect(w->i->r, Borderwidth), w->cols[BACK], nil, w->i->r.min);
    w->ticked = 0;
    if(w->p0 > 0)
        frdrawsel(w, frptofchar(w, 0), 0, w->p0, 0);
    if(w->p1 < w->nchars)
        frdrawsel(w, frptofchar(w, w->p1), w->p1, w->nchars, 0);
    frdrawsel(w, frptofchar(w, w->p0), w->p0, w->p1, 1);
    w->lastsr = ZR;
    wscrdraw(w);
}
@

<<function wclose>>=
int
wclose(Window *w)
{
    int i;

    i = decref(w);
    if(i > 0)
        return 0;
    if(i < 0)
        error("negative ref count");
    if(!w->deleted)
        wclosewin(w);
    wsendctlmesg(w, Exited, ZR, nil);
    return 1;
}
@

<<function winctl>>=
void
winctl(void *arg)
{
    Rune *rp, *bp, *tp, *up, *kbdr;
    uint qh;
    int nr, nb, c, wid, i, npart, initial, lastb;
    char *s, *t, part[3];
    Window *w;
    Mousestate *mp, m;
    enum { WKey, WMouse, WMouseread, WCtl, WCwrite, WCread, WWread, NWALT };
    Alt alts[NWALT+1];
    Mousereadmesg mrm;
    Conswritemesg cwm;
    Consreadmesg crm;
    Consreadmesg cwrm;
    Stringpair pair;
    Wctlmesg wcm;
    char buf[4*12+1];

    w = arg;
    snprint(buf, sizeof buf, "winctl-id%d", w->id);
    threadsetname(buf);

    mrm.cm = chancreate(sizeof(Mouse), 0);
    cwm.cw = chancreate(sizeof(Stringpair), 0);
    crm.c1 = chancreate(sizeof(Stringpair), 0);
    crm.c2 = chancreate(sizeof(Stringpair), 0);
    cwrm.c1 = chancreate(sizeof(Stringpair), 0);
    cwrm.c2 = chancreate(sizeof(Stringpair), 0);
    

    alts[WKey].c = w->ck;
    alts[WKey].v = &kbdr;
    alts[WKey].op = CHANRCV;
    alts[WMouse].c = w->mc.c;
    alts[WMouse].v = &w->mc.Mouse;
    alts[WMouse].op = CHANRCV;
    alts[WMouseread].c = w->mouseread;
    alts[WMouseread].v = &mrm;
    alts[WMouseread].op = CHANSND;
    alts[WCtl].c = w->cctl;
    alts[WCtl].v = &wcm;
    alts[WCtl].op = CHANRCV;
    alts[WCwrite].c = w->conswrite;
    alts[WCwrite].v = &cwm;
    alts[WCwrite].op = CHANSND;
    alts[WCread].c = w->consread;
    alts[WCread].v = &crm;
    alts[WCread].op = CHANSND;
    alts[WWread].c = w->wctlread;
    alts[WWread].v = &cwrm;
    alts[WWread].op = CHANSND;
    alts[NWALT].op = CHANEND;

    npart = 0;
    lastb = -1;
    for(;;){
        if(w->mouseopen && w->mouse.counter != w->mouse.lastcounter)
            alts[WMouseread].op = CHANSND;
        else
            alts[WMouseread].op = CHANNOP;
        if(!w->scrolling && !w->mouseopen && w->qh>w->org+w->nchars)
            alts[WCwrite].op = CHANNOP;
        else
            alts[WCwrite].op = CHANSND;
        if(w->deleted || !w->wctlready)
            alts[WWread].op = CHANNOP;
        else
            alts[WWread].op = CHANSND;
        /* this code depends on NL and EOT fitting in a single byte */
        /* kind of expensive for each loop; worth precomputing? */
        if(w->holding)
            alts[WCread].op = CHANNOP;
        else if(npart || (w->rawing && w->nraw>0))
            alts[WCread].op = CHANSND;
        else{
            alts[WCread].op = CHANNOP;
            for(i=w->qh; i<w->nr; i++){
                c = w->r[i];
                if(c=='\n' || c=='\004'){
                    alts[WCread].op = CHANSND;
                    break;
                }
            }
        }
        switch(alt(alts)){
        case WKey:
            for(i=0; kbdr[i]!=L'\0'; i++)
                wkeyctl(w, kbdr[i]);
//			wkeyctl(w, r);
///			while(nbrecv(w->ck, &r))
//				wkeyctl(w, r);
            break;
        case WMouse:
            if(w->mouseopen) {
                w->mouse.counter++;

                /* queue click events */
                if(!w->mouse.qfull && lastb != w->mc.buttons) {	/* add to ring */
                    mp = &w->mouse.queue[w->mouse.wi];
                    if(++w->mouse.wi == nelem(w->mouse.queue))
                        w->mouse.wi = 0;
                    if(w->mouse.wi == w->mouse.ri)
                        w->mouse.qfull = TRUE;
                    mp->Mouse = w->mc;
                    mp->counter = w->mouse.counter;
                    lastb = w->mc.buttons;
                }
            } else
                wmousectl(w);
            break;
        case WMouseread:
            /* send a queued event or, if the queue is empty, the current state */
            /* if the queue has filled, we discard all the events it contained. */
            /* the intent is to discard frantic clicking by the user during long latencies. */
            w->mouse.qfull = FALSE;
            if(w->mouse.wi != w->mouse.ri) {
                m = w->mouse.queue[w->mouse.ri];
                if(++w->mouse.ri == nelem(w->mouse.queue))
                    w->mouse.ri = 0;
            } else
                m = (Mousestate){w->mc.Mouse, w->mouse.counter};

            w->mouse.lastcounter = m.counter;
            send(mrm.cm, &m.Mouse);
            continue;
        case WCtl:
            if(wctlmesg(w, wcm.type, wcm.r, wcm.image) == Exited){
                chanfree(crm.c1);
                chanfree(crm.c2);
                chanfree(mrm.cm);
                chanfree(cwm.cw);
                chanfree(cwrm.c1);
                chanfree(cwrm.c2);
                threadexits(nil);
            }
            continue;
        case WCwrite:
            recv(cwm.cw, &pair);
            rp = pair.s;
            nr = pair.ns;
            bp = rp;
            for(i=0; i<nr; i++)
                if(*bp++ == '\b'){
                    --bp;
                    initial = 0;
                    tp = runemalloc(nr);
                    runemove(tp, rp, i);
                    up = tp+i;
                    for(; i<nr; i++){
                        *up = *bp++;
                        if(*up == '\b')
                            if(up == tp)
                                initial++;
                            else
                                --up;
                        else
                            up++;
                    }
                    if(initial){
                        if(initial > w->qh)
                            initial = w->qh;
                        qh = w->qh-initial;
                        wdelete(w, qh, qh+initial);
                        w->qh = qh;
                    }
                    free(rp);
                    rp = tp;
                    nr = up-tp;
                    rp[nr] = 0;
                    break;
                }
            w->qh = winsert(w, rp, nr, w->qh)+nr;
            if(w->scrolling || w->mouseopen)
                wshow(w, w->qh);
            wsetselect(w, w->q0, w->q1);
            wscrdraw(w);
            free(rp);
            break;
        case WCread:
            recv(crm.c1, &pair);
            t = pair.s;
            nb = pair.ns;
            i = npart;
            npart = 0;
            if(i)
                memmove(t, part, i);
            while(i<nb && (w->qh<w->nr || w->nraw>0)){
                if(w->qh == w->nr){
                    wid = runetochar(t+i, &w->raw[0]);
                    w->nraw--;
                    runemove(w->raw, w->raw+1, w->nraw);
                }else
                    wid = runetochar(t+i, &w->r[w->qh++]);
                c = t[i];	/* knows break characters fit in a byte */
                i += wid;
                if(!w->rawing && (c == '\n' || c=='\004')){
                    if(c == '\004')
                        i--;
                    break;
                }
            }
            if(i==nb && w->qh<w->nr && w->r[w->qh]=='\004')
                w->qh++;
            if(i > nb){
                npart = i-nb;
                memmove(part, t+nb, npart);
                i = nb;
            }
            pair.s = t;
            pair.ns = i;
            send(crm.c2, &pair);
            continue;
        case WWread:
            w->wctlready = 0;
            recv(cwrm.c1, &pair);
            if(w->deleted || w->i==nil)
                pair.ns = sprint(pair.s, "");
            else{
                s = "visible";
                for(i=0; i<nhidden; i++)
                    if(hidden[i] == w){
                        s = "hidden";
                        break;
                    }
                t = "notcurrent";
                if(w == input)
                    t = "current";
                pair.ns = snprint(pair.s, pair.ns, "%11d %11d %11d %11d %s %s ",
                    w->i->r.min.x, w->i->r.min.y, w->i->r.max.x, w->i->r.max.y, t, s);
            }
            send(cwrm.c2, &pair);
            continue;
        }
        if(!w->deleted)
            flushimage(display, 1);
    }
}
@

<<function waddraw>>=
void
waddraw(Window *w, Rune *r, int nr)
{
    w->raw = runerealloc(w->raw, w->nraw+nr);
    runemove(w->raw+w->nraw, r, nr);
    w->nraw += nr;
}
@

<<function interruptproc>>=
/*
 * Need to do this in a separate proc because if process we're interrupting
 * is dying and trying to print tombstone, kernel is blocked holding p->debug lock.
 */
void
interruptproc(void *v)
{
    int *notefd;

    notefd = v;
    write(*notefd, "interrupt", 9);
    free(notefd);
}
@

<<function windfilewidth>>=
int
windfilewidth(Window *w, uint q0, int oneelement)
{
    uint q;
    Rune r;

    q = q0;
    while(q > 0){
        r = w->r[q-1];
        if(r<=' ')
            break;
        if(oneelement && r=='/')
            break;
        --q;
    }
    return q0-q;
}
@

<<function showcandidates>>=
void
showcandidates(Window *w, Completion *c)
{
    int i;
    Fmt f;
    Rune *rp;
    uint nr, qline, q0;
    char *s;

    runefmtstrinit(&f);
    if (c->nmatch == 0)
        s = "[no matches in ";
    else
        s = "[";
    if(c->nfile > 32)
        fmtprint(&f, "%s%d files]\n", s, c->nfile);
    else{
        fmtprint(&f, "%s", s);
        for(i=0; i<c->nfile; i++){
            if(i > 0)
                fmtprint(&f, " ");
            fmtprint(&f, "%s", c->filename[i]);
        }
        fmtprint(&f, "]\n");
    }
    /* place text at beginning of line before host point */
    qline = w->qh;
    while(qline>0 && w->r[qline-1] != '\n')
        qline--;

    rp = runefmtstrflush(&f);
    nr = runestrlen(rp);

    q0 = w->q0;
    q0 += winsert(w, rp, runestrlen(rp), qline) - qline;
    free(rp);
    wsetselect(w, q0+nr, q0+nr);
}
@

<<function namecomplete>>=
Rune*
namecomplete(Window *w)
{
    int nstr, npath;
    Rune *rp, *path, *str;
    Completion *c;
    char *s, *dir, *root;

    /* control-f: filename completion; works back to white space or / */
    if(w->q0<w->nr && w->r[w->q0]>' ')	/* must be at end of word */
        return nil;
    nstr = windfilewidth(w, w->q0, TRUE);
    str = runemalloc(nstr);
    runemove(str, w->r+(w->q0-nstr), nstr);
    npath = windfilewidth(w, w->q0-nstr, FALSE);
    path = runemalloc(npath);
    runemove(path, w->r+(w->q0-nstr-npath), npath);
    rp = nil;

    /* is path rooted? if not, we need to make it relative to window path */
    if(npath>0 && path[0]=='/'){
        dir = malloc(UTFmax*npath+1);
        sprint(dir, "%.*S", npath, path);
    }else{
        if(strcmp(w->dir, "") == 0)
            root = ".";
        else
            root = w->dir;
        dir = malloc(strlen(root)+1+UTFmax*npath+1);
        sprint(dir, "%s/%.*S", root, npath, path);
    }
    dir = cleanname(dir);

    s = smprint("%.*S", nstr, str);
    c = complete(dir, s);
    free(s);
    if(c == nil)
        goto Return;

    if(!c->advance)
        showcandidates(w, c);

    if(c->advance)
        rp = runesmprint("%s", c->string);

  Return:
    freecompletion(c);
    free(dir);
    free(path);
    free(str);
    return rp;
}
@

<<function wkeyctl>>=
void
wkeyctl(Window *w, Rune r)
{
    uint q0 ,q1;
    int n, nb, nr;
    Rune *rp;
    int *notefd;

    if(r == 0)
        return;
    if(w->deleted)
        return;
    /* navigation keys work only when mouse is not open */
    if(!w->mouseopen)
        switch(r){
        case Kdown:
            n = w->maxlines/3;
            goto case_Down;
        case Kscrollonedown:
            n = mousescrollsize(w->maxlines);
            if(n <= 0)
                n = 1;
            goto case_Down;
        case Kpgdown:
            n = 2*w->maxlines/3;
        case_Down:
            q0 = w->org+frcharofpt(w, Pt(w->Frame.r.min.x, w->Frame.r.min.y+n*w->font->height));
            wsetorigin(w, q0, TRUE);
            return;
        case Kup:
            n = w->maxlines/3;
            goto case_Up;
        case Kscrolloneup:
            n = mousescrollsize(w->maxlines);
            if(n <= 0)
                n = 1;
            goto case_Up;
        case Kpgup:
            n = 2*w->maxlines/3;
        case_Up:
            q0 = wbacknl(w, w->org, n);
            wsetorigin(w, q0, TRUE);
            return;
        case Kleft:
            if(w->q0 > 0){
                q0 = w->q0-1;
                wsetselect(w, q0, q0);
                wshow(w, q0);
            }
            return;
        case Kright:
            if(w->q1 < w->nr){
                q1 = w->q1+1;
                wsetselect(w, q1, q1);
                wshow(w, q1);
            }
            return;
        case Khome:
            wshow(w, 0);
            return;
        case Kend:
            wshow(w, w->nr);
            return;
        case 0x01:	/* ^A: beginning of line */
            if(w->q0==0 || w->q0==w->qh || w->r[w->q0-1]=='\n')
                return;
            nb = wbswidth(w, 0x15 /* ^U */);
            wsetselect(w, w->q0-nb, w->q0-nb);
            wshow(w, w->q0);
            return;
        case 0x05:	/* ^E: end of line */
            q0 = w->q0;
            while(q0 < w->nr && w->r[q0]!='\n')
                q0++;
            wsetselect(w, q0, q0);
            wshow(w, w->q0);
            return;
        }
    if(w->rawing && (w->q0==w->nr || w->mouseopen)){
        waddraw(w, &r, 1);
        return;
    }
    if(r==0x1B || (w->holding && r==0x7F)){	/* toggle hold */
        if(w->holding)
            --w->holding;
        else
            w->holding++;
        wrepaint(w);
        if(r == 0x1B)
            return;
    }
    if(r != 0x7F){
        wsnarf(w);
        wcut(w);
    }
    switch(r){
    case 0x7F:		/* send interrupt */
        w->qh = w->nr;
        wshow(w, w->qh);
        notefd = emalloc(sizeof(int));
        *notefd = w->notefd;
        proccreate(interruptproc, notefd, 4096);
        return;
    case 0x06:	/* ^F: file name completion */
    case Kins:		/* Insert: file name completion */
        rp = namecomplete(w);
        if(rp == nil)
            return;
        nr = runestrlen(rp);
        q0 = w->q0;
        q0 = winsert(w, rp, nr, q0);
        wshow(w, q0+nr);
        free(rp);
        return;
    case 0x08:	/* ^H: erase character */
    case 0x15:	/* ^U: erase line */
    case 0x17:	/* ^W: erase word */
        if(w->q0==0 || w->q0==w->qh)
            return;
        nb = wbswidth(w, r);
        q1 = w->q0;
        q0 = q1-nb;
        if(q0 < w->org){
            q0 = w->org;
            nb = q1-q0;
        }
        if(nb > 0){
            wdelete(w, q0, q0+nb);
            wsetselect(w, q0, q0);
        }
        return;
    }
    /* otherwise ordinary character; just insert */
    q0 = w->q0;
    q0 = winsert(w, &r, 1, q0);
    wshow(w, q0+1);
}
@

<<function wsetcols>>=
void
wsetcols(Window *w)
{
    if(w->holding)
        if(w == input)
            w->cols[TEXT] = w->cols[HTEXT] = holdcol;
        else
            w->cols[TEXT] = w->cols[HTEXT] = lightholdcol;
    else
        if(w == input)
            w->cols[TEXT] = w->cols[HTEXT] = display->black;
        else
            w->cols[TEXT] = w->cols[HTEXT] = darkgrey;
}
@

<<function wrepaint>>=
void
wrepaint(Window *w)
{
    wsetcols(w);
    if(!w->mouseopen)
        frredraw(w);
    if(w == input){
        wborder(w, Selborder);
        wsetcursor(w, 0);
    }else
        wborder(w, Unselborder);
}
@

<<function wbswidth>>=
int
wbswidth(Window *w, Rune c)
{
    uint q, eq, stop;
    Rune r;
    int skipping;

    /* there is known to be at least one character to erase */
    if(c == 0x08)	/* ^H: erase character */
        return 1;
    q = w->q0;
    stop = 0;
    if(q > w->qh)
        stop = w->qh;
    skipping = TRUE;
    while(q > stop){
        r = w->r[q-1];
        if(r == '\n'){		/* eat at most one more character */
            if(q == w->q0)	/* eat the newline */
                --q;
            break; 
        }
        if(c == 0x17){
            eq = isalnum(r);
            if(eq && skipping)	/* found one; stop skipping */
                skipping = FALSE;
            else if(!eq && !skipping)
                break;
        }
        --q;
    }
    return w->q0-q;
}
@

<<function wsnarf>>=
void
wsnarf(Window *w)
{
    if(w->q1 == w->q0)
        return;
    nsnarf = w->q1-w->q0;
    snarf = runerealloc(snarf, nsnarf);
    snarfversion++;	/* maybe modified by parent */
    runemove(snarf, w->r+w->q0, nsnarf);
    putsnarf();
}
@

<<function wcut>>=
void
wcut(Window *w)
{
    if(w->q1 == w->q0)
        return;
    wdelete(w, w->q0, w->q1);
    wsetselect(w, w->q0, w->q0);
}
@

<<function wpaste>>=
void
wpaste(Window *w)
{
    uint q0;

    if(nsnarf == 0)
        return;
    wcut(w);
    q0 = w->q0;
    if(w->rawing && q0==w->nr){
        waddraw(w, snarf, nsnarf);
        wsetselect(w, q0, q0);
    }else{
        q0 = winsert(w, snarf, nsnarf, w->q0);
        wsetselect(w, q0, q0+nsnarf);
    }
}
@

<<function wplumb>>=
void
wplumb(Window *w)
{
    Plumbmsg *m;
    static int fd = -2;
    char buf[32];
    uint p0, p1;
    Cursor *c;

    if(fd == -2)
        fd = plumbopen("send", OWRITE|OCEXEC);
    if(fd < 0)
        return;
    m = emalloc(sizeof(Plumbmsg));
    m->src = estrdup("rio");
    m->dst = nil;
    m->wdir = estrdup(w->dir);
    m->type = estrdup("text");
    p0 = w->q0;
    p1 = w->q1;
    if(w->q1 > w->q0)
        m->attr = nil;
    else{
        while(p0>0 && w->r[p0-1]!=' ' && w->r[p0-1]!='\t' && w->r[p0-1]!='\n')
            p0--;
        while(p1<w->nr && w->r[p1]!=' ' && w->r[p1]!='\t' && w->r[p1]!='\n')
            p1++;
        sprint(buf, "click=%d", w->q0-p0);
        m->attr = plumbunpackattr(buf);
    }
    if(p1-p0 > messagesize-1024){
        plumbfree(m);
        return;	/* too large for 9P */
    }
    m->data = runetobyte(w->r+p0, p1-p0, &m->ndata);
    if(plumbsend(fd, m) < 0){
        c = lastcursor;
        riosetcursor(&query, 1);
        sleep(300);
        riosetcursor(c, 1);
    }
    plumbfree(m);
}
@

<<function winborder>>=
int
winborder(Window *w, Point xy)
{
    return ptinrect(xy, w->screenr) && !ptinrect(xy, insetrect(w->screenr, Selborder));
}
@

<<function wmousectl>>=
void
wmousectl(Window *w)
{
    int but;

    if(w->mc.buttons == 1)
        but = 1;
    else if(w->mc.buttons == 2)
        but = 2;
    else if(w->mc.buttons == 4)
        but = 3;
    else{
        if(w->mc.buttons == 8)
            wkeyctl(w, Kscrolloneup);
        if(w->mc.buttons == 16)
            wkeyctl(w, Kscrollonedown);
        return;
    }

    incref(w);		/* hold up window while we track */
    if(w->deleted)
        goto Return;
    if(ptinrect(w->mc.xy, w->scrollr)){
        if(but)
            wscroll(w, but);
        goto Return;
    }
    if(but == 1)
        wselect(w);
    /* else all is handled by main process */
   Return:
    wclose(w);
}
@

<<function wdelete>>=
void
wdelete(Window *w, uint q0, uint q1)
{
    uint n, p0, p1;

    n = q1-q0;
    if(n == 0)
        return;
    runemove(w->r+q0, w->r+q1, w->nr-q1);
    w->nr -= n;
    if(q0 < w->q0)
        w->q0 -= min(n, w->q0-q0);
    if(q0 < w->q1)
        w->q1 -= min(n, w->q1-q0);
    if(q1 < w->qh)
        w->qh -= n;
    else if(q0 < w->qh)
        w->qh = q0;
    if(q1 <= w->org)
        w->org -= n;
    else if(q0 < w->org+w->nchars){
        p1 = q1 - w->org;
        if(p1 > w->nchars)
            p1 = w->nchars;
        if(q0 < w->org){
            w->org = q0;
            p0 = 0;
        }else
            p0 = q0 - w->org;
        frdelete(w, p0, p1);
        wfill(w);
    }
}
@

<<global clickwin>>=
static Window	*clickwin;
@

<<global clickmsec>>=
static uint	clickmsec;
@

<<global selectwin>>=
static Window	*selectwin;
@

<<global selectq>>=
static uint	selectq;
@

<<function framescroll>>=
/*
 * called from frame library
 */
void
framescroll(Frame *f, int dl)
{
    if(f != &selectwin->Frame)
        error("frameselect not right frame");
    wframescroll(selectwin, dl);
}
@

<<function wframescroll>>=
void
wframescroll(Window *w, int dl)
{
    uint q0;

    if(dl == 0){
        wscrsleep(w, 100);
        return;
    }
    if(dl < 0){
        q0 = wbacknl(w, w->org, -dl);
        if(selectq > w->org+w->p0)
            wsetselect(w, w->org+w->p0, selectq);
        else
            wsetselect(w, selectq, w->org+w->p0);
    }else{
        if(w->org+w->nchars == w->nr)
            return;
        q0 = w->org+frcharofpt(w, Pt(w->Frame.r.min.x, w->Frame.r.min.y+dl*w->font->height));
        if(selectq >= w->org+w->p1)
            wsetselect(w, w->org+w->p1, selectq);
        else
            wsetselect(w, selectq, w->org+w->p1);
    }
    wsetorigin(w, q0, TRUE);
}
@

<<function wselect>>=
void
wselect(Window *w)
{
    uint q0, q1;
    int b, x, y, first;

    first = 1;
    selectwin = w;
    /*
     * Double-click immediately if it might make sense.
     */
    b = w->mc.buttons;
    q0 = w->q0;
    q1 = w->q1;
    selectq = w->org+frcharofpt(w, w->mc.xy);
    if(clickwin==w && w->mc.msec-clickmsec<500)
    if(q0==q1 && selectq==w->q0){
        wdoubleclick(w, &q0, &q1);
        wsetselect(w, q0, q1);
        flushimage(display, 1);
        x = w->mc.xy.x;
        y = w->mc.xy.y;
        /* stay here until something interesting happens */
        do
            readmouse(&w->mc);
        while(w->mc.buttons==b && abs(w->mc.xy.x-x)<3 && abs(w->mc.xy.y-y)<3);
        w->mc.xy.x = x;	/* in case we're calling frselect */
        w->mc.xy.y = y;
        q0 = w->q0;	/* may have changed */
        q1 = w->q1;
        selectq = q0;
    }
    if(w->mc.buttons == b){
        w->scroll = framescroll;
        frselect(w, &w->mc);
        /* horrible botch: while asleep, may have lost selection altogether */
        if(selectq > w->nr)
            selectq = w->org + w->p0;
        w->Frame.scroll = nil;
        if(selectq < w->org)
            q0 = selectq;
        else
            q0 = w->org + w->p0;
        if(selectq > w->org+w->nchars)
            q1 = selectq;
        else
            q1 = w->org+w->p1;
    }
    if(q0 == q1){
        if(q0==w->q0 && clickwin==w && w->mc.msec-clickmsec<500){
            wdoubleclick(w, &q0, &q1);
            clickwin = nil;
        }else{
            clickwin = w;
            clickmsec = w->mc.msec;
        }
    }else
        clickwin = nil;
    wsetselect(w, q0, q1);
    flushimage(display, 1);
    while(w->mc.buttons){
        w->mc.msec = 0;
        b = w->mc.buttons;
        if(b & 6){
            if(b & 2){
                wsnarf(w);
                wcut(w);
            }else{
                if(first){
                    first = 0;
                    getsnarf();
                }
                wpaste(w);
            }
        }
        wscrdraw(w);
        flushimage(display, 1);
        while(w->mc.buttons == b)
            readmouse(&w->mc);
        clickwin = nil;
    }
}
@

<<function wsendctlmesg>>=
void
wsendctlmesg(Window *w, int type, Rectangle r, Image *image)
{
    Wctlmesg wcm;

    wcm.type = type;
    wcm.r = r;
    wcm.image = image;
    send(w->cctl, &wcm);
}
@

<<function wctlmesg>>=
int
wctlmesg(Window *w, int m, Rectangle r, Image *i)
{
    char buf[64];

    switch(m){
    default:
        error("unknown control message");
        break;
    case Wakeup:
        break;
    case Moved:
    case Reshaped:
        if(w->deleted){
            freeimage(i);
            break;
        }
        w->screenr = r;
        strcpy(buf, w->name);
        wresize(w, i, m==Moved);
        w->wctlready = 1;
        proccreate(deletetimeoutproc, estrdup(buf), 4096);
        if(Dx(r) > 0){
            if(w != input)
                wcurrent(w);
        }else if(w == input)
            wcurrent(nil);
        flushimage(display, 1);
        break;
    case Refresh:
        if(w->deleted || Dx(w->screenr)<=0 || !rectclip(&r, w->i->r))
            break;
        if(!w->mouseopen)
            wrefresh(w, r);
        flushimage(display, 1);
        break;
    case Movemouse:
        if(sweeping || !ptinrect(r.min, w->i->r))
            break;
        wmovemouse(w, r.min);
    case Rawon:
        break;
    case Rawoff:
        if(w->deleted)
            break;
        while(w->nraw > 0){
            wkeyctl(w, w->raw[0]);
            --w->nraw;
            runemove(w->raw, w->raw+1, w->nraw);
        }
        break;
    case Holdon:
    case Holdoff:
        if(w->deleted)
            break;
        wrepaint(w);
        flushimage(display, 1);
        break;
    case Deleted:
        if(w->deleted)
            break;
        write(w->notefd, "hangup", 6);
        proccreate(deletetimeoutproc, estrdup(w->name), 4096);
        wclosewin(w);
        break;
    case Exited:
        frclear(w, TRUE);
        close(w->notefd);
        chanfree(w->mc.c);
        chanfree(w->ck);
        chanfree(w->cctl);
        chanfree(w->conswrite);
        chanfree(w->consread);
        chanfree(w->mouseread);
        chanfree(w->wctlread);
        free(w->raw);
        free(w->r);
        free(w->dir);
        free(w->label);
        free(w);
        break;
    }
    return m;
}
@

<<function wmovemouse>>=
/*
 * Convert back to physical coordinates
 */
void
wmovemouse(Window *w, Point p)
{
    p.x += w->screenr.min.x-w->i->r.min.x;
    p.y += w->screenr.min.y-w->i->r.min.y;
    moveto(mousectl, p);
}
@

<<function wborder>>=
void
wborder(Window *w, int type)
{
    Image *col;

    if(w->i == nil)
        return;
    if(w->holding){
        if(type == Selborder)
            col = holdcol;
        else
            col = paleholdcol;
    }else{
        if(type == Selborder)
            col = titlecol;
        else
            col = lighttitlecol;
    }

    border(w->i, w->i->r, Selborder, col, ZP);
}
@

<<function wpointto>>=
Window*
wpointto(Point pt)
{
    int i;
    Window *v, *w;

    w = nil;
    for(i=0; i<nwindow; i++){
        v = window[i];
        if(ptinrect(pt, v->screenr))
        if(!v->deleted)
        if(w==nil || v->topped>w->topped)
            w = v;
    }
    return w;
}
@

<<function wcurrent>>=
void
wcurrent(Window *w)
{
    Window *oi;

    if(wkeyboard!=nil && w==wkeyboard)
        return;
    oi = input;
    input = w;
    if(oi!=w && oi!=nil)
        wrepaint(oi);
    if(w !=nil){
        wrepaint(w);
        wsetcursor(w, 0);
    }
    if(w != oi){
        if(oi){
            oi->wctlready = 1;
            wsendctlmesg(oi, Wakeup, ZR, nil);
        }
        if(w){
            w->wctlready = 1;
            wsendctlmesg(w, Wakeup, ZR, nil);
        }
    }
}
@

<<function wsetcursor>>=
void
wsetcursor(Window *w, int force)
{
    Cursor *p;

    if(w==nil || /*w!=input || */ w->i==nil || Dx(w->screenr)<=0)
        p = nil;
    else if(wpointto(mouse->xy) == w){
        p = w->cursorp;
        if(p==nil && w->holding)
            p = &whitearrow;
    }else
        p = nil;
    if(!menuing)
        riosetcursor(p, force && !menuing);
}
@

<<function riosetcursor>>=
void
riosetcursor(Cursor *p, int force)
{
    if(!force && p==lastcursor)
        return;
    setcursor(mousectl, p);
    lastcursor = p;
}
@

<<function wtop>>=
Window*
wtop(Point pt)
{
    Window *w;

    w = wpointto(pt);
    if(w){
        if(w->topped == topped)
            return nil;
        topwindow(w->i);
        wcurrent(w);
        flushimage(display, 1);
        w->topped = ++topped;
    }
    return w;
}
@

<<function wtopme>>=
void
wtopme(Window *w)
{
    if(w!=nil && w->i!=nil && !w->deleted && w->topped!=topped){
        topwindow(w->i);
        flushimage(display, 1);
        w->topped = ++ topped;
    }
}
@

<<function wbottomme>>=
void
wbottomme(Window *w)
{
    if(w!=nil && w->i!=nil && !w->deleted){
        bottomwindow(w->i);
        flushimage(display, 1);
        w->topped = - ++topped;
    }
}
@

<<function wlookid>>=
Window*
wlookid(int id)
{
    int i;

    for(i=0; i<nwindow; i++)
        if(window[i]->id == id)
            return window[i];
    return nil;
}
@

<<function wclosewin>>=
void
wclosewin(Window *w)
{
    Rectangle r;
    int i;

    w->deleted = TRUE;
    if(w == input){
        input = nil;
        wsetcursor(w, 0);
    }
    if(w == wkeyboard)
        wkeyboard = nil;
    for(i=0; i<nhidden; i++)
        if(hidden[i] == w){
            --nhidden;
            memmove(hidden+i, hidden+i+1, (nhidden-i)*sizeof(hidden[0]));
            hidden[nhidden] = nil;
            break;
        }
    for(i=0; i<nwindow; i++)
        if(window[i] == w){
            --nwindow;
            memmove(window+i, window+i+1, (nwindow-i)*sizeof(Window*));
            w->deleted = TRUE;
            r = w->i->r;
            /* move it off-screen to hide it, in case client is slow in letting it go */
            //if(0) originwindow(w->i, r.min, view->r.max);
            freeimage(w->i);
            w->i = nil;
            return;
        }
    error("unknown window in closewin");
}
@

<<function wsetpid>>=
void
wsetpid(Window *w, int pid, int dolabel)
{
    char buf[128];
    int fd;

    w->pid = pid;
    if(dolabel){
        sprint(buf, "rc %d", pid);
        free(w->label);
        w->label = estrdup(buf);
    }
    sprint(buf, "/proc/%d/notepg", pid);
    fd = open(buf, OWRITE|OCEXEC);
    if(w->notefd > 0)
        close(w->notefd);
    w->notefd = fd;
}
@

<<function winshell>>=
void
winshell(void *args)
{
    Window *w;
    Channel *pidc;
    void **arg;
    char *cmd, *dir;
    char **argv;

    arg = args;
    w = arg[0];
    pidc = arg[1];
    cmd = arg[2];
    argv = arg[3];
    dir = arg[4];
    rfork(RFNAMEG|RFFDG|RFENVG);
    if(filsysmount(filsys, w->id) < 0){
        fprint(2, "mount failed: %r\n");
        sendul(pidc, 0);
        threadexits("mount failed");
    }
    close(0);
    if(open("/dev/cons", OREAD) < 0){
        fprint(2, "can't open /dev/cons: %r\n");
        sendul(pidc, 0);
        threadexits("/dev/cons");
    }
    close(1);
    if(open("/dev/cons", OWRITE) < 0){
        fprint(2, "can't open /dev/cons: %r\n");
        sendul(pidc, 0);
        threadexits("open");	/* BUG? was terminate() */
    }
    if(wclose(w) == 0){	/* remove extra ref hanging from creation */
        notify(nil);
        dup(1, 2);
        if(dir)
            chdir(dir);
        procexec(pidc, cmd, argv);
        _exits("exec failed");
    }
}
@

<<global left1>>=
static Rune left1[] =  { L'{', L'[', L'(', L'<', L'«', 0 };
@

<<global right1>>=
static Rune right1[] = { L'}', L']', L')', L'>', L'»', 0 };
@

<<global left2>>=
static Rune left2[] =  { L'\n', 0 };
@

<<global left3>>=
static Rune left3[] =  { L'\'', L'"', L'`', 0 };
@

<<global left>>=
Rune *left[] = {
    left1,
    left2,
    left3,
    nil
};
@

<<global right>>=
Rune *right[] = {
    right1,
    left2,
    left3,
    nil
};
@

<<function wdoubleclick>>=
void
wdoubleclick(Window *w, uint *q0, uint *q1)
{
    int c, i;
    Rune *r, *l, *p;
    uint q;

    for(i=0; left[i]!=nil; i++){
        q = *q0;
        l = left[i];
        r = right[i];
        /* try matching character to left, looking right */
        if(q == 0)
            c = '\n';
        else
            c = w->r[q-1];
        p = strrune(l, c);
        if(p != nil){
            if(wclickmatch(w, c, r[p-l], 1, &q))
                *q1 = q-(c!='\n');
            return;
        }
        /* try matching character to right, looking left */
        if(q == w->nr)
            c = '\n';
        else
            c = w->r[q];
        p = strrune(r, c);
        if(p != nil){
            if(wclickmatch(w, c, l[p-r], -1, &q)){
                *q1 = *q0+(*q0<w->nr && c=='\n');
                *q0 = q;
                if(c!='\n' || q!=0 || w->r[0]=='\n')
                    (*q0)++;
            }
            return;
        }
    }
    /* try filling out word to right */
    while(*q1<w->nr && isalnum(w->r[*q1]))
        (*q1)++;
    /* try filling out word to left */
    while(*q0>0 && isalnum(w->r[*q0-1]))
        (*q0)--;
}
@

<<function wclickmatch>>=
int
wclickmatch(Window *w, int cl, int cr, int dir, uint *q)
{
    Rune c;
    int nest;

    nest = 1;
    for(;;){
        if(dir > 0){
            if(*q == w->nr)
                break;
            c = w->r[*q];
            (*q)++;
        }else{
            if(*q == 0)
                break;
            (*q)--;
            c = w->r[*q];
        }
        if(c == cr){
            if(--nest==0)
                return 1;
        }else if(c == cl)
            nest++;
    }
    return cl=='\n' && nest==1;
}
@

<<function wbacknl>>=
uint
wbacknl(Window *w, uint p, uint n)
{
    int i, j;

    /* look for start of this line if n==0 */
    if(n==0 && p>0 && w->r[p-1]!='\n')
        n = 1;
    i = n;
    while(i-->0 && p>0){
        --p;	/* it's at a newline now; back over it */
        if(p == 0)
            break;
        /* at 128 chars, call it a line anyway */
        for(j=128; --j>0 && p>0; p--)
            if(w->r[p-1]=='\n')
                break;
    }
    return p;
}
@

<<function wshow>>=
void
wshow(Window *w, uint q0)
{
    int qe;
    int nl;
    uint q;

    qe = w->org+w->nchars;
    if(w->org<=q0 && (q0<qe || (q0==qe && qe==w->nr)))
        wscrdraw(w);
    else{
        nl = 4*w->maxlines/5;
        q = wbacknl(w, q0, nl);
        /* avoid going backwards if trying to go forwards - long lines! */
        if(!(q0>w->org && q<w->org))
            wsetorigin(w, q, TRUE);
        while(q0 > w->org+w->nchars)
            wsetorigin(w, w->org+1, FALSE);
    }
}
@

<<function wsetorigin>>=
void
wsetorigin(Window *w, uint org, int exact)
{
    int i, a, fixup;
    Rune *r;
    uint n;

    if(org>0 && !exact){
        /* org is an estimate of the char posn; find a newline */
        /* don't try harder than 256 chars */
        for(i=0; i<256 && org<w->nr; i++){
            if(w->r[org] == '\n'){
                org++;
                break;
            }
            org++;
        }
    }
    a = org-w->org;
    fixup = 0;
    if(a>=0 && a<w->nchars){
        frdelete(w, 0, a);
        fixup = 1;	/* frdelete can leave end of last line in wrong selection mode; it doesn't know what follows */
    }else if(a<0 && -a<w->nchars){
        n = w->org - org;
        r = runemalloc(n);
        runemove(r, w->r+org, n);
        frinsert(w, r, r+n, 0);
        free(r);
    }else
        frdelete(w, 0, w->nchars);
    w->org = org;
    wfill(w);
    wscrdraw(w);
    wsetselect(w, w->q0, w->q1);
    if(fixup && w->p1 > w->p0)
        frdrawsel(w, frptofchar(w, w->p1-1), w->p1-1, w->p1, 1);
}
@

<<function wsetselect>>=
void
wsetselect(Window *w, uint q0, uint q1)
{
    int p0, p1;

    /* w->p0 and w->p1 are always right; w->q0 and w->q1 may be off */
    w->q0 = q0;
    w->q1 = q1;
    /* compute desired p0,p1 from q0,q1 */
    p0 = q0-w->org;
    p1 = q1-w->org;
    if(p0 < 0)
        p0 = 0;
    if(p1 < 0)
        p1 = 0;
    if(p0 > w->nchars)
        p0 = w->nchars;
    if(p1 > w->nchars)
        p1 = w->nchars;
    if(p0==w->p0 && p1==w->p1)
        return;
    /* screen disagrees with desired selection */
    if(w->p1<=p0 || p1<=w->p0 || p0==p1 || w->p1==w->p0){
        /* no overlap or too easy to bother trying */
        frdrawsel(w, frptofchar(w, w->p0), w->p0, w->p1, 0);
        frdrawsel(w, frptofchar(w, p0), p0, p1, 1);
        goto Return;
    }
    /* overlap; avoid unnecessary painting */
    if(p0 < w->p0){
        /* extend selection backwards */
        frdrawsel(w, frptofchar(w, p0), p0, w->p0, 1);
    }else if(p0 > w->p0){
        /* trim first part of selection */
        frdrawsel(w, frptofchar(w, w->p0), w->p0, p0, 0);
    }
    if(p1 > w->p1){
        /* extend selection forwards */
        frdrawsel(w, frptofchar(w, w->p1), w->p1, p1, 1);
    }else if(p1 < w->p1){
        /* trim last part of selection */
        frdrawsel(w, frptofchar(w, p1), p1, w->p1, 0);
    }

    Return:
    w->p0 = p0;
    w->p1 = p1;
}
@

<<function winsert>>=
uint
winsert(Window *w, Rune *r, int n, uint q0)
{
    uint m;

    if(n == 0)
        return q0;
    if(w->nr+n>HiWater && q0>=w->org && q0>=w->qh){
        m = min(HiWater-LoWater, min(w->org, w->qh));
        w->org -= m;
        w->qh -= m;
        if(w->q0 > m)
            w->q0 -= m;
        else
            w->q0 = 0;
        if(w->q1 > m)
            w->q1 -= m;
        else
            w->q1 = 0;
        w->nr -= m;
        runemove(w->r, w->r+m, w->nr);
        q0 -= m;
    }
    if(w->nr+n > w->maxr){
        /*
         * Minimize realloc breakage:
         *	Allocate at least MinWater
         * 	Double allocation size each time
         *	But don't go much above HiWater
         */
        m = max(min(2*(w->nr+n), HiWater), w->nr+n)+MinWater;
        if(m > HiWater)
            m = max(HiWater+MinWater, w->nr+n);
        if(m > w->maxr){
            w->r = runerealloc(w->r, m);
            w->maxr = m;
        }
    }
    runemove(w->r+q0+n, w->r+q0, w->nr-q0);
    runemove(w->r+q0, r, n);
    w->nr += n;
    /* if output touches, advance selection, not qh; works best for keyboard and output */
    if(q0 <= w->q1)
        w->q1 += n;
    if(q0 <= w->q0)
        w->q0 += n;
    if(q0 < w->qh)
        w->qh += n;
    if(q0 < w->org)
        w->org += n;
    else if(q0 <= w->org+w->nchars)
        frinsert(w, r, r+n, q0-w->org);
    return q0;
}
@

<<function wfill>>=
void
wfill(Window *w)
{
    Rune *rp;
    int i, n, m, nl;

    if(w->lastlinefull)
        return;
    rp = malloc(messagesize);
    do{
        n = w->nr-(w->org+w->nchars);
        if(n == 0)
            break;
        if(n > 2000)	/* educated guess at reasonable amount */
            n = 2000;
        runemove(rp, w->r+(w->org+w->nchars), n);
        /*
         * it's expensive to frinsert more than we need, so
         * count newlines.
         */
        nl = w->maxlines-w->nlines;
        m = 0;
        for(i=0; i<n; ){
            if(rp[i++] == '\n'){
                m++;
                if(m >= nl)
                    break;
            }
        }
        frinsert(w, rp, rp+i, w->nchars);
    }while(w->lastlinefull == FALSE);
    free(rp);
}
@

<<function wcontents>>=
char*
wcontents(Window *w, int *ip)
{
    return runetobyte(w->r, w->nr, ip);
}
@


%-------------------------------------------------------------

<<windows/rio/wind.c>>=
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <thread.h>
#include <cursor.h>
#include <mouse.h>
#include <keyboard.h>
#include <frame.h>
#include <fcall.h>
#include <plumb.h>

#include <complete.h>

#include "dat.h"
#include "fns.h"


void		wrefresh(Window*, Rectangle);
void		wresize(Window*, Image*, int);
void		wkeyctl(Window*, Rune);
void		wsetcols(Window*);
void		wrepaint(Window*);
int		wbswidth(Window*, Rune);
void		wmousectl(Window*);
void		wdelete(Window*, uint, uint);
void		wframescroll(Window*, int);
void		wselect(Window*);
int		wctlmesg(Window*, int, Rectangle, Image*);
void		wborder(Window*, int);
void		wclosewin(Window*);
void		wdoubleclick(Window*, uint*, uint*);
int		wclickmatch(Window*, int, int, int, uint*);
void		wfill(Window*);


<<enum _anon_ (windows/rio/wind.c)>>

<<global topped>>
<<global id>>

<<global cols>>
<<global grey>>
<<global darkgrey>>
<<global lastcursor>>
<<global titlecol>>
<<global lighttitlecol>>
<<global holdcol>>
<<global lightholdcol>>
<<global paleholdcol>>

<<function wmk>>

<<function wsetname>>

<<function wresize>>

<<function wrefresh>>

<<function wclose>>


<<function winctl>>

<<function waddraw>>

<<function interruptproc>>

<<function windfilewidth>>

<<function showcandidates>>

<<function namecomplete>>

<<function wkeyctl>>

<<function wsetcols>>

<<function wrepaint>>

<<function wbswidth>>

<<function wsnarf>>

<<function wcut>>

<<function wpaste>>

<<function wplumb>>

<<function winborder>>

<<function wmousectl>>

<<function wdelete>>


<<global clickwin>>
<<global clickmsec>>
<<global selectwin>>
<<global selectq>>

<<function framescroll>>

<<function wframescroll>>

<<function wselect>>

<<function wsendctlmesg>>

<<function wctlmesg>>

<<function wmovemouse>>

<<function wborder>>

<<function wpointto>>

<<function wcurrent>>

<<function wsetcursor>>

<<function riosetcursor>>

<<function wtop>>

<<function wtopme>>

<<function wbottomme>>

<<function wlookid>>

<<function wclosewin>>

<<function wsetpid>>

<<function winshell>>

<<global left1>>
<<global right1>>
<<global left2>>
<<global left3>>

<<global left>>
<<global right>>

<<function wdoubleclick>>

<<function wclickmatch>>


<<function wbacknl>>

<<function wshow>>

<<function wsetorigin>>

<<function wsetselect>>

<<function winsert>>

<<function wfill>>

<<function wcontents>>
@


\subsection*{[[windows/rio/xfid.c]]}

<<constant MAXSNARF>>=
#define	MAXSNARF	100*1024
@

<<global Einuse>>=
char Einuse[] =		"file in use";
@

<<global Edeleted>>=
char Edeleted[] =	"window deleted";
@

<<global Ebadreq>>=
char Ebadreq[] =	"bad graphics request";
@

<<global Etooshort>>=
char Etooshort[] =	"buffer too small";
@

<<global Ebadtile>>=
char Ebadtile[] =	"unknown tile";
@

<<global Eshort>>=
char Eshort[] =		"short i/o request";
@

<<global Elong>>=
char Elong[] = 		"snarf buffer too long";
@

<<global Eunkid>>=
char Eunkid[] = 	"unknown id in attach";
@

<<global Ebadrect>>=
char Ebadrect[] = 	"bad rectangle in attach";
@

<<global Ewindow>>=
char Ewindow[] = 	"cannot make window";
@

<<global Enowindow>>=
char Enowindow[] = 	"window has no image";
@

<<global Ebadmouse>>=
char Ebadmouse[] = 	"bad format on /dev/mouse";
@

<<global Ebadwrect>>=
char Ebadwrect[] = 	"rectangle outside screen";
@

<<global Ebadoffset>>=
char Ebadoffset[] = 	"window read not on scan line boundary";
@

<<global xfidfree>>=
static	Xfid	*xfidfree;
@

<<global xfid>>=
static	Xfid	*xfid;
@

<<global cxfidalloc>>=
static	Channel	*cxfidalloc;	/* chan(Xfid*) */
@

<<global cxfidfree>>=
static	Channel	*cxfidfree;	/* chan(Xfid*) */
@

<<global tsnarf>>=
static	char	*tsnarf;
@

<<global ntsnarf>>=
static	int	ntsnarf;
@

<<enum _anon_ (windows/rio/xfid.c)>>=
enum { 
    Alloc, 
    Free, 
    N 
};
@

<<function xfidallocthread>>=
void
xfidallocthread(void*)
{
    Xfid *x;
    static Alt alts[N+1];

    alts[Alloc].c = cxfidalloc;
    alts[Alloc].v = nil;
    alts[Alloc].op = CHANRCV;
    alts[Free].c = cxfidfree;
    alts[Free].v = &x;
    alts[Free].op = CHANRCV;
    alts[N].op = CHANEND;
    for(;;){
        switch(alt(alts)){
        case Alloc:
            x = xfidfree;
            if(x)
                xfidfree = x->free;
            else{
                x = emalloc(sizeof(Xfid));
                x->c = chancreate(sizeof(void(*)(Xfid*)), 0);
                x->flushc = chancreate(sizeof(int), 0);	/* notification only; no data */
                x->flushtag = -1;
                x->next = xfid;
                xfid = x;
                threadcreate(xfidctl, x, 16384);
            }
            if(x->ref != 0){
                fprint(2, "%p incref %ld\n", x, x->ref);
                error("incref");
            }
            if(x->flushtag != -1)
                error("flushtag in allocate");
            incref(x);
            sendp(cxfidalloc, x);
            break;
        case Free:
            if(x->ref != 0){
                fprint(2, "%p decref %ld\n", x, x->ref);
                error("decref");
            }
            if(x->flushtag != -1)
                error("flushtag in free");
            x->free = xfidfree;
            xfidfree = x;
            break;
        }
    }
}
@

<<function xfidinit>>=
Channel*
xfidinit(void)
{
    cxfidalloc = chancreate(sizeof(Xfid*), 0);
    cxfidfree = chancreate(sizeof(Xfid*), 0);
    threadcreate(xfidallocthread, nil, STACK);
    return cxfidalloc;
}
@

<<function xfidctl>>=
void
xfidctl(void *arg)
{
    Xfid *x;
    void (*f)(Xfid*);
    char buf[64];

    x = arg;
    snprint(buf, sizeof buf, "xfid.%p", x);
    threadsetname(buf);
    for(;;){
        f = recvp(x->c);
        (*f)(x);
        if(decref(x) == 0)
            sendp(cxfidfree, x);
    }
}
@

<<function xfidflush>>=
void
xfidflush(Xfid *x)
{
    Fcall t;
    Xfid *xf;

    for(xf=xfid; xf; xf=xf->next)
        if(xf->flushtag == x->oldtag){
            xf->flushtag = -1;
            xf->flushing = TRUE;
            incref(xf);	/* to hold data structures up at tail of synchronization */
            if(xf->ref == 1)
                error("ref 1 in flush");
            if(canqlock(&xf->active)){
                qunlock(&xf->active);
                sendul(xf->flushc, 0);
            }else{
                qlock(&xf->active);	/* wait for him to finish */
                qunlock(&xf->active);
            }
            xf->flushing = FALSE;
            if(decref(xf) == 0)
                sendp(cxfidfree, xf);
            break;
        }
    filsysrespond(x->fs, x, &t, nil);
}
@

<<function xfidattach>>=
void
xfidattach(Xfid *x)
{
    Fcall t;
    int id, hideit, scrollit;
    Window *w;
    char *err, *n, *dir, errbuf[ERRMAX];
    int pid, newlymade;
    Rectangle r;
    Image *i;

    t.qid = x->f->qid;
    qlock(&all);
    w = nil;
    err = Eunkid;
    newlymade = FALSE;
    hideit = 0;

    if(x->aname[0] == 'N'){	/* N 100,100, 200, 200 - old syntax */
        n = x->aname+1;
        pid = strtoul(n, &n, 0);
        if(*n == ',')
            n++;
        r.min.x = strtoul(n, &n, 0);
        if(*n == ',')
            n++;
        r.min.y = strtoul(n, &n, 0);
        if(*n == ',')
            n++;
        r.max.x = strtoul(n, &n, 0);
        if(*n == ',')
            n++;
        r.max.y = strtoul(n, &n, 0);
  Allocate:
        if(!goodrect(r))
            err = Ebadrect;
        else{
            if(hideit)
                i = allocimage(display, r, screen->chan, 0, DWhite);
            else
                i = allocwindow(wscreen, r, Refbackup, DWhite);
            if(i){
                border(i, r, Selborder, display->black, ZP);
                if(pid == 0)
                    pid = -1;	/* make sure we don't pop a shell! - UGH */
                w = new(i, hideit, scrolling, pid, nil, nil, nil);
                flushimage(display, 1);
                newlymade = TRUE;
            }else
                err = Ewindow;
        }
    }else if(strncmp(x->aname, "new", 3) == 0){	/* new -dx -dy - new syntax, as in wctl */
        pid = 0;
        if(parsewctl(nil, ZR, &r, &pid, nil, &hideit, &scrollit, &dir, x->aname, errbuf) < 0)
            err = errbuf;
        else
            goto Allocate;
    }else{
        id = atoi(x->aname);
        w = wlookid(id);
    }
    x->f->w = w;
    if(w == nil){
        qunlock(&all);
        x->f->busy = FALSE;
        filsysrespond(x->fs, x, &t, err);
        return;
    }
    if(!newlymade)	/* counteract dec() in winshell() */
        incref(w);
    qunlock(&all);
    filsysrespond(x->fs, x, &t, nil);
}
@

<<function xfidopen>>=
void
xfidopen(Xfid *x)
{
    Fcall t;
    Window *w;

    w = x->f->w;
    if(w->deleted){
        filsysrespond(x->fs, x, &t, Edeleted);
        return;
    }
    switch(FILE(x->f->qid)){
    case Qconsctl:
        if(w->ctlopen){
            filsysrespond(x->fs, x, &t, Einuse);
            return;
        }
        w->ctlopen = TRUE;
        break;
    case Qkbdin:
        if(w !=  wkeyboard){
            filsysrespond(x->fs, x, &t, Eperm);
            return;
        }
        break;
    case Qmouse:
        if(w->mouseopen){
            filsysrespond(x->fs, x, &t, Einuse);
            return;
        }
        /*
         * Reshaped: there's a race if the appl. opens the
         * window, is resized, and then opens the mouse,
         * but that's rare.  The alternative is to generate
         * a resized event every time a new program starts
         * up in a window that has been resized since the
         * dawn of time.  We choose the lesser evil.
         */
        w->resized = FALSE;
        w->mouseopen = TRUE;
        break;
    case Qsnarf:
        if(x->mode==ORDWR || x->mode==OWRITE){
            if(tsnarf)
                free(tsnarf);	/* collision, but OK */
            ntsnarf = 0;
            tsnarf = malloc(1);
        }
        break;
    case Qwctl:
        if(x->mode==OREAD || x->mode==ORDWR){
            /*
             * It would be much nicer to implement fan-out for wctl reads,
             * so multiple people can see the resizings, but rio just isn't
             * structured for that.  It's structured for /dev/cons, which gives
             * alternate data to alternate readers.  So to keep things sane for
             * wctl, we compromise and give an error if two people try to
             * open it.  Apologies.
             */
            if(w->wctlopen){
                filsysrespond(x->fs, x, &t, Einuse);
                return;
            }
            w->wctlopen = TRUE;
            w->wctlready = 1;
            wsendctlmesg(w, Wakeup, ZR, nil);
        }
        break;
    }
    t.qid = x->f->qid;
    t.iounit = messagesize-IOHDRSZ;
    x->f->open = TRUE;
    x->f->mode = x->mode;
    filsysrespond(x->fs, x, &t, nil);
}
@

<<function xfidclose>>=
void
xfidclose(Xfid *x)
{
    Fcall t;
    Window *w;
    int nb, nulls;

    w = x->f->w;
    switch(FILE(x->f->qid)){
    case Qconsctl:
        if(w->rawing){
            w->rawing = FALSE;
            wsendctlmesg(w, Rawoff, ZR, nil);
        }
        if(w->holding){
            w->holding = FALSE;
            wsendctlmesg(w, Holdoff, ZR, nil);
        }
        w->ctlopen = FALSE;
        break;
    case Qcursor:
        w->cursorp = nil;
        wsetcursor(w, FALSE);
        break;
    case Qmouse:
        w->resized = FALSE;
        w->mouseopen = FALSE;
        if(w->i != nil)
            wsendctlmesg(w, Refresh, w->i->r, nil);
        break;
    /* odd behavior but really ok: replace snarf buffer when /dev/snarf is closed */
    case Qsnarf:
        if(x->f->mode==ORDWR || x->f->mode==OWRITE){
            snarf = runerealloc(snarf, ntsnarf+1);
            cvttorunes(tsnarf, ntsnarf, snarf, &nb, &nsnarf, &nulls);
            free(tsnarf);
            tsnarf = nil;
            ntsnarf = 0;
        }
        break;
    case Qwctl:
        if(x->f->mode==OREAD || x->f->mode==ORDWR)
            w->wctlopen = FALSE;
        break;
    }
    wclose(w);
    filsysrespond(x->fs, x, &t, nil);
}
@

<<enum _anon_ (windows/rio/xfid.c)2>>=
enum { CWdata, CWflush, NCW };
@

<<function xfidwrite>>=
void
xfidwrite(Xfid *x)
{
    Fcall fc;
    int c, cnt, qid, nb, off, nr;
    char buf[256], *p;
    Point pt;
    Window *w;
    Rune *r;
    Conswritemesg cwm;
    Stringpair pair;
    Alt alts[NCW+1];

    w = x->f->w;
    if(w->deleted){
        filsysrespond(x->fs, x, &fc, Edeleted);
        return;
    }
    qid = FILE(x->f->qid);
    cnt = x->count;
    off = x->offset;
    x->data[cnt] = 0;
    switch(qid){
    case Qcons:
        nr = x->f->nrpart;
        if(nr > 0){
            memmove(x->data+nr, x->data, cnt);	/* there's room: see malloc in filsysproc */
            memmove(x->data, x->f->rpart, nr);
            cnt += nr;
            x->f->nrpart = 0;
        }
        r = runemalloc(cnt);
        cvttorunes(x->data, cnt-UTFmax, r, &nb, &nr, nil);
        /* approach end of buffer */
        while(fullrune(x->data+nb, cnt-nb)){
            c = nb;
            nb += chartorune(&r[nr], x->data+c);
            if(r[nr])
                nr++;
        }
        if(nb < cnt){
            memmove(x->f->rpart, x->data+nb, cnt-nb);
            x->f->nrpart = cnt-nb;
        }
        x->flushtag = x->tag;

        alts[CWdata].c = w->conswrite;
        alts[CWdata].v = &cwm;
        alts[CWdata].op = CHANRCV;
        alts[CWflush].c = x->flushc;
        alts[CWflush].v = nil;
        alts[CWflush].op = CHANRCV;
        alts[NCW].op = CHANEND;
    
        switch(alt(alts)){
        case CWdata:
            break;
        case CWflush:
            filsyscancel(x);
            return;
        }

        /* received data */
        x->flushtag = -1;
        if(x->flushing){
            recv(x->flushc, nil);	/* wake up flushing xfid */
            pair.s = runemalloc(1);
            pair.ns = 0;
            send(cwm.cw, &pair);		/* wake up window with empty data */
            filsyscancel(x);
            return;
        }
        qlock(&x->active);
        pair.s = r;
        pair.ns = nr;
        send(cwm.cw, &pair);
        fc.count = x->count;
        filsysrespond(x->fs, x, &fc, nil);
        qunlock(&x->active);
        return;

    case Qconsctl:
        if(strncmp(x->data, "holdon", 6)==0){
            if(w->holding++ == 0)
                wsendctlmesg(w, Holdon, ZR, nil);
            break;
        }
        if(strncmp(x->data, "holdoff", 7)==0 && w->holding){
            if(--w->holding == FALSE)
                wsendctlmesg(w, Holdoff, ZR, nil);
            break;
        }
        if(strncmp(x->data, "rawon", 5)==0){
            if(w->holding){
                w->holding = FALSE;
                wsendctlmesg(w, Holdoff, ZR, nil);
            }
            if(w->rawing++ == 0)
                wsendctlmesg(w, Rawon, ZR, nil);
            break;
        }
        if(strncmp(x->data, "rawoff", 6)==0 && w->rawing){
            if(--w->rawing == 0)
                wsendctlmesg(w, Rawoff, ZR, nil);
            break;
        }
        filsysrespond(x->fs, x, &fc, "unknown control message");
        return;

    case Qcursor:
        if(cnt < 2*4+2*2*16)
            w->cursorp = nil;
        else{
            w->cursor.offset.x = BGLONG(x->data+0*4);
            w->cursor.offset.y = BGLONG(x->data+1*4);
            memmove(w->cursor.clr, x->data+2*4, 2*2*16);
            w->cursorp = &w->cursor;
        }
        wsetcursor(w, !sweeping);
        break;

    case Qlabel:
        if(off != 0){
            filsysrespond(x->fs, x, &fc, "non-zero offset writing label");
            return;
        }
        free(w->label);
        w->label = emalloc(cnt+1);
        memmove(w->label, x->data, cnt);
        w->label[cnt] = 0;
        break;

    case Qmouse:
        if(w!=input || Dx(w->screenr)<=0)
            break;
        if(x->data[0] != 'm'){
            filsysrespond(x->fs, x, &fc, Ebadmouse);
            return;
        }
        p = nil;
        pt.x = strtoul(x->data+1, &p, 0);
        if(p == nil){
            filsysrespond(x->fs, x, &fc, Eshort);
            return;
        }
        pt.y = strtoul(p, nil, 0);
        if(w==input && wpointto(mouse->xy)==w)
            wsendctlmesg(w, Movemouse, Rpt(pt, pt), nil);
        break;

    case Qsnarf:
        /* always append only */
        if(ntsnarf > MAXSNARF){	/* avoid thrashing when people cut huge text */
            filsysrespond(x->fs, x, &fc, Elong);
            return;
        }
        tsnarf = erealloc(tsnarf, ntsnarf+cnt+1);	/* room for NUL */
        memmove(tsnarf+ntsnarf, x->data, cnt);
        ntsnarf += cnt;
        snarfversion++;
        break;

    case Qwdir:
        if(cnt == 0)
            break;
        if(x->data[cnt-1] == '\n'){
            if(cnt == 1)
                break;
            x->data[cnt-1] = '\0';
        }
        /* assume data comes in a single write */
        /*
          * Problem: programs like dossrv, ftp produce illegal UTF;
          * we must cope by converting it first.
          */
        snprint(buf, sizeof buf, "%.*s", cnt, x->data);
        if(buf[0] == '/'){
            free(w->dir);
            w->dir = estrdup(buf);
        }else{
            p = emalloc(strlen(w->dir) + 1 + strlen(buf) + 1);
            sprint(p, "%s/%s", w->dir, buf);
            free(w->dir);
            w->dir = cleanname(p);
        }
        break;

    case Qkbdin:
        keyboardsend(x->data, cnt);
        break;

    case Qwctl:
        if(writewctl(x, buf) < 0){
            filsysrespond(x->fs, x, &fc, buf);
            return;
        }
        flushimage(display, 1);
        break;

    default:
        fprint(2, buf, "unknown qid %d in write\n", qid);
        sprint(buf, "unknown qid in write");
        filsysrespond(x->fs, x, &fc, buf);
        return;
    }
    fc.count = cnt;
    filsysrespond(x->fs, x, &fc, nil);
}
@

<<function readwindow>>=
int
readwindow(Image *i, char *t, Rectangle r, int offset, int n)
{
    int ww, y;

    offset -= 5*12;
    ww = bytesperline(r, screen->depth);
    r.min.y += offset/ww;
    if(r.min.y >= r.max.y)
        return 0;
    y = r.min.y + n/ww;
    if(y < r.max.y)
        r.max.y = y;
    if(r.max.y <= r.min.y)
        return 0;
    return unloadimage(i, r, (uchar*)t, n);
}
@

<<enum _anon_ (windows/rio/xfid.c)3>>=
enum { CRdata, CRflush, NCR };
@

<<enum _anon_ (windows/rio/xfid.c)4>>=
enum { MRdata, MRflush, NMR };
@

<<enum _anon_ (windows/rio/xfid.c)5>>=
enum { WCRdata, WCRflush, NWCR };
@

<<function xfidread>>=
void
xfidread(Xfid *x)
{
    Fcall fc;
    int n, off, cnt, c;
    uint qid;
    char buf[128], *t;
    char cbuf[30];
    Window *w;
    Mouse ms;
    Rectangle r;
    Image *i;
    Channel *c1, *c2;	/* chan (tuple(char*, int)) */
    Consreadmesg crm;
    Mousereadmesg mrm;
    Consreadmesg cwrm;
    Stringpair pair;
    Alt alts[NCR+1];

    w = x->f->w;
    if(w->deleted){
        filsysrespond(x->fs, x, &fc, Edeleted);
        return;
    }
    qid = FILE(x->f->qid);
    off = x->offset;
    cnt = x->count;
    switch(qid){
    case Qcons:
        x->flushtag = x->tag;

        alts[CRdata].c = w->consread;
        alts[CRdata].v = &crm;
        alts[CRdata].op = CHANRCV;
        alts[CRflush].c = x->flushc;
        alts[CRflush].v = nil;
        alts[CRflush].op = CHANRCV;
        alts[NMR].op = CHANEND;

        switch(alt(alts)){
        case CRdata:
            break;
        case CRflush:
            filsyscancel(x);
            return;
        }

        /* received data */
        x->flushtag = -1;
        c1 = crm.c1;
        c2 = crm.c2;
        t = malloc(cnt+UTFmax+1);	/* room to unpack partial rune plus */
        pair.s = t;
        pair.ns = cnt;
        send(c1, &pair);
        if(x->flushing){
            recv(x->flushc, nil);	/* wake up flushing xfid */
            recv(c2, nil);			/* wake up window and toss data */
            free(t);
            filsyscancel(x);
            return;
        }
        qlock(&x->active);
        recv(c2, &pair);
        fc.data = pair.s;
        fc.count = pair.ns;
        filsysrespond(x->fs, x, &fc, nil);
        free(t);
        qunlock(&x->active);
        break;

    case Qlabel:
        n = strlen(w->label);
        if(off > n)
            off = n;
        if(off+cnt > n)
            cnt = n-off;
        fc.data = w->label+off;
        fc.count = cnt;
        filsysrespond(x->fs, x, &fc, nil);
        break;

    case Qmouse:
        x->flushtag = x->tag;

        alts[MRdata].c = w->mouseread;
        alts[MRdata].v = &mrm;
        alts[MRdata].op = CHANRCV;
        alts[MRflush].c = x->flushc;
        alts[MRflush].v = nil;
        alts[MRflush].op = CHANRCV;
        alts[NMR].op = CHANEND;

        switch(alt(alts)){
        case MRdata:
            break;
        case MRflush:
            filsyscancel(x);
            return;
        }

        /* received data */
        x->flushtag = -1;
        if(x->flushing){
            recv(x->flushc, nil);		/* wake up flushing xfid */
            recv(mrm.cm, nil);			/* wake up window and toss data */
            filsyscancel(x);
            return;
        }
        qlock(&x->active);
        recv(mrm.cm, &ms);
        c = 'm';
        if(w->resized)
            c = 'r';
        n = sprint(buf, "%c%11d %11d %11d %11ld ", c, ms.xy.x, ms.xy.y, ms.buttons, ms.msec);
        w->resized = 0;
        fc.data = buf;
        fc.count = min(n, cnt);
        filsysrespond(x->fs, x, &fc, nil);
        qunlock(&x->active);
        break;

    case Qcursor:
        filsysrespond(x->fs, x, &fc, "cursor read not implemented");
        break;

    /* The algorithm for snarf and text is expensive but easy and rarely used */
    case Qsnarf:
        getsnarf();
        if(nsnarf)
            t = runetobyte(snarf, nsnarf, &n);
        else {
            t = nil;
            n = 0;
        }
        goto Text;

    case Qtext:
        t = wcontents(w, &n);
        goto Text;

    Text:
        if(off > n){
            off = n;
            cnt = 0;
        }
        if(off+cnt > n)
            cnt = n-off;
        fc.data = t+off;
        fc.count = cnt;
        filsysrespond(x->fs, x, &fc, nil);
        free(t);
        break;

    case Qwdir:
        t = estrdup(w->dir);
        n = strlen(t);
        goto Text;

    case Qwinid:
        n = sprint(buf, "%11d ", w->id);
        t = estrdup(buf);
        goto Text;


    case Qwinname:
        n = strlen(w->name);
        if(n == 0){
            filsysrespond(x->fs, x, &fc, "window has no name");
            break;
        }
        t = estrdup(w->name);
        goto Text;

    case Qwindow:
        i = w->i;
        if(i == nil || Dx(w->screenr)<=0){
            filsysrespond(x->fs, x, &fc, Enowindow);
            return;
        }
        r = w->screenr;
        goto caseImage;

    case Qscreen:
        i = display->image;
        if(i == nil){
            filsysrespond(x->fs, x, &fc, "no top-level screen");
            break;
        }
        r = i->r;
        /* fall through */

    caseImage:
        if(off < 5*12){
            n = sprint(buf, "%11s %11d %11d %11d %11d ",
                chantostr(cbuf, screen->chan),
                i->r.min.x, i->r.min.y, i->r.max.x, i->r.max.y);
            t = estrdup(buf);
            goto Text;
        }
        t = malloc(cnt);
        fc.data = t;
        n = readwindow(i, t, r, off, cnt);	/* careful; fc.count is unsigned */
        if(n < 0){
            buf[0] = 0;
            errstr(buf, sizeof buf);
            filsysrespond(x->fs, x, &fc, buf);
        }else{
            fc.count = n;
            filsysrespond(x->fs, x, &fc, nil);
        }
        free(t);
        return;

    case Qwctl:	/* read returns rectangle, hangs if not resized */
        if(cnt < 4*12){
            filsysrespond(x->fs, x, &fc, Etooshort);
            break;
        }
        x->flushtag = x->tag;

        alts[WCRdata].c = w->wctlread;
        alts[WCRdata].v = &cwrm;
        alts[WCRdata].op = CHANRCV;
        alts[WCRflush].c = x->flushc;
        alts[WCRflush].v = nil;
        alts[WCRflush].op = CHANRCV;
        alts[NMR].op = CHANEND;

        switch(alt(alts)){
        case WCRdata:
            break;
        case WCRflush:
            filsyscancel(x);
            return;
        }

        /* received data */
        x->flushtag = -1;
        c1 = cwrm.c1;
        c2 = cwrm.c2;
        t = malloc(cnt+1);	/* be sure to have room for NUL */
        pair.s = t;
        pair.ns = cnt+1;
        send(c1, &pair);
        if(x->flushing){
            recv(x->flushc, nil);	/* wake up flushing xfid */
            recv(c2, nil);			/* wake up window and toss data */
            free(t);
            filsyscancel(x);
            return;
        }
        qlock(&x->active);
        recv(c2, &pair);
        fc.data = pair.s;
        if(pair.ns > cnt)
            pair.ns = cnt;
        fc.count = pair.ns;
        filsysrespond(x->fs, x, &fc, nil);
        free(t);
        qunlock(&x->active);
        break;

    default:
        fprint(2, "unknown qid %d in read\n", qid);
        sprint(buf, "unknown qid in read");
        filsysrespond(x->fs, x, &fc, buf);
        break;
    }
}
@


%-------------------------------------------------------------

<<windows/rio/xfid.c>>=
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <thread.h>
#include <cursor.h>
#include <mouse.h>
#include <keyboard.h>
#include <frame.h>
#include <fcall.h>
#include <plumb.h>

#include "dat.h"
#include "fns.h"

void		xfidctl(void*);

<<constant MAXSNARF>>

<<global Einuse>>
<<global Edeleted>>
<<global Ebadreq>>
<<global Etooshort>>
<<global Ebadtile>>
<<global Eshort>>
<<global Elong>>
<<global Eunkid>>
<<global Ebadrect>>
<<global Ewindow>>
<<global Enowindow>>
<<global Ebadmouse>>
<<global Ebadwrect>>
<<global Ebadoffset>>
extern char Eperm[];

<<global xfidfree>>
<<global xfid>>
<<global cxfidalloc>>
<<global cxfidfree>>

<<global tsnarf>>
<<global ntsnarf>>

<<enum _anon_ (windows/rio/xfid.c)>>

<<function xfidallocthread>>

<<function xfidinit>>

<<function xfidctl>>

<<function xfidflush>>

<<function xfidattach>>

<<function xfidopen>>

<<function xfidclose>>

<<enum _anon_ (windows/rio/xfid.c)2>>

<<function xfidwrite>>

<<function readwindow>>

<<enum _anon_ (windows/rio/xfid.c)3>>
<<enum _anon_ (windows/rio/xfid.c)4>>
<<enum _anon_ (windows/rio/xfid.c)5>>

<<function xfidread>>
@


\section{[[windows/apps/]]}

\subsection*{[[windows/apps/lens.c]]}

<<enum _anon_ (windows/apps/lens.c)>>=
enum {
    Edge = 5,
    Maxmag = 16
};
@

<<enum _anon_ (windows/apps/lens.c)2>>=
enum {
    Mzoom,
    Munzoom,
    Mgrid,
    Mredraw,
    Mexit
};
@

<<global menustr>>=
static char *menustr[] = {
    "zoom",
    "unzoom",
    "grid",
    "redraw",
    "exit",
    nil
};
@

<<global menu (windows/apps/lens.c)>>=
static Menu menu = {
    menustr,
    nil,
    -1
};
@

<<global lastp>>=
static Point lastp;
@

<<global red (windows/apps/lens.c)>>=
static Image *red;
@

<<global tmp (windows/apps/lens.c)>>=
static Image *tmp;
@

<<global grid>>=
static Image *grid;
@

<<global chequer>>=
static Image *chequer;
@

<<global screenfd>>=
static int	screenfd;
@

<<global mag>>=
static int	mag = 4;
@

<<global showgrid>>=
static int	showgrid = 0;
@

<<global screenr>>=
static Rectangle	screenr;
@

<<global screenbuf>>=
static uchar	*screenbuf;
@

<<function drawit>>=
void
drawit(void)
{
    Rectangle r;
    border(screen, screen->r, Edge, red, ZP);
    magnify();
    r = insetrect(screen->r, Edge);
    draw(screen, r, tmp, nil, tmp->r.min);
    flushimage(display, 1);
}
@

<<global bypp>>=
static int bypp;
@

<<function main (windows/apps/lens.c)>>=
void
main(int argc, char *argv[])
{
    Event e;
    char buf[5*12];
    ulong chan;
    int d;

    USED(argc, argv);
    if(initdraw(nil, nil, "lens") < 0){
        fprint(2, "lens: initdraw failed: %r\n");
        exits("initdraw");
    }
    einit(Emouse|Ekeyboard);
    red = allocimage(display, Rect(0, 0, 1, 1), CMAP8, 1, DRed);
    chequer = allocimage(display, Rect(0, 0, 2, 2), GREY1, 1, DBlack);
    draw(chequer, Rect(0, 0, 1, 1), display->white, nil, ZP);
    draw(chequer, Rect(1, 1, 2, 2), display->white, nil, ZP);
    lastp = divpt(addpt(screen->r.min, screen->r.max), 2);
    screenfd = open("/dev/screen", OREAD);
    if(screenfd < 0){
        fprint(2, "lens: can't open /dev/screen: %r\n");
        exits("screen");
    }
    if(read(screenfd, buf, sizeof buf) != sizeof buf){
        fprint(2, "lens: can't read /dev/screen: %r\n");
        exits("screen");
    }
    chan = strtochan(buf);
    d = chantodepth(chan);
    if(d < 8){
        fprint(2, "lens: can't handle screen format %11.11s\n", buf);
        exits("screen");
    }
    bypp = d/8;
    screenr.min.x = atoi(buf+1*12);
    screenr.min.y = atoi(buf+2*12);
    screenr.max.x = atoi(buf+3*12);
    screenr.max.y = atoi(buf+4*12);
    screenbuf = malloc(bypp*Dx(screenr)*Dy(screenr));
    if(screenbuf == nil){
        fprint(2, "lens: buffer malloc failed: %r\n");
        exits("malloc");
    }
    eresized(0);

    for(;;)
        switch(event(&e)){
        case Ekeyboard:
            switch(e.kbdc){
            case 'q':
            case 0x7f:
            case '\04':
            caseexit:
                exits(nil);
            case '=':
            case '+':
            casezoom:
                if(mag < Maxmag){
                    mag++;
                    makegrid();
                    drawit();
                }
                break;
            case 'g':
            casegrid:
                showgrid = !showgrid;
                makegrid();
                drawit();
                break;
            case '-':
            case '_':
            caseunzoom:
                if(mag > 1){
                    mag--;
                    makegrid();
                    drawit();
                }
                break;
            case '.':
            case ' ':
            caseredraw:
                drawit();
                break;
            case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9': case'0':
                mag = e.kbdc-'0';
                if(mag == 0)
                    mag = 10;
                makegrid();
                drawit();
                break;
            }
            break;
        case Emouse:
            if(e.mouse.buttons & 1){
                lastp = e.mouse.xy;
                drawit();
            }
            if(e.mouse.buttons & 4)
                switch(emenuhit(3, &e.mouse, &menu)){
                case Mzoom:
                    goto casezoom;
                case Munzoom:
                    goto caseunzoom;
                case Mgrid:
                    goto casegrid;
                case Mredraw:
                    goto caseredraw;
                case Mexit:
                    goto caseexit;
                }
            break;
        }
}
@

<<function makegrid>>=
void
makegrid(void)
{
    int m;
    if (grid != nil) {
        freeimage(grid);
        grid = nil;
    }
    if (showgrid) {
        m = mag;
        if (m < 5)
            m *= 10;
        grid = allocimage(display, Rect(0, 0, m, m),
            CHAN2(CGrey, 8, CAlpha, 8), 1, DTransparent);
        if (grid != nil){
            draw(grid, Rect(0, 0, m, 1), chequer, nil, ZP);
            draw(grid, Rect(0, 1, 1, m), chequer, nil, ZP);
        }
    }
}
@

<<function eresized (windows/apps/lens.c)>>=
void
eresized(int new)
{
    if(new && getwindow(display, Refnone) < 0){
        fprint(2, "lens: can't reattach to window: %r\n");
        exits("attach");
    }
    freeimage(tmp);
    tmp = allocimage(display, Rect(0, 0, Dx(screen->r)-Edge, Dy(screen->r)-Edge+Maxmag), screen->chan, 0, DNofill);
    if(tmp == nil){
        fprint(2, "lens: allocimage failed: %r\n");
        exits("allocimage");
    }
    drawit();
}
@

<<function magnify>>=
void
magnify(void)
{
    int x, y, xx, yy, dd, i;
    int dx, dy;
    int xoff, yoff;
    uchar out[8192];
    uchar sp[4];

    dx = (Dx(tmp->r)+mag-1)/mag;
    dy = (Dy(tmp->r)+mag-1)/mag;
    xoff = lastp.x-Dx(tmp->r)/(mag*2);
    yoff  = lastp.y-Dy(tmp->r)/(mag*2);

    yy = yoff;
    dd = dy;
    if(yy < 0){
        dd += dy;
        yy = 0;
    }
    if(yy+dd > Dy(screenr))
        dd = Dy(screenr)-yy;
    seek(screenfd, 5*12+bypp*yy*Dx(screenr), 0);
    if(readn(screenfd, screenbuf+bypp*yy*Dx(screenr), bypp*Dx(screenr)*dd) != bypp*Dx(screenr)*dd){
        fprint(2, "lens: can't read screen: %r\n");
        return;
    }

    for(y=0; y<dy; y++){
        yy = yoff+y;
        if(yy>=0 && yy<Dy(screenr))
            for(x=0; x<dx; x++){
                xx = xoff+x;
                if(xx>=0 && xx<Dx(screenr))	/* snarf pixel at xx, yy */
                    for(i=0; i<bypp; i++)
                        sp[i] = screenbuf[bypp*(yy*Dx(screenr)+xx)+i];
                else
                    sp[0] = sp[1] = sp[2] = sp[3] = 0;

                for(xx=0; xx<mag; xx++)
                    if(x*mag+xx < tmp->r.max.x)
                        for(i=0; i<bypp; i++)
                            out[(x*mag+xx)*bypp+i] = sp[i];
            }
        else
            memset(out, 0, bypp*Dx(tmp->r));
        for(yy=0; yy<mag && y*mag+yy<Dy(tmp->r); yy++){
            werrstr("no error");
            if(loadimage(tmp, Rect(0, y*mag+yy, Dx(tmp->r), y*mag+yy+1), out, bypp*Dx(tmp->r)) != bypp*Dx(tmp->r)){
                exits("load");
            }
        }
    }
    if (showgrid && mag && grid)
        draw(tmp, tmp->r, grid, nil, mulpt(Pt(xoff, yoff), mag));
}
@


%-------------------------------------------------------------

<<windows/apps/lens.c>>=
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <event.h>

<<enum _anon_ (windows/apps/lens.c)>>

<<enum _anon_ (windows/apps/lens.c)2>>

<<global menustr>>

<<global menu (windows/apps/lens.c)>>

<<global lastp>>
<<global red (windows/apps/lens.c)>>
<<global tmp (windows/apps/lens.c)>>
<<global grid>>
<<global chequer>>
<<global screenfd>>
<<global mag>>
<<global showgrid>>
<<global screenr>>
<<global screenbuf>>

void	magnify(void);
void makegrid(void);

<<function drawit>>

<<global bypp>>

<<function main (windows/apps/lens.c)>>

<<function makegrid>>

<<function eresized (windows/apps/lens.c)>>

<<function magnify>>
@


\subsection*{[[windows/apps/screenlock.c]]}

<<global pic>>=
static char pic[] = "/lib/bunny.bit";
@

<<global vgactl>>=
static int vgactl;
@

<<global debug>>=
static int debug;
@

<<global doblank>>=
static int doblank;
@

<<global chatty>>=
static int chatty = 0;
@

<<global user>>=
static char user[256];
@

<<function blankscreen>>=
static void
blankscreen(int blank)
{
    if(vgactl < 0)
        return;
    seek(vgactl, 0, 0);
    if(fprint(vgactl, blank? "blank": "unblank") < 0)
        fprint(2, "blankscreen: can't blank: %r\n");
}
@

<<function error (windows/apps/screenlock.c)>>=
static void
error(char *fmt, ...)
{
    Fmt f;
    char buf[64];
    va_list arg;

    fmtfdinit(&f, 1, buf, sizeof buf);
    fmtprint(&f, "screenlock: ");
    va_start(arg, fmt);
    fmtvprint(&f, fmt, arg);
    va_end(arg);
    fmtprint(&f, "\n");
    fmtfdflush(&f);
    threadexitsall("fatal error");
}
@

<<function usage (windows/apps/screenlock.c)>>=
static void
usage(void)
{
    fprint(2, "usage: %s\n", argv0);
    exits("usage");
}
@

<<function readfile>>=
static void
readfile(char *name, char *buf, int nbuf, int addnul)
{
    int fd;

    fd = open(name, OREAD);
    if(fd == -1)
        error("%s - can't open: %r", name);
    nbuf = read(fd, buf, nbuf-addnul);
    close(fd);
    if(nbuf == -1)
        error("%s - can't can't read: %r", name);
    if(addnul)
        buf[nbuf] = '\0';
}
@

<<function readline>>=
static void
readline(char *buf, int nbuf)
{
    char c;
    int i;

    i = 0;
    while(i < nbuf-1)
        if(read(0, &c, 1) != 1 || c == '\04' || c == '\177'){
            i = 0;
            break;
        } else if(c == '\n')
            break;
        else if(c == '\b' && i > 0)
            --i;
        else if(c == ('u' & 037))
            i = 0;
        else
            buf[i++] = c;
    buf[i] = '\0';
}
@

<<function checkpassword>>=
static void
checkpassword(void)
{
    int fd, consctl, must;
    char buf[256];
    AuthInfo *ai;
    static int opened;

    must = 1;
    if(!opened){
        fd = open("/dev/cons", OREAD);
        if(fd == -1)
            error("can't open cons: %r");
        dup(fd, 0);
        close(fd);
        fd = open("/dev/cons", OWRITE);
        if(fd == -1)
            error("can't open cons: %r");
        dup(fd, 1);
        dup(1, 2);
        close(fd);
        consctl = open("/dev/consctl", OWRITE);
        if(consctl == -1)
            error("can't open consctl: %r");
        if(write(consctl, "rawon", 5) != 5)
            error("can't turn off echo\n");
        opened = 1;
    }

    for(;;){
        if(chatty || !must)
            fprint(2, "%s's screenlock password: ", user);
        memset(buf, 0, sizeof buf);
        readline(buf, sizeof buf);
        blankscreen(0);
        if(chatty || !must)
            fprint(2, "\n");
        if(buf[0] == '\0' || buf[0] == '\04'){
            if(must)
                continue;
            error("no password typed");
        }

        /* authenticate */
        ai = auth_userpasswd(user, buf);
        if(ai != nil && ai->cap != nil)
            break;
        auth_freeAI(ai);

        if(chatty || !must)
            fprint(2, "password mismatch\n");
        doblank = 1;
    }
    memset(buf, 0, sizeof buf);
    blankscreen(0);
}
@

<<function blanker>>=
static void
blanker(void *)
{
    int tics;

    tics = 0;
    for(;;){
        if(doblank > 0){
            doblank = 0;
            tics = 10;
        }
        if(tics > 0 && --tics == 0)
            blankscreen(1);
        sleep(1000);
    }
}
@

<<function grabmouse>>=
static void
grabmouse(void*)
{
    int fd, x, y;
    char ibuf[256], obuf[256];

    if(debug)
        return;
    fd = open("/dev/mouse", ORDWR);
    if(fd < 0)
        error("can't open /dev/mouse: %r");

    snprint(obuf, sizeof obuf, "m %d %d",
        screen->r.min.x + Dx(screen->r)/2,
        screen->r.min.y + Dy(screen->r)/2);
    while(read(fd, ibuf, sizeof ibuf) > 0){
        ibuf[12] = 0;
        ibuf[24] = 0;
        x = atoi(ibuf+1);
        y = atoi(ibuf+13);
        if(x != screen->r.min.x + Dx(screen->r)/2 ||
           y != screen->r.min.y + Dy(screen->r)/2){
            fprint(fd, "%s", obuf);
            doblank = 1;
        }
    }
}
@

<<function screenstring>>=
/* lay down text at `p' */
static void
screenstring(Point p, char *s)
{
    string(screen, p, screen->display->white, ZP, font, s);
    flushimage(display, 1);
}
@

<<function lockscreen>>=
static void
lockscreen(void)
{
    enum { Nfld = 5, Fldlen = 12, Cursorlen = 2*4 + 2*2*16, };
    char *s;
    char buf[Nfld*Fldlen], *flds[Nfld], newcmd[128], cbuf[Cursorlen];
    int fd, dx, dy;
    Image *i;
    Point p;
    Rectangle r;
    Tm *tm;

    fd = open("/dev/screen", OREAD);
    if(fd < 0)
        error("can't open /dev/screen: %r");
    if(read(fd, buf, Nfld*Fldlen) != Nfld*Fldlen)
        error("can't read /dev/screen: %r");
    close(fd);
    buf[sizeof buf-1] = 0;
    if(tokenize(buf, flds, Nfld) != Nfld)
        error("can't tokenize /dev/screen header");
    snprint(newcmd, sizeof newcmd, "-r %s %s %d %d",
        flds[1], flds[2], atoi(flds[3]) - 1, atoi(flds[4]) - 1);
    newwindow(newcmd);
    if (initdraw(nil, nil, "screenlock") < 0)
        sysfatal("initdraw failed");
    if(display == nil)
        error("no display");

    /* screen is now open and covered.  grab mouse and hold on tight */
    procrfork(grabmouse, nil, 4096, RFFDG);
    procrfork(blanker, nil, 4096, RFFDG);
    fd = open(pic, OREAD);
    if(fd > 0){
        i = readimage(display, fd, 0);
        if(i){
    r = screen->r;
            p = Pt(r.max.x / 2, r.max.y * 2 / 3); 
            dx = (Dx(screen->r) - Dx(i->r)) / 2;
            r.min.x += dx;
            r.max.x -= dx;
            dy = (Dy(screen->r) - Dy(i->r)) / 2;
            r.min.y += dy;
            r.max.y -= dy;
            draw(screen, screen->r, display->black, nil, ZP);
            draw(screen, r, i, nil, i->r.min);
            flushimage(display, 1);
        }
        close(fd);

        /* identify the user on screen, centered */
        tm = localtime(time(0));
        s = smprint("user %s at %d:%02.2d", getuser(), tm->hour, tm->min);
        p = subpt(p, Pt(stringwidth(font, "m") * strlen(s) / 2, 0));
        screenstring(p, s);
    }

    /* clear the cursor */
    fd = open("/dev/cursor", OWRITE);
    if(fd > 0){
        memset(cbuf, 0, sizeof cbuf);
        write(fd, cbuf, sizeof cbuf);
        /* leave it open */
    }
}
@

<<function threadmain (windows/apps/screenlock.c)>>=
void
threadmain(int argc, char *argv[])
{
    readfile("#c/user", user, sizeof user, 1);

    if((vgactl = open("/dev/vgactl", OWRITE)) < 0)
        vgactl = open("#v/vgactl", OWRITE);

    ARGBEGIN{
    case 'd':
        debug++;
        break;
    default:
        usage();
    }ARGEND

    if(argc != 0)
        usage();

    doblank = 1;
    lockscreen();
    checkpassword();
    threadexitsall(nil);
}
@


%-------------------------------------------------------------

<<windows/apps/screenlock.c>>=
/* screenlock - lock a terminal */
#include <u.h>
#include <libc.h>
#include <libsec.h>
#include <draw.h>
#include <thread.h>
#include <auth.h>

<<global pic>>

<<global vgactl>>
<<global debug>>
<<global doblank>>
<<global chatty>>

<<global user>>

<<function blankscreen>>

<<function error (windows/apps/screenlock.c)>>

<<function usage (windows/apps/screenlock.c)>>


<<function readfile>>

<<function readline>>

<<function checkpassword>>

<<function blanker>>

<<function grabmouse>>

<<function screenstring>>

<<function lockscreen>>

<<function threadmain (windows/apps/screenlock.c)>>
@


\subsection*{[[windows/apps/statusbar.c]]}

<<enum _anon_ (windows/apps/statusbar.c)>>=
enum {PNCTL=3};
@

<<global nokill>>=
static int nokill;
@

<<global textmode>>=
static int textmode;
@

<<global title>>=
static char *title;
@

<<global light>>=
static Image *light;
@

<<global dark>>=
static Image *dark;
@

<<global text (windows/apps/statusbar.c)>>=
static Image *text;
@

<<function initcolor>>=
static void
initcolor(void)
{
    text = display->black;
    light = allocimagemix(display, DPalegreen, DWhite);
    dark = allocimage(display, Rect(0,0,1,1), CMAP8, 1, DDarkgreen);
}
@

<<global rbar>>=
static Rectangle rbar;
@

<<global ptext>>=
static Point ptext;
@

<<global last>>=
static int last;
@

<<global lastp (windows/apps/statusbar.c)>>=
static int lastp = -1;
@

<<global backup>>=
static char backup[80];
@

<<function drawbar>>=
void
drawbar(void)
{
    int i, j;
    int p;
    char buf[400], bar[200];
    static char lastbar[200];

    if(n > d || n < 0 || d <= 0)
        return;

    i = (Dx(rbar)*n)/d;
    p = (n*100LL)/d;

    if(textmode){
        if(Dx(rbar) > 150){
            rbar.min.x = 0;
            rbar.max.x = 150;
            return;
        }
        bar[0] = '|';
        for(j=0; j<i; j++)
            bar[j+1] = '#';
        for(; j<Dx(rbar); j++)
            bar[j+1] = '-';
        bar[j++] = '|';
        bar[j++] = ' ';
        sprint(bar+j, "%3d%% ", p);
        for(i=0; bar[i]==lastbar[i] && bar[i]; i++)
            ;
        memset(buf, '\b', strlen(lastbar)-i);
        strcpy(buf+strlen(lastbar)-i, bar+i);
        if(buf[0])
            write(1, buf, strlen(buf));
        strcpy(lastbar, bar);
        return;
    }

    if(lastp == p && last == i)
        return;

    if(lastp != p){
        sprint(buf, "%d%%", p);
        
        stringbg(screen, addpt(screen->r.min, Pt(Dx(rbar)-30, 4)), text, ZP, display->defaultfont, buf, light, ZP);
        lastp = p;
    }

    if(last != i){
        if(i > last)
            draw(screen, Rect(rbar.min.x+last, rbar.min.y, rbar.min.x+i, rbar.max.y),
                dark, nil, ZP);
        else
            draw(screen, Rect(rbar.min.x+i, rbar.min.y, rbar.min.x+last, rbar.max.y),
                light, nil, ZP);
        last = i;
    }
    flushimage(display, 1);
}
@

<<function eresized (windows/apps/statusbar.c)>>=
void
eresized(int new)
{
    Point p, q;
    Rectangle r;

    if(new && getwindow(display, Refnone) < 0)
        fprint(2,"can't reattach to window");

    r = screen->r;
    draw(screen, r, light, nil, ZP);
    p = string(screen, addpt(r.min, Pt(4,4)), text, ZP,
        display->defaultfont, title);

    p.x = r.min.x+4;
    p.y += display->defaultfont->height+4;

    q = subpt(r.max, Pt(4,4));
    rbar = Rpt(p, q);

    ptext = Pt(r.max.x-4-stringwidth(display->defaultfont, "100%"), r.min.x+4);
    border(screen, rbar, -2, dark, ZP);
    last = 0;
    lastp = -1;

    drawbar();
}
@

<<function bar>>=
void
bar(Biobuf *b)
{
    char *p, *f[2];
    Event e;
    int k, die, parent, child;

    parent = getpid();

    die = 0;
    if(textmode)
        child = -1;
    else
    switch(child = rfork(RFMEM|RFPROC)) {
    case 0:
        sleep(1000);
        while(!die && (k = eread(Ekeyboard|Emouse, &e))) {
            if(nokill==0 && k == Ekeyboard && (e.kbdc == 0x7F || e.kbdc == 0x03)) { /* del, ctl-c */
                die = 1;
                postnote(PNPROC, parent, "interrupt");
                _exits("interrupt");
            }
        }
        _exits(0);
    }

    while(!die && (p = Brdline(b, '\n'))) {
        p[Blinelen(b)-1] = '\0';
        if(tokenize(p, f, 2) != 2)
            continue;
        n = strtoll(f[0], 0, 0);
        d = strtoll(f[1], 0, 0);
        drawbar();
    }
    postnote(PNCTL, child, "kill");
}
@

<<function usage (windows/apps/statusbar.c)>>=
static void
usage(void)
{
    fprint(2, "usage: aux/statusbar [-kt] [-w minx,miny,maxx,maxy] 'title'\n");
    exits("usage");
}
@

<<function main (windows/apps/statusbar.c)>>=
void
main(int argc, char **argv)
{
    Biobuf b;
    char *p, *q;
    int lfd;

    p = "0,0,200,60";
    
    ARGBEGIN{
    case 'w':
        p = ARGF();
        break;
    case 't':
        textmode = 1;
        break;
    case 'k':
        nokill = 1;
        break;
    default:
        usage();
    }ARGEND;

    if(argc != 1)
        usage();

    title = argv[0];

    lfd = dup(0, -1);

    while(q = strchr(p, ','))
        *q = ' ';
    Binit(&b, lfd, OREAD);
    if(textmode || newwin(p) < 0){
        textmode = 1;
        rbar = Rect(0, 0, 60, 1);
    }else{
        if(initdraw(0, 0, "bar") < 0)
            exits("initdraw");
        initcolor();
        einit(Emouse|Ekeyboard);
        eresized(0);
    }
    bar(&b);

    exits(0);
}
@

<<function rdenv>>=
/* all code below this line should be in the library, but is stolen from colors instead */
static char*
rdenv(char *name)
{
    char *v;
    int fd, size;

    fd = open(name, OREAD);
    if(fd < 0)
        return 0;
    size = seek(fd, 0, 2);
    v = malloc(size+1);
    if(v == 0){
        fprint(2, "%s: can't malloc: %r\n", argv0);
        exits("no mem");
    }
    seek(fd, 0, 0);
    read(fd, v, size);
    v[size] = 0;
    close(fd);
    return v;
}
@

<<function newwin>>=
int
newwin(char *win)
{
    char *srv, *mntsrv;
    char spec[100];
    int srvfd, cons, pid;

    switch(rfork(RFFDG|RFPROC|RFNAMEG|RFENVG|RFNOTEG|RFNOWAIT)){
    case -1:
        fprint(2, "statusbar: can't fork: %r\n");
        return -1;
    case 0:
        break;
    default:
        exits(0);
    }

    srv = rdenv("/env/wsys");
    if(srv == 0){
        mntsrv = rdenv("/mnt/term/env/wsys");
        if(mntsrv == 0){
            fprint(2, "statusbar: can't find $wsys\n");
            return -1;
        }
        srv = malloc(strlen(mntsrv)+10);
        sprint(srv, "/mnt/term%s", mntsrv);
        free(mntsrv);
        pid  = 0;			/* can't send notes to remote processes! */
    }else
        pid = getpid();
    USED(pid);
    srvfd = open(srv, ORDWR);
    free(srv);
    if(srvfd == -1){
        fprint(2, "statusbar: can't open %s: %r\n", srv);
        return -1;
    }
    sprint(spec, "new -r %s", win);
    if(mount(srvfd, -1, "/mnt/wsys", 0, spec) == -1){
        fprint(2, "statusbar: can't mount /mnt/wsys: %r (spec=%s)\n", spec);
        return -1;
    }
    close(srvfd);
    unmount("/mnt/acme", "/dev");
    bind("/mnt/wsys", "/dev", MBEFORE);
    cons = open("/dev/cons", OREAD);
    if(cons==-1){
    NoCons:
        fprint(2, "statusbar: can't open /dev/cons: %r");
        return -1;
    }
    dup(cons, 0);
    close(cons);
    cons = open("/dev/cons", OWRITE);
    if(cons==-1)
        goto NoCons;
    dup(cons, 1);
    dup(cons, 2);
    close(cons);
//	wctlfd = open("/dev/wctl", OWRITE);
    return 0;
}
@

<<function screenrect>>=
Rectangle
screenrect(void)
{
    int fd;
    char buf[12*5];

    fd = open("/dev/screen", OREAD);
    if(fd == -1)
        fd=open("/mnt/term/dev/screen", OREAD);
    if(fd == -1){
        fprint(2, "%s: can't open /dev/screen: %r\n", argv0);
        exits("window read");
    }
    if(read(fd, buf, sizeof buf) != sizeof buf){
        fprint(2, "%s: can't read /dev/screen: %r\n", argv0);
        exits("screen read");
    }
    close(fd);
    return Rect(atoi(buf+12), atoi(buf+24), atoi(buf+36), atoi(buf+48));
}
@

<<function postnote>>=
int
postnote(int group, int pid, char *note)
{
    char file[128];
    int f, r;

    switch(group) {
    case PNPROC:
        sprint(file, "/proc/%d/note", pid);
        break;
    case PNGROUP:
        sprint(file, "/proc/%d/notepg", pid);
        break;
    case PNCTL:
        sprint(file, "/proc/%d/ctl", pid);
        break;
    default:
        return -1;
    }

    f = open(file, OWRITE);
    if(f < 0)
        return -1;

    r = strlen(note);
    if(write(f, note, r) != r) {
        close(f);
        return -1;
    }
    close(f);
    return 0;
}
@


%-------------------------------------------------------------

<<windows/apps/statusbar.c>>=
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <bio.h>
#include <event.h>

<<enum _anon_ (windows/apps/statusbar.c)>>

static char* rdenv(char*);
int newwin(char*);
Rectangle screenrect(void);

<<global nokill>>
<<global textmode>>
<<global title>>

<<global light>>
<<global dark>>
<<global text (windows/apps/statusbar.c)>>

<<function initcolor>>

<<global rbar>>
<<global ptext>>
static vlong n, d;
<<global last>>
<<global lastp (windows/apps/statusbar.c)>>

<<global backup>>

<<function drawbar>>

<<function eresized (windows/apps/statusbar.c)>>

<<function bar>>


<<function usage (windows/apps/statusbar.c)>>

<<function main (windows/apps/statusbar.c)>>


<<function rdenv>>

<<function newwin>>

<<function screenrect>>

<<function postnote>>
@


\subsection*{[[windows/apps/winwatch.c]]}

<<struct Win>>=
struct Win {
    int n;
    int dirty;
    char *label;
    Rectangle r;
};
@

<<global exclude>>=
static Reprog  *exclude  = nil;
@

<<global win>>=
static Win *win;
@

<<global nwin>>=
static int nwin;
@

<<global mwin>>=
static int mwin;
@

<<global onwin>>=
static int onwin;
@

<<global lightblue>>=
static Image *lightblue;
@

<<enum _anon_ (windows/apps/winwatch.c)>>=
enum {
    PAD = 3,
    MARGIN = 5
};
@

<<function erealloc (windows/apps/winwatch.c)>>=
static void*
erealloc(void *v, ulong n)
{
    v = realloc(v, n);
    if(v == nil)
        sysfatal("out of memory reallocating %lud", n);
    return v;
}
@

<<function emalloc (windows/apps/winwatch.c)>>=
static void*
emalloc(ulong n)
{
    void *v;

    v = malloc(n);
    if(v == nil)
        sysfatal("out of memory allocating %lud", n);
    memset(v, 0, n);
    return v;
}
@

<<function estrdup (windows/apps/winwatch.c)>>=
static char*
estrdup(char *s)
{
    int l;
    char *t;

    if (s == nil)
        return nil;
    l = strlen(s)+1;
    t = emalloc(l);
    memcpy(t, s, l);

    return t;
}
@

<<function refreshwin>>=
static void
refreshwin(void)
{
    char label[128];
    int i, fd, lfd, n, nr, nw, m;
    Dir *pd;

    if((fd = open("/dev/wsys", OREAD)) < 0)
        return;

    nw = 0;
/* i'd rather read one at a time but rio won't let me */
    while((nr=dirread(fd, &pd)) > 0){
        for(i=0; i<nr; i++){
            n = atoi(pd[i].name);
            sprint(label, "/dev/wsys/%d/label", n);
            if((lfd = open(label, OREAD)) < 0)
                continue;
            m = read(lfd, label, sizeof(label)-1);
            close(lfd);
            if(m < 0)
                continue;
            label[m] = '\0';
            if(exclude != nil && regexec(exclude,label,nil,0))
                continue;

            if(nw < nwin && win[nw].n == n && strcmp(win[nw].label, label)==0){
                nw++;
                continue;
            }
    
            if(nw < nwin){
                free(win[nw].label);
                win[nw].label = nil;
            }
            
            if(nw >= mwin){
                mwin += 8;
                win = erealloc(win, mwin*sizeof(win[0]));
            }
            win[nw].n = n;
            win[nw].label = estrdup(label);
            win[nw].dirty = 1;
            win[nw].r = Rect(0,0,0,0);
            nw++;
        }
        free(pd);
    }
    while(nwin > nw)
        free(win[--nwin].label);
    nwin = nw;
    close(fd);
}
@

<<function drawnowin>>=
static void
drawnowin(int i)
{
    Rectangle r;

    r = Rect(0,0,(Dx(screen->r)-2*MARGIN+PAD)/cols-PAD, font->height);
    r = rectaddpt(rectaddpt(r, Pt(MARGIN+(PAD+Dx(r))*(i/rows),
                MARGIN+(PAD+Dy(r))*(i%rows))), screen->r.min);
    draw(screen, insetrect(r, -1), lightblue, nil, ZP);
}
@

<<function drawwin>>=
static void
drawwin(int i)
{
    draw(screen, win[i].r, lightblue, nil, ZP);
    _string(screen, addpt(win[i].r.min, Pt(2,0)), display->black, ZP,
        font, win[i].label, nil, strlen(win[i].label), 
        win[i].r, nil, ZP, SoverD);
    border(screen, win[i].r, 1, display->black, ZP);	
    win[i].dirty = 0;
}
@

<<function geometry>>=
static int
geometry(void)
{
    int i, ncols, z;
    Rectangle r;

    z = 0;
    rows = (Dy(screen->r)-2*MARGIN+PAD)/(font->height+PAD);
    if(rows*cols < nwin || rows*cols >= nwin*2){
        ncols = nwin <= 0 ? 1 : (nwin+rows-1)/rows;
        if(ncols != cols){
            cols = ncols;
            z = 1;
        }
    }

    r = Rect(0,0,(Dx(screen->r)-2*MARGIN+PAD)/cols-PAD, font->height);
    for(i=0; i<nwin; i++)
        win[i].r = rectaddpt(rectaddpt(r, Pt(MARGIN+(PAD+Dx(r))*(i/rows),
                    MARGIN+(PAD+Dy(r))*(i%rows))), screen->r.min);

    return z;
}
@

<<function redraw (windows/apps/winwatch.c)>>=
static void
redraw(Image *screen, int all)
{
    int i;

    all |= geometry();
    if(all)
        draw(screen, screen->r, lightblue, nil, ZP);
    for(i=0; i<nwin; i++)
        if(all || win[i].dirty)
            drawwin(i);
    if(!all)
        for(; i<onwin; i++)
            drawnowin(i);

    onwin = nwin;
}
@

<<function eresized (windows/apps/winwatch.c)>>=
void
eresized(int new)
{
    if(new && getwindow(display, Refmesg) < 0)
        fprint(2,"can't reattach to window");
    geometry();
    redraw(screen, 1);
}
@

<<function click>>=
static void
click(Mouse m)
{
    int fd, i, j;	
    char buf[128];

    if(m.buttons == 0 || (m.buttons & ~4))
        return;

    for(i=0; i<nwin; i++)
        if(ptinrect(m.xy, win[i].r))
            break;
    if(i == nwin)
        return;

    do
        m = emouse();
    while(m.buttons == 4);

    if(m.buttons != 0){
        do
            m = emouse();
        while(m.buttons);
        return;
    }

    for(j=0; j<nwin; j++)
        if(ptinrect(m.xy, win[j].r))
            break;
    if(j != i)
        return;

    sprint(buf, "/dev/wsys/%d/wctl", win[i].n);
    if((fd = open(buf, OWRITE)) < 0)
        return;
    write(fd, "unhide\n", 7);
    write(fd, "top\n", 4);
    write(fd, "current\n", 8);
    close(fd);
}
@

<<function usage (windows/apps/winwatch.c)>>=
static void
usage(void)
{
    fprint(2, "usage: winwatch [-e exclude] [-f font]\n");
    exits("usage");
}
@

<<function main (windows/apps/winwatch.c)>>=
void
main(int argc, char **argv)
{
    char *fontname;
    int Etimer;
    Event e;

    fontname = "/lib/font/bit/lucidasans/unicode.8.font";
    ARGBEGIN{
    case 'f':
        fontname = EARGF(usage());
        break;
    case 'e':
        exclude = regcomp(EARGF(usage()));
        if(exclude == nil)
            sysfatal("Bad regexp");
        break;
    default:
        usage();
    }ARGEND

    if(argc)
        usage();

    initdraw(0, 0, "winwatch");
    lightblue = allocimagemix(display, DPalebluegreen, DWhite);
    if(lightblue == nil)
        sysfatal("allocimagemix: %r");
    if((font = openfont(display, fontname)) == nil)
        sysfatal("font '%s' not found", fontname);

    refreshwin();
    redraw(screen, 1);
    einit(Emouse|Ekeyboard);
    Etimer = etimer(0, 2500);

    for(;;){
        switch(eread(Emouse|Ekeyboard|Etimer, &e)){
        case Ekeyboard:
            if(e.kbdc==0x7F || e.kbdc=='q')
                exits(0);
            break;
        case Emouse:
            if(e.mouse.buttons)
                click(e.mouse);
            /* fall through  */
        default:	/* Etimer */
            refreshwin();
            redraw(screen, 0);
            break;
        }
    }
}
@


%-------------------------------------------------------------

<<windows/apps/winwatch.c>>=
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <event.h>
#include <regexp.h>

typedef struct Win Win;
<<struct Win>>



<<global exclude>>
<<global win>>
<<global nwin>>
<<global mwin>>
<<global onwin>>
static int rows, cols;
<<global lightblue>>

extern Font *font;

<<enum _anon_ (windows/apps/winwatch.c)>>

<<function erealloc (windows/apps/winwatch.c)>>

<<function emalloc (windows/apps/winwatch.c)>>

<<function estrdup (windows/apps/winwatch.c)>>


<<function refreshwin>>

<<function drawnowin>>

<<function drawwin>>

<<function geometry>>

<<function redraw (windows/apps/winwatch.c)>>

<<function eresized (windows/apps/winwatch.c)>>

<<function click>>

<<function usage (windows/apps/winwatch.c)>>

<<function main (windows/apps/winwatch.c)>>
@


\section{[[windows/libcomplete/]]}

\subsection*{[[windows/libcomplete/complete.c]]}

<<function longestprefixlength>>=
static int
longestprefixlength(char *a, char *b, int n)
{
    int i, w;
    Rune ra, rb;

    for(i=0; i<n; i+=w){
        w = chartorune(&ra, a);
        chartorune(&rb, b);
        if(ra != rb)
            break;
        a += w;
        b += w;
    }
    return i;
}
@

<<function freecompletion>>=
void
freecompletion(Completion *c)
{
    if(c){
        free(c->filename);
        free(c);
    }
}
@

<<function strpcmp>>=
static int
strpcmp(const void *va, const void *vb)
{
    char *a, *b;

    a = *(char**)va;
    b = *(char**)vb;
    return strcmp(a, b);
}
@

<<function complete>>=
Completion*
complete(char *dir, char *s)
{
    long i, l, n, nfile, len, nbytes;
    int fd, minlen;
    Dir *dirp;
    char **name, *p;
    ulong* mode;
    Completion *c;

    if(strchr(s, '/') != nil){
        werrstr("slash character in name argument to complete()");
        return nil;
    }

    fd = open(dir, OREAD);
    if(fd < 0)
        return nil;

    n = dirreadall(fd, &dirp);
    if(n <= 0){
        close(fd);
        return nil;
    }

    /* find longest string, for allocation */
    len = 0;
    for(i=0; i<n; i++){
        l = strlen(dirp[i].name) + 1 + 1; /* +1 for /   +1 for \0 */
        if(l > len)
            len = l;
    }

    name = malloc(n*sizeof(char*));
    mode = malloc(n*sizeof(ulong));
    c = malloc(sizeof(Completion) + len);
    if(name == nil || mode == nil || c == nil)
        goto Return;
    memset(c, 0, sizeof(Completion));

    /* find the matches */
    len = strlen(s);
    nfile = 0;
    minlen = 1000000;
    for(i=0; i<n; i++)
        if(strncmp(s, dirp[i].name, len) == 0){
            name[nfile] = dirp[i].name;
            mode[nfile] = dirp[i].mode;
            if(minlen > strlen(dirp[i].name))
                minlen = strlen(dirp[i].name);
            nfile++;
        }

    if(nfile > 0) {
        /* report interesting results */
        /* trim length back to longest common initial string */
        for(i=1; i<nfile; i++)
            minlen = longestprefixlength(name[0], name[i], minlen);

        /* build the answer */
        c->complete = (nfile == 1);
        c->advance = c->complete || (minlen > len);
        c->string = (char*)(c+1);
        memmove(c->string, name[0]+len, minlen-len);
        if(c->complete)
            c->string[minlen++ - len] = (mode[0]&DMDIR)? '/' : ' ';
        c->string[minlen - len] = '\0';
        c->nmatch = nfile;
    } else {
        /* no match, so return all possible strings */
        for(i=0; i<n; i++){
            name[i] = dirp[i].name;
            mode[i] = dirp[i].mode;
        }
        nfile = n;
        c->nmatch = 0;
    }

    /* attach list of names */
    nbytes = nfile * sizeof(char*);
    for(i=0; i<nfile; i++)
        nbytes += strlen(name[i]) + 1 + 1;
    c->filename = malloc(nbytes);
    if(c->filename == nil)
        goto Return;
    p = (char*)(c->filename + nfile);
    for(i=0; i<nfile; i++){
        c->filename[i] = p;
        strcpy(p, name[i]);
        p += strlen(p);
        if(mode[i] & DMDIR)
            *p++ = '/';
        *p++ = '\0';
    }
    c->nfile = nfile;
    qsort(c->filename, c->nfile, sizeof(c->filename[0]), strpcmp);

  Return:
    free(name);
    free(mode);
    free(dirp);
    close(fd);
    return c;
}
@


%-------------------------------------------------------------

<<windows/libcomplete/complete.c>>=
#include <u.h>
#include <libc.h>
#include "complete.h"

<<function longestprefixlength>>

<<function freecompletion>>

<<function strpcmp>>

<<function complete>>
@


\section{[[windows/libframe/]]}

\subsection*{[[windows/libframe/frbox.c]]}

<<constant SLOP>>=
#define	SLOP	25
@

<<function _fraddbox>>=
void
_fraddbox(Frame *f, int bn, int n)	/* add n boxes after bn, shift the rest up,
                 * box[bn+n]==box[bn] */
{
    int i;

    if(bn > f->nbox)
        drawerror(f->display, "_fraddbox");
    if(f->nbox+n > f->nalloc)
        _frgrowbox(f, n+SLOP);
    for(i=f->nbox; --i>=bn; )
        f->box[i+n] = f->box[i];
    f->nbox+=n;
}
@

<<function _frclosebox>>=
void
_frclosebox(Frame *f, int n0, int n1)	/* inclusive */
{
    int i;

    if(n0>=f->nbox || n1>=f->nbox || n1<n0)
        drawerror(f->display, "_frclosebox");
    n1++;
    for(i=n1; i<f->nbox; i++)
        f->box[i-(n1-n0)] = f->box[i];
    f->nbox -= n1-n0;
}
@

<<function _frdelbox>>=
void
_frdelbox(Frame *f, int n0, int n1)	/* inclusive */
{
    if(n0>=f->nbox || n1>=f->nbox || n1<n0)
        drawerror(f->display, "_frdelbox");
    _frfreebox(f, n0, n1);
    _frclosebox(f, n0, n1);
}
@

<<function _frfreebox>>=
void
_frfreebox(Frame *f, int n0, int n1)	/* inclusive */
{
    int i;

    if(n1<n0)
        return;
    if(n0>=f->nbox || n1>=f->nbox)
        drawerror(f->display, "_frfreebox");
    n1++;
    for(i=n0; i<n1; i++)
        if(f->box[i].nrune >= 0)
            free(f->box[i].ptr);
}
@

<<function _frgrowbox>>=
void
_frgrowbox(Frame *f, int delta)
{
    f->nalloc += delta;
    f->box = realloc(f->box, f->nalloc*sizeof(Frbox));
    if(f->box == 0)
        drawerror(f->display, "_frgrowbox");
}
@

<<function dupbox>>=
static
void
dupbox(Frame *f, int bn)
{
    uchar *p;

    if(f->box[bn].nrune < 0)
        drawerror(f->display, "dupbox");
    _fraddbox(f, bn, 1);
    if(f->box[bn].nrune >= 0){
        p = _frallocstr(f, NBYTE(&f->box[bn])+1);
        strcpy((char*)p, (char*)f->box[bn].ptr);
        f->box[bn+1].ptr = p;
    }
}
@

<<function runeindex>>=
static
uchar*
runeindex(uchar *p, int n)
{
    int i, w;
    Rune rune;

    for(i=0; i<n; i++,p+=w)
        if(*p < Runeself)
            w = 1;
        else{
            w = chartorune(&rune, (char*)p);
            USED(rune);
        }
    return p;
}
@

<<function truncatebox>>=
static
void
truncatebox(Frame *f, Frbox *b, int n)	/* drop last n chars; no allocation done */
{
    if(b->nrune<0 || b->nrune<n)
        drawerror(f->display, "truncatebox");
    b->nrune -= n;
    runeindex(b->ptr, b->nrune)[0] = 0;
    b->wid = stringwidth(f->font, (char *)b->ptr);
}
@

<<function chopbox>>=
static
void
chopbox(Frame *f, Frbox *b, int n)	/* drop first n chars; no allocation done */
{
    char *p;

    if(b->nrune<0 || b->nrune<n)
        drawerror(f->display, "chopbox");
    p = (char*)runeindex(b->ptr, n);
    memmove((char*)b->ptr, p, strlen(p)+1);
    b->nrune -= n;
    b->wid = stringwidth(f->font, (char *)b->ptr);
}
@

<<function _frsplitbox>>=
void
_frsplitbox(Frame *f, int bn, int n)
{
    dupbox(f, bn);
    truncatebox(f, &f->box[bn], f->box[bn].nrune-n);
    chopbox(f, &f->box[bn+1], n);
}
@

<<function _frmergebox>>=
void
_frmergebox(Frame *f, int bn)		/* merge bn and bn+1 */
{
    Frbox *b;

    b = &f->box[bn];
    _frinsure(f, bn, NBYTE(&b[0])+NBYTE(&b[1])+1);
    strcpy((char*)runeindex(b[0].ptr, b[0].nrune), (char*)b[1].ptr);
    b[0].wid += b[1].wid;
    b[0].nrune += b[1].nrune;
    _frdelbox(f, bn+1, bn+1);
}
@

<<function _frfindbox>>=
int
_frfindbox(Frame *f, int bn, ulong p, ulong q)	/* find box containing q and put q on a box boundary */
{
    Frbox *b;

    for(b = &f->box[bn]; bn<f->nbox && p+NRUNE(b)<=q; bn++, b++)
        p += NRUNE(b);
    if(p != q)
        _frsplitbox(f, bn++, (int)(q-p));
    return bn;
}
@


%-------------------------------------------------------------

<<windows/libframe/frbox.c>>=
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <thread.h>
#include <mouse.h>
#include <frame.h>

<<constant SLOP>>

<<function _fraddbox>>

<<function _frclosebox>>

<<function _frdelbox>>

<<function _frfreebox>>

<<function _frgrowbox>>

<<function dupbox>>

<<function runeindex>>

<<function truncatebox>>

<<function chopbox>>

<<function _frsplitbox>>

<<function _frmergebox>>

<<function _frfindbox>>
@


\subsection*{[[windows/libframe/frdelete.c]]}

<<function frdelete>>=
int
frdelete(Frame *f, ulong p0, ulong p1)
{
    Point pt0, pt1, ppt0;
    Frbox *b;
    int n0, n1, n;
    ulong cn1;
    Rectangle r;
    int nn0;
    Image *col;

    if(p0>=f->nchars || p0==p1 || f->b==nil)
        return 0;
    if(p1 > f->nchars)
        p1 = f->nchars;
    n0 = _frfindbox(f, 0, 0, p0);
    if(n0 == f->nbox)
        drawerror(f->display, "off end in frdelete");
    n1 = _frfindbox(f, n0, p0, p1);
    pt0 = _frptofcharnb(f, p0, n0);
    pt1 = frptofchar(f, p1);
    if(f->p0 == f->p1)
        frtick(f, frptofchar(f, f->p0), 0);
    nn0 = n0;
    ppt0 = pt0;
    _frfreebox(f, n0, n1-1);
    f->modified = 1;

    /*
     * Invariants:
     *  - pt0 points to beginning, pt1 points to end
     *  - n0 is box containing beginning of stuff being deleted
     *  - n1, b are box containing beginning of stuff to be kept after deletion
     *  - cn1 is char position of n1
     *  - f->p0 and f->p1 are not adjusted until after all deletion is done
     */
    b = &f->box[n1];
    cn1 = p1;
    while(pt1.x!=pt0.x && n1<f->nbox){
        _frcklinewrap0(f, &pt0, b);
        _frcklinewrap(f, &pt1, b);
        n = _frcanfit(f, pt0, b);
        if(n==0)
            drawerror(f->display, "_frcanfit==0");
        r.min = pt0;
        r.max = pt0;
        r.max.y += f->font->height;
        if(b->nrune > 0){
            if(n != b->nrune){
                _frsplitbox(f, n1, n);
                b = &f->box[n1];
            }
            r.max.x += b->wid;
            draw(f->b, r, f->b, nil, pt1);
            cn1 += b->nrune;
        }else{
            r.max.x += _frnewwid0(f, pt0, b);
            if(r.max.x > f->r.max.x)
                r.max.x = f->r.max.x;
            col = f->cols[BACK];
            if(f->p0<=cn1 && cn1<f->p1)
                col = f->cols[HIGH];
            draw(f->b, r, col, nil, pt0);
            cn1++;
        }
        _fradvance(f, &pt1, b);
        pt0.x += _frnewwid(f, pt0, b);
        f->box[n0++] = f->box[n1++];
        b++;
    }
    if(n1==f->nbox && pt0.x!=pt1.x)	/* deleting last thing in window; must clean up */
        frselectpaint(f, pt0, pt1, f->cols[BACK]);
    if(pt1.y != pt0.y){
        Point pt2;

        pt2 = _frptofcharptb(f, 32767, pt1, n1);
        if(pt2.y > f->r.max.y)
            drawerror(f->display, "frptofchar in frdelete");
        if(n1 < f->nbox){
            int q0, q1, q2;

            q0 = pt0.y+f->font->height;
            q1 = pt1.y+f->font->height;
            q2 = pt2.y+f->font->height;
            if(q2 > f->r.max.y)
                q2 = f->r.max.y;
            draw(f->b, Rect(pt0.x, pt0.y, pt0.x+(f->r.max.x-pt1.x), q0),
                f->b, nil, pt1);
            draw(f->b, Rect(f->r.min.x, q0, f->r.max.x, q0+(q2-q1)),
                f->b, nil, Pt(f->r.min.x, q1));
            frselectpaint(f, Pt(pt2.x, pt2.y-(pt1.y-pt0.y)), pt2, f->cols[BACK]);
        }else
            frselectpaint(f, pt0, pt2, f->cols[BACK]);
    }
    _frclosebox(f, n0, n1-1);
    if(nn0>0 && f->box[nn0-1].nrune>=0 && ppt0.x-f->box[nn0-1].wid>=(int)f->r.min.x){
        --nn0;
        ppt0.x -= f->box[nn0].wid;
    }
    _frclean(f, ppt0, nn0, n0<f->nbox-1? n0+1 : n0);
    if(f->p1 > p1)
        f->p1 -= p1-p0;
    else if(f->p1 > p0)
        f->p1 = p0;
    if(f->p0 > p1)
        f->p0 -= p1-p0;
    else if(f->p0 > p0)
        f->p0 = p0;
    f->nchars -= p1-p0;
    if(f->p0 == f->p1)
        frtick(f, frptofchar(f, f->p0), 1);
    pt0 = frptofchar(f, f->nchars);
    n = f->nlines;
    f->nlines = (pt0.y-f->r.min.y)/f->font->height+(pt0.x>f->r.min.x);
    return n - f->nlines;
}
@


%-------------------------------------------------------------

<<windows/libframe/frdelete.c>>=
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <thread.h>
#include <mouse.h>
#include <frame.h>

<<function frdelete>>
@


\subsection*{[[windows/libframe/frdraw.c]]}

<<function _frdrawtext>>=
void
_frdrawtext(Frame *f, Point pt, Image *text, Image *back)
{
    Frbox *b;
    int nb;
    static int x;

    for(nb=0,b=f->box; nb<f->nbox; nb++, b++){
        _frcklinewrap(f, &pt, b);
        if(b->nrune >= 0){
            stringbg(f->b, pt, text, ZP, f->font, (char*)b->ptr, back, ZP);
        }
        pt.x += b->wid;
    }
}
@

<<function nbytes>>=
static int
nbytes(char *s0, int nr)
{
    char *s;
    Rune r;

    s = s0;
    while(--nr >= 0)
        s += chartorune(&r, s);
    return s-s0;
}
@

<<function frdrawsel>>=
void
frdrawsel(Frame *f, Point pt, ulong p0, ulong p1, int issel)
{
    Image *back, *text;

    if(f->ticked)
        frtick(f, frptofchar(f, f->p0), 0);

    if(p0 == p1){
        frtick(f, pt, issel);
        return;
    }

    if(issel){
        back = f->cols[HIGH];
        text = f->cols[HTEXT];
    }else{
        back = f->cols[BACK];
        text = f->cols[TEXT];
    }

    frdrawsel0(f, pt, p0, p1, back, text);
}
@

<<function frdrawsel0>>=
Point
frdrawsel0(Frame *f, Point pt, ulong p0, ulong p1, Image *back, Image *text)
{
    Frbox *b;
    int nb, nr, w, x, trim;
    Point qt;
    uint p;
    char *ptr;

    p = 0;
    b = f->box;
    trim = 0;
    for(nb=0; nb<f->nbox && p<p1; nb++){
        nr = b->nrune;
        if(nr < 0)
            nr = 1;
        if(p+nr <= p0)
            goto Continue;
        if(p >= p0){
            qt = pt;
            _frcklinewrap(f, &pt, b);
            /* fill in the end of a wrapped line */
            if(pt.y > qt.y)
                draw(f->b, Rect(qt.x, qt.y, f->r.max.x, pt.y), back, nil, qt);
        }
        ptr = (char*)b->ptr;
        if(p < p0){	/* beginning of region: advance into box */
            ptr += nbytes(ptr, p0-p);
            nr -= (p0-p);
            p = p0;
        }
        trim = 0;
        if(p+nr > p1){	/* end of region: trim box */
            nr -= (p+nr)-p1;
            trim = 1;
        }
        if(b->nrune<0 || nr==b->nrune)
            w = b->wid;
        else
            w = stringnwidth(f->font, ptr, nr);
        x = pt.x+w;
        if(x > f->r.max.x)
            x = f->r.max.x;
        draw(f->b, Rect(pt.x, pt.y, x, pt.y+f->font->height), back, nil, pt);
        if(b->nrune >= 0)
            stringnbg(f->b, pt, text, ZP, f->font, ptr, nr, back, ZP);
        pt.x += w;
        Continue:
        b++;
        p += nr;
    }
    /* if this is end of last plain text box on wrapped line, fill to end of line */
    if(p1>p0 &&  b>f->box && b<f->box+f->nbox && b[-1].nrune>0 && !trim){
        qt = pt;
        _frcklinewrap(f, &pt, b);
        if(pt.y > qt.y)
            draw(f->b, Rect(qt.x, qt.y, f->r.max.x, pt.y), back, nil, qt);
    }
    return pt;
}
@

<<function frredraw>>=
void
frredraw(Frame *f)
{
    int ticked;
    Point pt;

    if(f->p0 == f->p1){
        ticked = f->ticked;
        if(ticked)
            frtick(f, frptofchar(f, f->p0), 0);
        frdrawsel0(f, frptofchar(f, 0), 0, f->nchars, f->cols[BACK], f->cols[TEXT]);
        if(ticked)
            frtick(f, frptofchar(f, f->p0), 1);
        return;
    }

    pt = frptofchar(f, 0);
    pt = frdrawsel0(f, pt, 0, f->p0, f->cols[BACK], f->cols[TEXT]);
    pt = frdrawsel0(f, pt, f->p0, f->p1, f->cols[HIGH], f->cols[HTEXT]);
    pt = frdrawsel0(f, pt, f->p1, f->nchars, f->cols[BACK], f->cols[TEXT]);
}
@

<<function frtick>>=
void
frtick(Frame *f, Point pt, int ticked)
{
    Rectangle r;

    if(f->ticked==ticked || f->tick==0 || !ptinrect(pt, f->r))
        return;
    pt.x--;	/* looks best just left of where requested */
    r = Rect(pt.x, pt.y, pt.x+FRTICKW, pt.y+f->font->height);
    /* can go into left border but not right */
    if(r.max.x > f->r.max.x)
        r.max.x = f->r.max.x;
    if(ticked){
        draw(f->tickback, f->tickback->r, f->b, nil, pt);
        draw(f->b, r, f->tick, nil, ZP);
    }else
        draw(f->b, r, f->tickback, nil, ZP);
    f->ticked = ticked;
}
@

<<function _frdraw>>=
Point
_frdraw(Frame *f, Point pt)
{
    Frbox *b;
    int nb, n;

    for(b=f->box,nb=0; nb<f->nbox; nb++, b++){
        _frcklinewrap0(f, &pt, b);
        if(pt.y == f->r.max.y){
            f->nchars -= _frstrlen(f, nb);
            _frdelbox(f, nb, f->nbox-1);
            break;
        }
        if(b->nrune > 0){
            n = _frcanfit(f, pt, b);
            if(n == 0)
                drawerror(f->display, "_frcanfit==0");
            if(n != b->nrune){
                _frsplitbox(f, nb, n);
                b = &f->box[nb];
            }
            pt.x += b->wid;
        }else{
            if(b->bc == '\n'){
                pt.x = f->r.min.x;
                pt.y+=f->font->height;
            }else
                pt.x += _frnewwid(f, pt, b);
        }
    }
    return pt;
}
@

<<function _frstrlen>>=
int
_frstrlen(Frame *f, int nb)
{
    int n;

    for(n=0; nb<f->nbox; nb++)
        n += NRUNE(&f->box[nb]);
    return n;
}
@


%-------------------------------------------------------------

<<windows/libframe/frdraw.c>>=
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <thread.h>
#include <mouse.h>
#include <frame.h>

<<function _frdrawtext>>

<<function nbytes>>

<<function frdrawsel>>

<<function frdrawsel0>>

<<function frredraw>>

<<function frtick>>

<<function _frdraw>>

<<function _frstrlen>>
@


\subsection*{[[windows/libframe/frinit.c]]}

<<function frinit>>=
void
frinit(Frame *f, Rectangle r, Font *ft, Image *b, Image *cols[NCOL])
{
    f->font = ft;
    f->display = b->display;
    f->maxtab = 8*stringwidth(ft, "0");
    f->nbox = 0;
    f->nalloc = 0;
    f->nchars = 0;
    f->nlines = 0;
    f->p0 = 0;
    f->p1 = 0;
    f->box = 0;
    f->lastlinefull = 0;
    if(cols != 0)
        memmove(f->cols, cols, sizeof f->cols);
    frsetrects(f, r, b);
    if(f->tick==nil && f->cols[BACK]!=0)
        frinittick(f);
}
@

<<function frinittick>>=
void
frinittick(Frame *f)
{
    Image *b;
    Font *ft;

    b = f->display->screenimage;
    ft = f->font;
    if(f->tick)
        freeimage(f->tick);
    f->tick = allocimage(f->display, Rect(0, 0, FRTICKW, ft->height), b->chan, 0, DWhite);
    if(f->tick == nil)
        return;
    if(f->tickback)
        freeimage(f->tickback);
    f->tickback = allocimage(f->display, f->tick->r, b->chan, 0, DWhite);
    if(f->tickback == 0){
        freeimage(f->tick);
        f->tick = 0;
        return;
    }
    /* background color */
    draw(f->tick, f->tick->r, f->cols[BACK], nil, ZP);
    /* vertical line */
    draw(f->tick, Rect(FRTICKW/2, 0, FRTICKW/2+1, ft->height), f->cols[TEXT], nil, ZP);
    /* box on each end */
    draw(f->tick, Rect(0, 0, FRTICKW, FRTICKW), f->cols[TEXT], nil, ZP);
    draw(f->tick, Rect(0, ft->height-FRTICKW, FRTICKW, ft->height), f->cols[TEXT], nil, ZP);
}
@

<<function frsetrects>>=
void
frsetrects(Frame *f, Rectangle r, Image *b)
{
    f->b = b;
    f->entire = r;
    f->r = r;
    f->r.max.y -= (r.max.y-r.min.y)%f->font->height;
    f->maxlines = (r.max.y-r.min.y)/f->font->height;
}
@

<<function frclear>>=
void
frclear(Frame *f, int freeall)
{
    if(f->nbox)
        _frdelbox(f, 0, f->nbox-1);
    if(f->box)
        free(f->box);
    if(freeall){
        freeimage(f->tick);
        freeimage(f->tickback);
        f->tick = 0;
        f->tickback = 0;
    }
    f->box = 0;
    f->ticked = 0;
}
@


%-------------------------------------------------------------

<<windows/libframe/frinit.c>>=
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <thread.h>
#include <mouse.h>
#include <frame.h>

<<function frinit>>

<<function frinittick>>

<<function frsetrects>>

<<function frclear>>
@


\subsection*{[[windows/libframe/frinsert.c]]}

<<constant DELTA>>=
#define	DELTA	25
@

<<constant TMPSIZE>>=
#define	TMPSIZE	256
@

<<global frame>>=
static Frame		frame;
@

<<function bxscan>>=
static
Point
bxscan(Frame *f, Rune *sp, Rune *ep, Point *ppt)
{
    int w, c, nb, delta, nl, nr, rw;
    Frbox *b;
    char *s, tmp[TMPSIZE+3];	/* +3 for rune overflow */
    uchar *p;

    frame.r = f->r;
    frame.b = f->b;
    frame.font = f->font;
    frame.maxtab = f->maxtab;
    frame.nbox = 0;
    frame.nchars = 0;
    memmove(frame.cols, f->cols, sizeof frame.cols);
    delta = DELTA;
    nl = 0;
    for(nb=0; sp<ep && nl<=f->maxlines; nb++,frame.nbox++){
        if(nb == frame.nalloc){
            _frgrowbox(&frame, delta);
            if(delta < 10000)
                delta *= 2;
        }
        b = &frame.box[nb];
        c = *sp;
        if(c=='\t' || c=='\n'){
            b->bc = c;
            b->wid = 5000;
            b->minwid = (c=='\n')? 0 : stringwidth(frame.font, " ");
            b->nrune = -1;
            if(c=='\n')
                nl++;
            frame.nchars++;
            sp++;
        }else{
            s = tmp;
            nr = 0;
            w = 0;
            while(sp < ep){
                c = *sp;
                if(c=='\t' || c=='\n')
                    break;
                rw = runetochar(s, sp);
                if(s+rw >= tmp+TMPSIZE)
                    break;
                w += runestringnwidth(frame.font, sp, 1);
                sp++;
                s += rw;
                nr++;
            }
            *s++ = 0;
            p = _frallocstr(f, s-tmp);
            b = &frame.box[nb];
            b->ptr = p;
            memmove(p, tmp, s-tmp);
            b->wid = w;
            b->nrune = nr;
            frame.nchars += nr;
        }
    }
    _frcklinewrap0(f, ppt, &frame.box[0]);
    return _frdraw(&frame, *ppt);
}
@

<<function chopframe>>=
static
void
chopframe(Frame *f, Point pt, ulong p, int bn)
{
    Frbox *b;

    for(b = &f->box[bn]; ; b++){
        if(b >= &f->box[f->nbox])
            drawerror(f->display, "endofframe");
        _frcklinewrap(f, &pt, b);
        if(pt.y >= f->r.max.y)
            break;
        p += NRUNE(b);
        _fradvance(f, &pt, b);
    }
    f->nchars = p;
    f->nlines = f->maxlines;
    if(b<&f->box[f->nbox])				/* BUG */
        _frdelbox(f, (int)(b-f->box), f->nbox-1);
}
@

<<struct points_frinsert>>=
struct points_frinsert {
    Point pt0, pt1;
};
@

<<function frinsert>>=
void
frinsert(Frame *f, Rune *sp, Rune *ep, ulong p0)
{
    Point pt0, pt1, opt0, ppt0, ppt1, pt;
    Frbox *b;
    int n, n0, nn0, y;
    ulong cn0;
    Image *col;
    Rectangle r;
    static struct points_frinsert *pts;
    static int nalloc=0;
    int npts;

    if(p0>f->nchars || sp==ep || f->b==nil)
        return;
    n0 = _frfindbox(f, 0, 0, p0);
    cn0 = p0;
    nn0 = n0;
    pt0 = _frptofcharnb(f, p0, n0);
    ppt0 = pt0;
    opt0 = pt0;
    pt1 = bxscan(f, sp, ep, &ppt0);
    ppt1 = pt1;
    if(n0 < f->nbox){
        _frcklinewrap(f, &pt0, b = &f->box[n0]);	/* for frdrawsel() */
        _frcklinewrap0(f, &ppt1, b);
    }
    f->modified = 1;
    /*
     * ppt0 and ppt1 are start and end of insertion as they will appear when
     * insertion is complete. pt0 is current location of insertion position
     * (p0); pt1 is terminal point (without line wrap) of insertion.
     */
    if(f->p0 == f->p1)
        frtick(f, frptofchar(f, f->p0), 0);

    /*
     * Find point where old and new x's line up
     * Invariants:
     *	pt0 is where the next box (b, n0) is now
     *	pt1 is where it will be after the insertion
     * If pt1 goes off the rectangle, we can toss everything from there on
     */
    for(b = &f->box[n0],npts=0;
         pt1.x!=pt0.x && pt1.y!=f->r.max.y && n0<f->nbox; b++,n0++,npts++){
        _frcklinewrap(f, &pt0, b);
        _frcklinewrap0(f, &pt1, b);
        if(b->nrune > 0){
            n = _frcanfit(f, pt1, b);
            if(n == 0)
                drawerror(f->display, "_frcanfit==0");
            if(n != b->nrune){
                _frsplitbox(f, n0, n);
                b = &f->box[n0];
            }
        }
        if(npts == nalloc){
            pts = realloc(pts, (npts+DELTA)*sizeof(pts[0]));
            nalloc += DELTA;
            b = &f->box[n0];
        }
        pts[npts].pt0 = pt0;
        pts[npts].pt1 = pt1;
        /* has a text box overflowed off the frame? */
        if(pt1.y == f->r.max.y)
            break;
        _fradvance(f, &pt0, b);
        pt1.x += _frnewwid(f, pt1, b);
        cn0 += NRUNE(b);
    }
    if(pt1.y > f->r.max.y)
        drawerror(f->display, "frinsert pt1 too far");
    if(pt1.y==f->r.max.y && n0<f->nbox){
        f->nchars -= _frstrlen(f, n0);
        _frdelbox(f, n0, f->nbox-1);
    }
    if(n0 == f->nbox)
        f->nlines = (pt1.y-f->r.min.y)/f->font->height+(pt1.x>f->r.min.x);
    else if(pt1.y!=pt0.y){
        int q0, q1;

        y = f->r.max.y;
        q0 = pt0.y+f->font->height;
        q1 = pt1.y+f->font->height;
        f->nlines += (q1-q0)/f->font->height;
        if(f->nlines > f->maxlines)
            chopframe(f, ppt1, p0, nn0);
        if(pt1.y < y){
            r = f->r;
            r.min.y = q1;
            r.max.y = y;
            if(q1 < y)
                draw(f->b, r, f->b, nil, Pt(f->r.min.x, q0));
            r.min = pt1;
            r.max.x = pt1.x+(f->r.max.x-pt0.x);
            r.max.y = q1;
            draw(f->b, r, f->b, nil, pt0);
        }
    }
    /*
     * Move the old stuff down to make room.  The loop will move the stuff
     * between the insertion and the point where the x's lined up.
     * The draw()s above moved everything down after the point they lined up.
     */
    for((y=pt1.y==f->r.max.y?pt1.y:0),b = &f->box[n0-1]; --npts>=0; --b){
        pt = pts[npts].pt1;
        if(b->nrune > 0){
            r.min = pt;
            r.max = r.min;
            r.max.x += b->wid;
            r.max.y += f->font->height;
            draw(f->b, r, f->b, nil, pts[npts].pt0);
            /* clear bit hanging off right */
            if(npts==0 && pt.y>pt0.y){
                /*
                 * first new char is bigger than first char we're
                 * displacing, causing line wrap. ugly special case.
                 */
                r.min = opt0;
                r.max = opt0;
                r.max.x = f->r.max.x;
                r.max.y += f->font->height;
                if(f->p0<=cn0 && cn0<f->p1)	/* b+1 is inside selection */
                    col = f->cols[HIGH];
                else
                    col = f->cols[BACK];
                draw(f->b, r, col, nil, r.min);
            }else if(pt.y < y){
                r.min = pt;
                r.max = pt;
                r.min.x += b->wid;
                r.max.x = f->r.max.x;
                r.max.y += f->font->height;
                if(f->p0<=cn0 && cn0<f->p1)	/* b+1 is inside selection */
                    col = f->cols[HIGH];
                else
                    col = f->cols[BACK];
                draw(f->b, r, col, nil, r.min);
            }
            y = pt.y;
            cn0 -= b->nrune;
        }else{
            r.min = pt;
            r.max = pt;
            r.max.x += b->wid;
            r.max.y += f->font->height;
            if(r.max.x >= f->r.max.x)
                r.max.x = f->r.max.x;
            cn0--;
            if(f->p0<=cn0 && cn0<f->p1)	/* b is inside selection */
                col = f->cols[HIGH];
            else
                col = f->cols[BACK];
            draw(f->b, r, col, nil, r.min);
            y = 0;
            if(pt.x == f->r.min.x)
                y = pt.y;
        }
    }
    /* insertion can extend the selection, so the condition here is different */
    if(f->p0<p0 && p0<=f->p1)
        col = f->cols[HIGH];
    else
        col = f->cols[BACK];
    frselectpaint(f, ppt0, ppt1, col);
    _frdrawtext(&frame, ppt0, f->cols[TEXT], col);
    _fraddbox(f, nn0, frame.nbox);
    for(n=0; n<frame.nbox; n++)
        f->box[nn0+n] = frame.box[n];
    if(nn0>0 && f->box[nn0-1].nrune>=0 && ppt0.x-f->box[nn0-1].wid>=f->r.min.x){
        --nn0;
        ppt0.x -= f->box[nn0].wid;
    }
    n0 += frame.nbox;
    _frclean(f, ppt0, nn0, n0<f->nbox-1? n0+1 : n0);
    f->nchars += frame.nchars;
    if(f->p0 >= p0)
        f->p0 += frame.nchars;
    if(f->p0 > f->nchars)
        f->p0 = f->nchars;
    if(f->p1 >= p0)
        f->p1 += frame.nchars;
    if(f->p1 > f->nchars)
        f->p1 = f->nchars;
    if(f->p0 == f->p1)
        frtick(f, frptofchar(f, f->p0), 1);
}
@


%-------------------------------------------------------------

<<windows/libframe/frinsert.c>>=
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <thread.h>
#include <mouse.h>
#include <frame.h>

<<constant DELTA>>
<<constant TMPSIZE>>
<<global frame>>

<<function bxscan>>

<<function chopframe>>

<<struct points_frinsert>>

<<function frinsert>>
@


\subsection*{[[windows/libframe/frptofchar.c]]}

<<function _frptofcharptb>>=
Point
_frptofcharptb(Frame *f, ulong p, Point pt, int bn)
{
    uchar *s;
    Frbox *b;
    int w, l;
    Rune r;

    for(b = &f->box[bn]; bn<f->nbox; bn++,b++){
        _frcklinewrap(f, &pt, b);
        if(p < (l=NRUNE(b))){
            if(b->nrune > 0)
                for(s=b->ptr; p>0; s+=w, p--){
                    if((r = *s) < Runeself)
                        w = 1;
                    else
                        w = chartorune(&r, (char*)s);
                    pt.x += stringnwidth(f->font, (char*)s, 1);
                    if(r==0 || pt.x>f->r.max.x)
                        drawerror(f->display, "frptofchar");
                }
            break;
        }
        p -= l;
        _fradvance(f, &pt, b);
    }
    return pt;
}
@

<<function frptofchar>>=
Point
frptofchar(Frame *f, ulong p)
{
    return _frptofcharptb(f, p, f->r.min, 0);
}
@

<<function _frptofcharnb>>=
Point
_frptofcharnb(Frame *f, ulong p, int nb)	/* doesn't do final _fradvance to next line */
{
    Point pt;
    int nbox;

    nbox = f->nbox;
    f->nbox = nb;
    pt = _frptofcharptb(f, p, f->r.min, 0);
    f->nbox = nbox;
    return pt;
}
@

<<function _frgrid>>=
static
Point
_frgrid(Frame *f, Point p)
{
    p.y -= f->r.min.y;
    p.y -= p.y%f->font->height;
    p.y += f->r.min.y;
    if(p.x > f->r.max.x)
        p.x = f->r.max.x;
    return p;
}
@

<<function frcharofpt>>=
ulong
frcharofpt(Frame *f, Point pt)
{
    Point qt;
    int w, bn;
    uchar *s;
    Frbox *b;
    ulong p;
    Rune r;

    pt = _frgrid(f, pt);
    qt = f->r.min;
    for(b=f->box,bn=0,p=0; bn<f->nbox && qt.y<pt.y; bn++,b++){
        _frcklinewrap(f, &qt, b);
        if(qt.y >= pt.y)
            break;
        _fradvance(f, &qt, b);
        p += NRUNE(b);
    }
    for(; bn<f->nbox && qt.x<=pt.x; bn++,b++){
        _frcklinewrap(f, &qt, b);
        if(qt.y > pt.y)
            break;
        if(qt.x+b->wid > pt.x){
            if(b->nrune < 0)
                _fradvance(f, &qt, b);
            else{
                s = b->ptr;
                for(;;){
                    if((r = *s) < Runeself)
                        w = 1;
                    else
                        w = chartorune(&r, (char*)s);
                    if(r == 0)
                        drawerror(f->display, "end of string in frcharofpt");
                    qt.x += stringnwidth(f->font, (char*)s, 1);
                    s += w;
                    if(qt.x > pt.x)
                        break;
                    p++;
                }
            }
        }else{
            p += NRUNE(b);
            _fradvance(f, &qt, b);
        }
    }
    return p;
}
@


%-------------------------------------------------------------

<<windows/libframe/frptofchar.c>>=
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <thread.h>
#include <mouse.h>
#include <frame.h>

<<function _frptofcharptb>>

<<function frptofchar>>

<<function _frptofcharnb>>

<<function _frgrid>>

<<function frcharofpt>>
@


\subsection*{[[windows/libframe/frselect.c]]}

<<function region>>=
static
int
region(int a, int b)
{
    if(a < b)
        return -1;
    if(a == b)
        return 0;
    return 1;
}
@

<<function frselect>>=
void
frselect(Frame *f, Mousectl *mc)	/* when called, button 1 is down */
{
    ulong p0, p1, q;
    Point mp, pt0, pt1, qt;
    int reg, b, scrled;

    mp = mc->xy;
    b = mc->buttons;

    f->modified = 0;
    frdrawsel(f, frptofchar(f, f->p0), f->p0, f->p1, 0);
    p0 = p1 = frcharofpt(f, mp);
    f->p0 = p0;
    f->p1 = p1;
    pt0 = frptofchar(f, p0);
    pt1 = frptofchar(f, p1);
    frdrawsel(f, pt0, p0, p1, 1);
    reg = 0;
    do{
        scrled = 0;
        if(f->scroll){
            if(mp.y < f->r.min.y){
                (*f->scroll)(f, -(f->r.min.y-mp.y)/(int)f->font->height-1);
                p0 = f->p1;
                p1 = f->p0;
                scrled = 1;
            }else if(mp.y > f->r.max.y){
                (*f->scroll)(f, (mp.y-f->r.max.y)/(int)f->font->height+1);
                p0 = f->p0;
                p1 = f->p1;
                scrled = 1;
            }
            if(scrled){
                if(reg != region(p1, p0))
                    q = p0, p0 = p1, p1 = q;	/* undo the swap that will happen below */
                pt0 = frptofchar(f, p0);
                pt1 = frptofchar(f, p1);
                reg = region(p1, p0);
            }
        }
        q = frcharofpt(f, mp);
        if(p1 != q){
            if(reg != region(q, p0)){	/* crossed starting point; reset */
                if(reg > 0)
                    frdrawsel(f, pt0, p0, p1, 0);
                else if(reg < 0)
                    frdrawsel(f, pt1, p1, p0, 0);
                p1 = p0;
                pt1 = pt0;
                reg = region(q, p0);
                if(reg == 0)
                    frdrawsel(f, pt0, p0, p1, 1);
            }
            qt = frptofchar(f, q);
            if(reg > 0){
                if(q > p1)
                    frdrawsel(f, pt1, p1, q, 1);
                else if(q < p1)
                    frdrawsel(f, qt, q, p1, 0);
            }else if(reg < 0){
                if(q > p1)
                    frdrawsel(f, pt1, p1, q, 0);
                else
                    frdrawsel(f, qt, q, p1, 1);
            }
            p1 = q;
            pt1 = qt;
        }
        f->modified = 0;
        if(p0 < p1) {
            f->p0 = p0;
            f->p1 = p1;
        }
        else {
            f->p0 = p1;
            f->p1 = p0;
        }
        if(scrled)
            (*f->scroll)(f, 0);
        flushimage(f->display, 1);
        if(!scrled)
            readmouse(mc);
        mp = mc->xy;
    }while(mc->buttons == b);
}
@

<<function frselectpaint>>=
void
frselectpaint(Frame *f, Point p0, Point p1, Image *col)
{
    int n;
    Point q0, q1;

    q0 = p0;
    q1 = p1;
    q0.y += f->font->height;
    q1.y += f->font->height;
    n = (p1.y-p0.y)/f->font->height;
    if(f->b == nil)
        drawerror(f->display, "frselectpaint b==0");
    if(p0.y == f->r.max.y)
        return;
    if(n == 0)
        draw(f->b, Rpt(p0, q1), col, nil, ZP);
    else{
        if(p0.x >= f->r.max.x)
            p0.x = f->r.max.x-1;
        draw(f->b, Rect(p0.x, p0.y, f->r.max.x, q0.y), col, nil, ZP);
        if(n > 1)
            draw(f->b, Rect(f->r.min.x, q0.y, f->r.max.x, p1.y),
                col, nil, ZP);
        draw(f->b, Rect(f->r.min.x, p1.y, q1.x, q1.y),
            col, nil, ZP);
    }
}
@


%-------------------------------------------------------------

<<windows/libframe/frselect.c>>=
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <thread.h>
#include <mouse.h>
#include <frame.h>

<<function region>>

<<function frselect>>

<<function frselectpaint>>
@


\subsection*{[[windows/libframe/frstr.c]]}

<<constant CHUNK (windows/libframe/frstr.c)>>=
#define	CHUNK	16
@

<<function ROUNDUP>>=
#define	ROUNDUP(n)	((n+CHUNK)&~(CHUNK-1))
@

<<function _frallocstr>>=
uchar *
_frallocstr(Frame *f, unsigned n)
{
    uchar *p;

    p = malloc(ROUNDUP(n));
    if(p == 0)
        drawerror(f->display, "out of memory");
    return p;
}
@

<<function _frinsure>>=
void
_frinsure(Frame *f, int bn, unsigned n)
{
    Frbox *b;
    uchar *p;

    b = &f->box[bn];
    if(b->nrune < 0)
        drawerror(f->display, "_frinsure");
    if(ROUNDUP(b->nrune) > n)	/* > guarantees room for terminal NUL */
        return;
    p = _frallocstr(f, n);
    b = &f->box[bn];
    memmove(p, b->ptr, NBYTE(b)+1);
    free(b->ptr);
    b->ptr = p;
}
@


%-------------------------------------------------------------

<<windows/libframe/frstr.c>>=
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <thread.h>
#include <mouse.h>
#include <frame.h>

<<constant CHUNK (windows/libframe/frstr.c)>>
<<function ROUNDUP>>

<<function _frallocstr>>

<<function _frinsure>>
@


\subsection*{[[windows/libframe/frutil.c]]}

<<function _frcanfit>>=
int
_frcanfit(Frame *f, Point pt, Frbox *b)
{
    int left, w, nr;
    uchar *p;
    Rune r;

    left = f->r.max.x-pt.x;
    if(b->nrune < 0)
        return b->minwid <= left;
    if(left >= b->wid)
        return b->nrune;
    for(nr=0,p=b->ptr; *p; p+=w,nr++){
        r = *p;
        if(r < Runeself)
            w = 1;
        else
            w = chartorune(&r, (char*)p);
        left -= stringnwidth(f->font, (char*)p, 1);
        if(left < 0)
            return nr;
    }
    drawerror(f->display, "_frcanfit can't");
    return 0;
}
@

<<function _frcklinewrap>>=
void
_frcklinewrap(Frame *f, Point *p, Frbox *b)
{
    if((b->nrune<0? b->minwid : b->wid) > f->r.max.x-p->x){
        p->x = f->r.min.x;
        p->y += f->font->height;
    }
}
@

<<function _frcklinewrap0>>=
void
_frcklinewrap0(Frame *f, Point *p, Frbox *b)
{
    if(_frcanfit(f, *p, b) == 0){
        p->x = f->r.min.x;
        p->y += f->font->height;
    }
}
@

<<function _fradvance>>=
void
_fradvance(Frame *f, Point *p, Frbox *b)
{
    if(b->nrune<0 && b->bc=='\n'){
        p->x = f->r.min.x;
        p->y += f->font->height;
    }else
        p->x += b->wid;
}
@

<<function _frnewwid>>=
int
_frnewwid(Frame *f, Point pt, Frbox *b)
{
    b->wid = _frnewwid0(f, pt, b);
    return b->wid;
}
@

<<function _frnewwid0>>=
int
_frnewwid0(Frame *f, Point pt, Frbox *b)
{
    int c, x;

    c = f->r.max.x;
    x = pt.x;
    if(b->nrune>=0 || b->bc!='\t')
        return b->wid;
    if(x+b->minwid > c)
        x = pt.x = f->r.min.x;
    x += f->maxtab;
    x -= (x-f->r.min.x)%f->maxtab;
    if(x-pt.x<b->minwid || x>c)
        x = pt.x+b->minwid;
    return x-pt.x;
}
@

<<function _frclean>>=
void
_frclean(Frame *f, Point pt, int n0, int n1)	/* look for mergeable boxes */
{
    Frbox *b;
    int nb, c;

    c = f->r.max.x;
    for(nb=n0; nb<n1-1; nb++){
        b = &f->box[nb];
        _frcklinewrap(f, &pt, b);
        while(b[0].nrune>=0 && nb<n1-1 && b[1].nrune>=0 && pt.x+b[0].wid+b[1].wid<c){
            _frmergebox(f, nb);
            n1--;
            b = &f->box[nb];
        }
        _fradvance(f, &pt, &f->box[nb]);
    }
    for(; nb<f->nbox; nb++){
        b = &f->box[nb];
        _frcklinewrap(f, &pt, b);
        _fradvance(f, &pt, &f->box[nb]);
    }
    f->lastlinefull = 0;
    if(pt.y >= f->r.max.y)
        f->lastlinefull = 1;
}
@


%-------------------------------------------------------------

<<windows/libframe/frutil.c>>=
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <thread.h>
#include <mouse.h>
#include <frame.h>

<<function _frcanfit>>

<<function _frcklinewrap>>

<<function _frcklinewrap0>>

<<function _fradvance>>

<<function _frnewwid>>

<<function _frnewwid0>>

<<function _frclean>>
@


\section{[[windows/libpanel/]]}

\subsection*{[[windows/libpanel/button.c]]}

<<struct Button>>=
struct Button{
    int btype;			/* button type */
    Icon *icon;			/* what to write on the button */
    int check;			/* for check/radio buttons */
    void (*hit)(Panel *, int, int);	/* call back user code on check/radio hit */
    void (*menuhit)(int, int);	/* call back user code on menu item hit */
    void (*pl_buttonhit)(Panel *, int);	/* call back user code on button hit */
    int index;			/* arg to menuhit */
    int buttons;
};
@

<<constant BUTTON>>=
/*
 * Button types
 */
#define	BUTTON	1
@

<<constant CHECK>>=
#define	CHECK	2
@

<<constant RADIO>>=
#define	RADIO	3
@

<<function pl_drawbutton>>=
void pl_drawbutton(Panel *p){
    Rectangle r;
    Button *bp;
    bp=p->data;
    r=pl_box(p->b, p->r, p->state);
    switch(bp->btype){
    case CHECK:
        r=pl_check(p->b, r, bp->check);
        break;
    case RADIO:
        r=pl_radio(p->b, r, bp->check);
        break;
    }
    pl_drawicon(p->b, r, PLACECEN, p->flags, bp->icon);
}
@

<<function pl_hitbutton>>=
int pl_hitbutton(Panel *p, Mouse *m){
    int oldstate, hitme;
    Panel *sib;
    Button *bp;
    bp=p->data;
    oldstate=p->state;
    if(m->buttons&OUT){
        hitme=0;
        p->state=UP;
    }
    else if(m->buttons&7){
        hitme=0;
        p->state=DOWN;
        bp->buttons=m->buttons;
    }
    else{	/* mouse inside, but no buttons down */
        hitme=p->state==DOWN;
        p->state=UP;
    }
    if(hitme) switch(bp->btype){
    case CHECK:
        if(hitme) bp->check=!bp->check;
        break;
    case RADIO:
        if(bp->check) bp->check=0;
        else{
            if(p->parent){
                for(sib=p->parent->child;sib;sib=sib->next){
                    if(sib->hit==pl_hitbutton
                    && ((Button *)sib->data)->btype==RADIO
                    && ((Button *)sib->data)->check){
                        ((Button *)sib->data)->check=0;
                        pldraw(sib, p->b);
                    }
                }
            }
            bp->check=1;
        }
        break;
    }
    if(hitme || oldstate!=p->state) pldraw(p, p->b);
    if(hitme && bp->hit){
        bp->hit(p, bp->buttons, bp->check);
        p->state=UP;
    }
    return 0;
}
@

<<function pl_typebutton>>=
void pl_typebutton(Panel *g, Rune c){
    USED(g, c);
}
@

<<function pl_getsizebutton>>=
Point pl_getsizebutton(Panel *p, Point children){
    Point s;
    int ckw;
    Button *bp;
    USED(children);		/* shouldn't have any children */
    bp=p->data;
    s=pl_iconsize(p->flags, bp->icon);
    if(bp->btype!=BUTTON){
        ckw=pl_ckwid();
        if(s.y<ckw){
            s.x+=ckw;
            s.y=ckw;
        }
        else s.x+=s.y;
    }
    return pl_boxsize(s, p->state);
}
@

<<function pl_childspacebutton>>=
void pl_childspacebutton(Panel *g, Point *ul, Point *size){
    USED(g, ul, size);
}
@

<<function pl_initbtype>>=
void pl_initbtype(Panel *v, int flags, Icon *icon, void (*hit)(Panel *, int, int), int btype){
    Button *bp;
    bp=v->data;
    v->flags=flags|LEAF;
    v->state=UP;
    v->draw=pl_drawbutton;
    v->hit=pl_hitbutton;
    v->type=pl_typebutton;
    v->getsize=pl_getsizebutton;
    v->childspace=pl_childspacebutton;
    bp->btype=btype;
    bp->check=0;
    bp->hit=hit;
    bp->icon=icon;
    switch(btype){
    case BUTTON: v->kind="button"; break;
    case CHECK:  v->kind="checkbutton"; break;
    case RADIO:  v->kind="radiobutton"; break;
    }
}
@

<<function pl_buttonhit>>=
void pl_buttonhit(Panel *p, int buttons, int check){
    USED(check);
    if(((Button *)p->data)->pl_buttonhit) ((Button *)p->data)->pl_buttonhit(p, buttons);
}
@

<<function plinitbutton>>=
void plinitbutton(Panel *p, int flags, Icon *icon, void (*hit)(Panel *, int)){
    ((Button *)p->data)->pl_buttonhit=hit;
    pl_initbtype(p, flags, icon, pl_buttonhit, BUTTON);
}
@

<<function plinitcheckbutton>>=
void plinitcheckbutton(Panel *p, int flags, Icon *icon, void (*hit)(Panel *, int, int)){
    pl_initbtype(p, flags, icon, hit, CHECK);
}
@

<<function plinitradiobutton>>=
void plinitradiobutton(Panel *p, int flags, Icon *icon, void (*hit)(Panel *, int, int)){
    pl_initbtype(p, flags, icon, hit, RADIO);
}
@

<<function plbutton>>=
Panel *plbutton(Panel *parent, int flags, Icon *icon, void (*hit)(Panel *, int)){
    Panel *p;
    p=pl_newpanel(parent, sizeof(Button));
    plinitbutton(p, flags, icon, hit);
    return p;
}
@

<<function plcheckbutton>>=
Panel *plcheckbutton(Panel *parent, int flags, Icon *icon, void (*hit)(Panel *, int, int)){
    Panel *p;
    p=pl_newpanel(parent, sizeof(Button));
    plinitcheckbutton(p, flags, icon, hit);
    return p;
}
@

<<function plradiobutton>>=
Panel *plradiobutton(Panel *parent, int flags, Icon *icon, void (*hit)(Panel *, int, int)){
    Panel *p;
    p=pl_newpanel(parent, sizeof(Button));
    plinitradiobutton(p, flags, icon, hit);
    return p;
}
@

<<function pl_hitmenu>>=
void pl_hitmenu(Panel *p, int buttons){
    void (*hit)(int, int);
    hit=((Button *)p->data)->menuhit;
    if(hit) hit(buttons, ((Button *)p->data)->index);
}
@

<<function plinitmenu>>=
void plinitmenu(Panel *v, int flags, Icon **item, int cflags, void (*hit)(int, int)){
    Panel *b;
    int i;
    v->flags=flags;
    v->kind="menu";
    if(v->child){
        plfree(v->child);
        v->child=0;
    }
    for(i=0;item[i];i++){
        b=plbutton(v, cflags, item[i], pl_hitmenu);
        ((Button *)b->data)->menuhit=hit;
        ((Button *)b->data)->index=i;
    }
}
@

<<function plmenu>>=
Panel *plmenu(Panel *parent, int flags, Icon **item, int cflags, void (*hit)(int, int)){
    Panel *v;
    v=plgroup(parent, flags);
    plinitmenu(v, flags, item, cflags, hit);
    return v;
}
@

<<function plsetbutton>>=
void plsetbutton(Panel *p, int val){
    ((Button *)p->data)->check=val;
}
@


%-------------------------------------------------------------

<<windows/libpanel/button.c>>=
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <event.h>
#include <panel.h>
#include "pldefs.h"
typedef struct Button Button;
<<struct Button>>
<<constant BUTTON>>
<<constant CHECK>>
<<constant RADIO>>
<<function pl_drawbutton>>
<<function pl_hitbutton>>
<<function pl_typebutton>>
<<function pl_getsizebutton>>
<<function pl_childspacebutton>>
<<function pl_initbtype>>
<<function pl_buttonhit>>
<<function plinitbutton>>
<<function plinitcheckbutton>>
<<function plinitradiobutton>>
<<function plbutton>>
<<function plcheckbutton>>
<<function plradiobutton>>
<<function pl_hitmenu>>
<<function plinitmenu>>
<<function plmenu>>
<<function plsetbutton>>
@


\subsection*{[[windows/libpanel/canvas.c]]}

<<struct Canvas>>=
struct Canvas{
    void (*draw)(Panel *);
    void (*hit)(Panel *, Mouse *);
};
@

<<function pl_drawcanvas>>=
void pl_drawcanvas(Panel *p){
    Canvas *c;
    c=p->data;
    if(c->draw) c->draw(p);
}
@

<<function pl_hitcanvas>>=
int pl_hitcanvas(Panel *p, Mouse *m){
    Canvas *c;
    c=p->data;
    if(c->hit) c->hit(p, m);
    return 0;
}
@

<<function pl_typecanvas>>=
void pl_typecanvas(Panel *p, Rune c){
    USED(p, c);
}
@

<<function pl_getsizecanvas>>=
Point pl_getsizecanvas(Panel *p, Point children){
    USED(p, children);
    return Pt(0,0);
}
@

<<function pl_childspacecanvas>>=
void pl_childspacecanvas(Panel *p, Point *ul, Point *size){
    USED(p, ul, size);
}
@

<<function plinitcanvas>>=
void plinitcanvas(Panel *v, int flags, void (*draw)(Panel *), void (*hit)(Panel *, Mouse *)){
    Canvas *c;
    v->flags=flags|LEAF;
    v->draw=pl_drawcanvas;
    v->hit=pl_hitcanvas;
    v->type=pl_typecanvas;
    v->getsize=pl_getsizecanvas;
    v->childspace=pl_childspacecanvas;
    v->kind="canvas";
    c=v->data;
    c->draw=draw;
    c->hit=hit;
}
@

<<function plcanvas>>=
Panel *plcanvas(Panel *parent, int flags, void (*draw)(Panel *), void (*hit)(Panel *, Mouse *)){
    Panel *p;
    p=pl_newpanel(parent, sizeof(Canvas));
    plinitcanvas(p, flags, draw, hit);
    return p;
}
@


%-------------------------------------------------------------

<<windows/libpanel/canvas.c>>=
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <event.h>
#include <panel.h>
#include "pldefs.h"
typedef struct Canvas Canvas;
<<struct Canvas>>
<<function pl_drawcanvas>>
<<function pl_hitcanvas>>
<<function pl_typecanvas>>
<<function pl_getsizecanvas>>
<<function pl_childspacecanvas>>
<<function plinitcanvas>>
<<function plcanvas>>
@


\subsection*{[[windows/libpanel/draw.c]]}

<<constant PWID>>=
#define	PWID	1	/* width of label border */
@

<<constant BWID>>=
#define	BWID	1	/* width of button relief */
@

<<constant FWID>>=
#define	FWID	2	/* width of frame relief */
@

<<constant SPACE>>=
#define	SPACE	1	/* space inside relief of button or frame */
@

<<constant CKSIZE>>=
#define	CKSIZE	3	/* size of check mark */
@

<<constant CKSPACE>>=
#define	CKSPACE	2	/* space around check mark */
@

<<constant CKWID>>=
#define	CKWID	1	/* width of frame around check mark */
@

<<constant CKINSET>>=
#define	CKINSET	1	/* space around check mark frame */
@

<<constant CKBORDER>>=
#define	CKBORDER 2	/* space around X inside frame */
@

<<global plldepth>>=
static int plldepth;
@

<<function pl_drawinit>>=
int pl_drawinit(int ldepth){
    plldepth=ldepth;
    pl_white=allocimage(display, Rect(0,0,1,1), screen->chan, 1, 0xFFFFFFFF);
    pl_light=allocimagemix(display, DPalebluegreen, DWhite);
    pl_dark =allocimage(display, Rect(0,0,1,1), screen->chan, 1, DPurpleblue);
    pl_black=allocimage(display, Rect(0,0,1,1), screen->chan, 1, 0x000000FF);
    pl_hilit=allocimage(display, Rect(0,0,1,1), CHAN1(CAlpha,8), 1, 0x80);
    if(pl_white==0 || pl_light==0 || pl_black==0 || pl_dark==0) return 0;
    return 1;
}
@

<<function pl_relief>>=
void pl_relief(Image *b, Image *ul, Image *lr, Rectangle r, int wid){
    int x, y;
    draw(b, Rect(r.min.x, r.max.y-wid, r.max.x, r.max.y), lr, 0, ZP); /* bottom */
    draw(b, Rect(r.max.x-wid, r.min.y, r.max.x, r.max.y), lr, 0, ZP); /* right */
    draw(b, Rect(r.min.x, r.min.y, r.min.x+wid, r.max.y), ul, 0, ZP); /* left */
    draw(b, Rect(r.min.x, r.min.y, r.max.x, r.min.y+wid), ul, 0, ZP); /* top */
    for(x=0;x!=wid;x++) for(y=wid-1-x;y!=wid;y++){
        draw(b, rectaddpt(Rect(0,0,1,1), Pt(x+r.max.x-wid, y+r.min.y)), lr, 0, ZP);
        draw(b, rectaddpt(Rect(0,0,1,1), Pt(x+r.min.x, y+r.max.y-wid)), lr, 0, ZP);
    }
}
@

<<function pl_boxoutline>>=
Rectangle pl_boxoutline(Image *b, Rectangle r, int style, int fill){
    if(plldepth==0) switch(style){
    case UP:
        pl_relief(b, pl_black, pl_black, r, BWID);
        r=insetrect(r, BWID);
        if(fill) draw(b, r, pl_white, 0, ZP);
        else border(b, r, SPACE, pl_white, ZP);
        break;
    case DOWN:
    case DOWN1:
    case DOWN2:
    case DOWN3:
        pl_relief(b, pl_black, pl_black, r, BWID);
        r=insetrect(r, BWID);
        if(fill) draw(b, r, pl_black, 0, ZP);
        border(b, r, SPACE, pl_black, ZP);
        break;
    case PASSIVE:
        if(fill) draw(b, r, pl_white, 0, ZP);
        r=insetrect(r, PWID);
        if(!fill) border(b, r, SPACE, pl_white, ZP);
        break;
    case FRAME:
        pl_relief(b, pl_white, pl_black, r, FWID);
        r=insetrect(r, FWID);
        pl_relief(b, pl_black, pl_white, r, FWID);
        r=insetrect(r, FWID);
        if(fill) draw(b, r, pl_white, 0, ZP);
        else border(b, r, SPACE, pl_white, ZP);
        break;
    }
    else switch(style){
    case UP:
        pl_relief(b, pl_white, pl_black, r, BWID);
        r=insetrect(r, BWID);
        if(fill) draw(b, r, pl_light, 0, ZP);
        else border(b, r, SPACE, pl_white, ZP);
        break;
    case DOWN:
    case DOWN1:
    case DOWN2:
    case DOWN3:
        pl_relief(b, pl_black, pl_white, r, BWID);
        r=insetrect(r, BWID);
        if(fill) draw(b, r, pl_dark, 0, ZP);
        else border(b, r, SPACE, pl_black, ZP);
        break;
    case PASSIVE:
        if(fill) draw(b, r, pl_light, 0, ZP);
        r=insetrect(r, PWID);
        if(!fill) border(b, r, SPACE, pl_white, ZP);
        break;
    case FRAME:
        pl_relief(b, pl_white, pl_black, r, FWID);
        r=insetrect(r, FWID);
        pl_relief(b, pl_black, pl_white, r, FWID);
        r=insetrect(r, FWID);
        if(fill) draw(b, r, pl_light, 0, ZP);
        else border(b, r, SPACE, pl_white, ZP);
        break;
    }
    return insetrect(r, SPACE);
}
@

<<function pl_outline>>=
Rectangle pl_outline(Image *b, Rectangle r, int style){
    return pl_boxoutline(b, r, style, 0);
}
@

<<function pl_box>>=
Rectangle pl_box(Image *b, Rectangle r, int style){
    return pl_boxoutline(b, r, style, 1);
}
@

<<function pl_boxsize>>=
Point pl_boxsize(Point interior, int state){
    switch(state){
    case UP:
    case DOWN:
    case DOWN1:
    case DOWN2:
    case DOWN3:
        return addpt(interior, Pt(2*(BWID+SPACE), 2*(BWID+SPACE)));
    case PASSIVE:
        return addpt(interior, Pt(2*(PWID+SPACE), 2*(PWID+SPACE)));
    case FRAME:
        return addpt(interior, Pt(4*FWID+2*SPACE, 4*FWID+2*SPACE));
    }
    return Pt(0, 0);
}
@

<<function pl_interior>>=
void pl_interior(int state, Point *ul, Point *size){
    switch(state){
    case UP:
    case DOWN:
    case DOWN1:
    case DOWN2:
    case DOWN3:
        *ul=addpt(*ul, Pt(BWID+SPACE, BWID+SPACE));
        *size=subpt(*size, Pt(2*(BWID+SPACE), 2*(BWID+SPACE)));
        break;
    case PASSIVE:
        *ul=addpt(*ul, Pt(PWID+SPACE, PWID+SPACE));
        *size=subpt(*size, Pt(2*(PWID+SPACE), 2*(PWID+SPACE)));
        break;
    case FRAME:
        *ul=addpt(*ul, Pt(2*FWID+SPACE, 2*FWID+SPACE));
        *size=subpt(*size, Pt(4*FWID+2*SPACE, 4*FWID+2*SPACE));
    }
}
@

<<function pl_drawicon>>=
void pl_drawicon(Image *b, Rectangle r, int stick, int flags, Icon *s){
    Rectangle save;
    Point ul, offs;
    ul=r.min;
    offs=subpt(subpt(r.max, r.min), pl_iconsize(flags, s));
    switch(stick){
    case PLACENW:	                                break;
    case PLACEN:	ul.x+=offs.x/2;                 break;
    case PLACENE:	ul.x+=offs.x;                   break;
    case PLACEW:	                ul.y+=offs.y/2; break;
    case PLACECEN:	ul.x+=offs.x/2; ul.y+=offs.y/2; break;
    case PLACEE:	ul.x+=offs.x;                   break;
    case PLACESW:	                ul.y+=offs.y;   break;
    case PLACES:	ul.x+=offs.x/2; ul.y+=offs.y;   break;
    case PLACESE:	ul.x+=offs.x;   ul.y+=offs.y;   break;
    }
    save=b->clipr;
    if(!rectclip(&r, save))
        return;
    replclipr(b, b->repl, r);
    if(flags&BITMAP) draw(b, Rpt(ul, addpt(ul, pl_iconsize(flags, s))), s, 0, ZP);
    else string(b, ul, pl_black, ZP, font, s);
    replclipr(b, b->repl, save);
}
@

<<function pl_radio>>=
/*
 * Place a check mark at the left end of r.  Return the unused space.
 * Caller must guarantee that r.max.x-r.min.x>=r.max.y-r.min.y!
 */
Rectangle pl_radio(Image *b, Rectangle r, int val){
    Rectangle remainder;
    remainder=r;
    r.max.x=r.min.x+r.max.y-r.min.y;
    remainder.min.x=r.max.x;
    r=insetrect(r, CKINSET);
    if(plldepth==0)
        pl_relief(b, pl_black, pl_black, r, CKWID);
    else
        pl_relief(b, pl_black, pl_white, r, CKWID);
    r=insetrect(r, CKWID);
    if(plldepth==0)
        draw(b, r, pl_white, 0, ZP);
    else
        draw(b, r, pl_light, 0, ZP);
    if(val) draw(b, insetrect(r, CKSPACE), pl_black, 0, ZP);
    return remainder;
}
@

<<function pl_check>>=
Rectangle pl_check(Image *b, Rectangle r, int val){
    Rectangle remainder;
    remainder=r;
    r.max.x=r.min.x+r.max.y-r.min.y;
    remainder.min.x=r.max.x;
    r=insetrect(r, CKINSET);
    if(plldepth==0)
        pl_relief(b, pl_black, pl_black, r, CKWID);
    else
        pl_relief(b, pl_black, pl_white, r, CKWID);
    r=insetrect(r, CKWID);
    if(plldepth==0)
        draw(b, r, pl_white, 0, ZP);
    else
        draw(b, r, pl_light, 0, ZP);
    r=insetrect(r, CKBORDER);
    if(val){
        line(b, Pt(r.min.x,   r.min.y+1), Pt(r.max.x-1, r.max.y  ), Endsquare, Endsquare, 0, pl_black, ZP);
        line(b, Pt(r.min.x,   r.min.y  ), Pt(r.max.x,   r.max.y  ), Endsquare, Endsquare, 0, pl_black, ZP);
        line(b, Pt(r.min.x+1, r.min.y  ), Pt(r.max.x,   r.max.y-1), Endsquare, Endsquare, 0, pl_black, ZP);
        line(b, Pt(r.min.x  , r.max.y-2), Pt(r.max.x-1, r.min.y-1), Endsquare, Endsquare, 0, pl_black, ZP);
        line(b, Pt(r.min.x,   r.max.y-1), Pt(r.max.x,   r.min.y-1), Endsquare, Endsquare, 0, pl_black, ZP);
        line(b, Pt(r.min.x+1, r.max.y-1), Pt(r.max.x,   r.min.y  ), Endsquare, Endsquare, 0, pl_black, ZP);
    }
    return remainder;
}
@

<<function pl_ckwid>>=
int pl_ckwid(void){
    return 2*(CKINSET+CKSPACE+CKWID)+CKSIZE;
}
@

<<function pl_sliderupd>>=
void pl_sliderupd(Image *b, Rectangle r1, int dir, int lo, int hi){
    Rectangle r2, r3;
    r2=r1;
    r3=r1;
    if(lo<0) lo=0;
    if(hi<=lo) hi=lo+1;
    switch(dir){
    case HORIZ:
        r1.max.x=r1.min.x+lo;
        r2.min.x=r1.max.x;
        r2.max.x=r1.min.x+hi;
        if(r2.max.x>r3.max.x) r2.max.x=r3.max.x;
        r3.min.x=r2.max.x;
        break;
    case VERT:
        r1.max.y=r1.min.y+lo;
        r2.min.y=r1.max.y;
        r2.max.y=r1.min.y+hi;
        if(r2.max.y>r3.max.y) r2.max.y=r3.max.y;
        r3.min.y=r2.max.y;
        break;
    }
    draw(b, r1, pl_light, 0, ZP);
    draw(b, r2, pl_dark, 0, ZP);
    draw(b, r3, pl_light, 0, ZP);
}
@

<<function pl_drawall>>=
void pl_drawall(Panel *p, Image *b){
    if(p->flags&INVIS) return;
    p->b=b;
    p->draw(p);
    for(p=p->child;p;p=p->next) pl_draw1(p, b);
}
@

<<function pl_draw1>>=
void pl_draw1(Panel *p, Image *b){
    if(b!=0)
        pl_drawall(p, b);
}
@

<<function pldraw>>=
void pldraw(Panel *p, Image *b){
    pl_draw1(p, b);
    flushimage(display, 1);
}
@

<<function pl_invis>>=
void pl_invis(Panel *p, int v){
    for(;p;p=p->next){
        if(v) p->flags|=INVIS; else p->flags&=~INVIS;
        pl_invis(p->child, v);
    }
}
@

<<function pl_iconsize>>=
Point pl_iconsize(int flags, Icon *p){
    if(flags&BITMAP) return subpt(((Image *)p)->r.max, ((Image *)p)->r.min);
    return stringsize(font, (char *)p);
}
@

<<function pl_highlight>>=
void pl_highlight(Image *b, Rectangle r){
    draw(b, r, pl_dark, pl_hilit, ZP);
}
@

<<function pl_clr>>=
void pl_clr(Image *b, Rectangle r){
    draw(b, r, display->white, 0, ZP);
}
@

<<function pl_fill>>=
void pl_fill(Image *b, Rectangle r){
    draw(b, r, plldepth==0? pl_white : pl_light, 0, ZP);
}
@

<<function pl_cpy>>=
void pl_cpy(Image *b, Point dst, Rectangle src){
    draw(b, Rpt(dst, addpt(dst, subpt(src.max, src.min))), b, 0, src.min);
}
@


%-------------------------------------------------------------

<<windows/libpanel/draw.c>>=
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <event.h>
#include <panel.h>
#include "pldefs.h"
<<constant PWID>>
<<constant BWID>>
<<constant FWID>>
<<constant SPACE>>
<<constant CKSIZE>>
<<constant CKSPACE>>
<<constant CKWID>>
<<constant CKINSET>>
<<constant CKBORDER>>
<<global plldepth>>
static Image *pl_white, *pl_light, *pl_dark, *pl_black, *pl_hilit;
<<function pl_drawinit>>
<<function pl_relief>>
<<function pl_boxoutline>>
<<function pl_outline>>
<<function pl_box>>
<<function pl_boxsize>>
<<function pl_interior>>

<<function pl_drawicon>>
<<function pl_radio>>
<<function pl_check>>
<<function pl_ckwid>>
<<function pl_sliderupd>>
void pl_draw1(Panel *p, Image *b);
<<function pl_drawall>>
<<function pl_draw1>>
<<function pldraw>>
<<function pl_invis>>
<<function pl_iconsize>>
<<function pl_highlight>>
<<function pl_clr>>
<<function pl_fill>>
<<function pl_cpy>>
@


\subsection*{[[windows/libpanel/edit.c]]}

<<struct Edit>>=
struct Edit{
    Point minsize;
    void (*hit)(Panel *);
    int sel0, sel1;
    Textwin *t;
    Rune *text;
    int ntext;
};
@

<<function pl_drawedit>>=
void pl_drawedit(Panel *p){
    Edit *ep;
    Panel *sb;
    ep=p->data;
    if(ep->t==0){
        ep->t=twnew(p->b, font, ep->text, ep->ntext);
        if(ep->t==0){
            fprint(2, "pl_drawedit: can't allocate\n");
            exits("no mem");
        }
    }
    ep->t->b=p->b;
    twreshape(ep->t, p->r);
    twhilite(ep->t, ep->sel0, ep->sel1, 1);
    sb=p->yscroller;
    if(sb && sb->setscrollbar)
        sb->setscrollbar(sb, ep->t->top, ep->t->bot, ep->t->etext-ep->t->text);
}
@

<<function pl_snarfedit>>=
char *pl_snarfedit(Panel *p){
    int s0, s1;
    Rune *t;
    t=pleget(p);
    plegetsel(p, &s0, &s1);
    if(t==0 || s0>=s1)
        return nil;
    return smprint("%.*S", s1-s0, t+s0);
}
@

<<function pl_pasteedit>>=
void pl_pasteedit(Panel *p, char *s){
    Rune *t;
    if(t=runesmprint("%s", s)){
        plepaste(p, t, runestrlen(t));
        free(t);
    }
}
@

<<function pl_hitedit>>=
/*
 * Should do double-clicks:
 *	If ep->sel0==ep->sel1 on entry and the
 *	call to twselect returns the same selection, then
 *	expand selections (| marks possible selection points, ... is expanded selection)
 *	<|...|>			<> must nest
 *	(|...|)			() must nest
 *	[|...|]			[] must nest
 *	{|...|}			{} must nest
 *	'|...|'			no ' in ...
 *	"|...|"			no " in ...
 *	\n|...|\n		either newline may be the corresponding end of text
 *				include the trailing newline in the selection
 *	...|I...		I and ... are characters satisfying pl_idchar(I)
 *	...I|
 */
int pl_hitedit(Panel *p, Mouse *m){
    Edit *ep;
    ep=p->data;
    if(ep->t && m->buttons&1){
        plgrabkb(p);
        ep->t->b=p->b;
        twhilite(ep->t, ep->sel0, ep->sel1, 0);
        twselect(ep->t, m);
        ep->sel0=ep->t->sel0;
        ep->sel1=ep->t->sel1;
        if((m->buttons&7)==3){
            plsnarf(p);
            plepaste(p, 0, 0);	/* cut */
        }
        else if((m->buttons&7)==5)
            plpaste(p);
        else if(ep->hit)
            (*ep->hit)(p);
    }
    return 0;
}
@

<<function pl_scrolledit>>=
void pl_scrolledit(Panel *p, int dir, int buttons, int num, int den){
    Edit *ep;
    Textwin *t;
    Panel *sb;
    int index, nline;
    if(dir!=VERT) return;
    ep=p->data;
    t=ep->t;
    if(t==0) return;
    t->b=p->b;
    switch(buttons){
    default:
        return;
    case 1:		/* top line moves to mouse position */
        nline=(t->r.max.y-t->r.min.y)/t->hgt*num/den;
        index=t->top;
        while(index!=0 && nline!=0)
            if(t->text[--index]=='\n') --nline;
        break;
    case 2:		/* absolute */
        index=(t->etext-t->text)*num/den;
        break;
    case 4:		/* mouse points at new top line */
        index=twpt2rune(t,
            Pt(t->r.min.x, t->r.min.y+(t->r.max.y-t->r.min.y)*num/den));
        break;
    }
    while(index!=0 && t->text[index-1]!='\n') --index;
    if(index!=t->top){
        twhilite(ep->t, ep->sel0, ep->sel1, 0);
        twscroll(t, index);
        p->scr.pos.y=t->top;
        twhilite(ep->t, ep->sel0, ep->sel1, 1);
        sb=p->yscroller;
        if(sb && sb->setscrollbar)
            sb->setscrollbar(sb, t->top, t->bot, t->etext-t->text);
    }
}
@

<<function pl_typeedit>>=
void pl_typeedit(Panel *p, Rune c){
    Edit *ep;
    Textwin *t;
    int bot, scrolled;
    Panel *sb;
    ep=p->data;
    t=ep->t;
    if(t==0) return;
    t->b=p->b;
    twhilite(t, ep->sel0, ep->sel1, 0);
    switch(c){
    case Kesc:
        plsnarf(p);
        plepaste(p, 0, 0);	/* cut */
        break;
    case Kdel:	/* clear */
        ep->sel0=0;
        ep->sel1=plelen(p);
        plepaste(p, 0, 0);	/* cut */
        break;
    case Kbs:	/* ^H: erase character */
        if(ep->sel0!=0) --ep->sel0;
        twreplace(t, ep->sel0, ep->sel1, 0, 0);
        break;
//	case Knack:	/* ^U: erase line */
//		while(ep->sel0!=0 && t->text[ep->sel0-1]!='\n') --ep->sel0;
//		twreplace(t, ep->sel0, ep->sel1, 0, 0);
//		break;
//	case Ketb:	/* ^W: erase word */
//		while(ep->sel0!=0 && !pl_idchar(t->text[ep->sel0-1])) --ep->sel0;
//		while(ep->sel0!=0 && pl_idchar(t->text[ep->sel0-1])) --ep->sel0;
//		twreplace(t, ep->sel0, ep->sel1, 0, 0);
//		break;
    default:
        if((c & 0xFF00) == KF || (c & 0xFF00) == Spec)
            break;
        twreplace(t, ep->sel0, ep->sel1, &c, 1);
        ++ep->sel0;
        break;
    }
    ep->sel1=ep->sel0;
    /*
     * Scroll up until ep->sel0 is above t->bot.
     */
    scrolled=0;
    do{
        bot=t->bot;
        if(ep->sel0<=bot) break;
        twscroll(t, twpt2rune(t, Pt(t->r.min.x, t->r.min.y+font->height)));
        scrolled++;
    }while(bot!=t->bot);
    if(scrolled){
        sb=p->yscroller;
        if(sb && sb->setscrollbar)
            sb->setscrollbar(sb, t->top, t->bot, t->etext-t->text);
    }
    twhilite(t, ep->sel0, ep->sel1, 1);
}
@

<<function pl_getsizeedit>>=
Point pl_getsizeedit(Panel *p, Point children){
    USED(children);
    return pl_boxsize(((Edit *)p->data)->minsize, p->state);
}
@

<<function pl_childspaceedit>>=
void pl_childspaceedit(Panel *g, Point *ul, Point *size){
    USED(g, ul, size);
}
@

<<function pl_freeedit>>=
void pl_freeedit(Panel *p){
    Edit *ep;
    ep=p->data;
    if(ep->t) twfree(ep->t);
    ep->t=0;
}
@

<<function plinitedit>>=
void plinitedit(Panel *v, int flags, Point minsize, Rune *text, int ntext, void (*hit)(Panel *)){
    Edit *ep;
    ep=v->data;
    v->flags=flags|LEAF;
    v->state=UP;
    v->draw=pl_drawedit;
    v->hit=pl_hitedit;
    v->type=pl_typeedit;
    v->getsize=pl_getsizeedit;
    v->childspace=pl_childspaceedit;
    v->free=pl_freeedit;
    v->snarf=pl_snarfedit;
    v->paste=pl_pasteedit;
    v->kind="edit";
    ep->hit=hit;
    ep->minsize=minsize;
    ep->text=text;
    ep->ntext=ntext;
    if(ep->t!=0) twfree(ep->t);
    ep->t=0;
    ep->sel0=-1;
    ep->sel1=-1;
    v->scroll=pl_scrolledit;
    v->scr.pos=Pt(0,0);
    v->scr.size=Pt(ntext,0);
}
@

<<function pledit>>=
Panel *pledit(Panel *parent, int flags, Point minsize, Rune *text, int ntext, void (*hit)(Panel *)){
    Panel *v;
    v=pl_newpanel(parent, sizeof(Edit));
    ((Edit *)v->data)->t=0;
    plinitedit(v, flags, minsize, text, ntext, hit);
    return v;
}
@

<<function plescroll>>=
void plescroll(Panel *p, int top){
    Textwin *t;
    t=((Edit*)p->data)->t;
    if(t) twscroll(t, top);
}
@

<<function plegetsel>>=
void plegetsel(Panel *p, int *sel0, int *sel1){
    Edit *ep;
    ep=p->data;
    *sel0=ep->sel0;
    *sel1=ep->sel1;
}
@

<<function plelen>>=
int plelen(Panel *p){
    Textwin *t;
    t=((Edit*)p->data)->t;
    if(t==0) return 0;
    return t->etext-t->text;
}
@

<<function pleget>>=
Rune *pleget(Panel *p){
    Textwin *t;
    t=((Edit*)p->data)->t;
    if(t==0) return 0;
    return t->text;
}
@

<<function plesel>>=
void plesel(Panel *p, int sel0, int sel1){
    Edit *ep;
    ep=p->data;
    if(ep->t==0) return;
    ep->t->b=p->b;
    twhilite(ep->t, ep->sel0, ep->sel1, 0);
    ep->sel0=sel0;
    ep->sel1=sel1;
    twhilite(ep->t, ep->sel0, ep->sel1, 1);
}
@

<<function plepaste>>=
void plepaste(Panel *p, Rune *text, int ntext){
    Edit *ep;
    ep=p->data;
    if(ep->t==0) return;
    ep->t->b=p->b;
    twhilite(ep->t, ep->sel0, ep->sel1, 0);
    twreplace(ep->t, ep->sel0, ep->sel1, text, ntext);
    ep->sel1=ep->sel0+ntext;
    twhilite(ep->t, ep->sel0, ep->sel1, 1);
    p->scr.size.y=ep->t->etext-ep->t->text;
    p->scr.pos.y=ep->t->top;
}
@

<<function plemove>>=
void plemove(Panel *p, Point d){
    Edit *ep;
    ep=p->data;
    if(ep->t && !eqpt(d, Pt(0,0))) twmove(ep->t, d);
}
@


%-------------------------------------------------------------

<<windows/libpanel/edit.c>>=
/*
 * Interface includes:
 *	void plescroll(Panel *p, int top);
 *		move the given character position onto the top line
 *	void plegetsel(Panel *p, int *sel0, int *sel1);
 *		read the selection back
 *	int plelen(Panel *p);
 *		read the length of the text back
 *	Rune *pleget(Panel *p);
 *		get a pointer to the text
 *	void plesel(Panel *p, int sel0, int sel1);
 *		set the selection -- adjusts hiliting
 *	void plepaste(Panel *p, Rune *text, int ntext);
 *		replace the selection with the given text
 */
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <event.h>
#include <panel.h>
#include "pldefs.h"
#include <keyboard.h>

typedef struct Edit Edit;
<<struct Edit>>
<<function pl_drawedit>>

<<function pl_snarfedit>>
<<function pl_pasteedit>>

<<function pl_hitedit>>
<<function pl_scrolledit>>
<<function pl_typeedit>>
<<function pl_getsizeedit>>
<<function pl_childspaceedit>>
<<function pl_freeedit>>
<<function plinitedit>>
<<function pledit>>
<<function plescroll>>
<<function plegetsel>>
<<function plelen>>
<<function pleget>>
<<function plesel>>
<<function plepaste>>
<<function plemove>>
@


\subsection*{[[windows/libpanel/entry.c]]}

<<struct Entry>>=
struct Entry{
    char *entry;
    char *entp;
    char *eent;
    void (*hit)(Panel *, char *);
    Point minsize;
};
@

<<constant SLACK>>=
#define	SLACK	7	/* enough for one extra rune and ◀ and a nul */
@

<<function pl_snarfentry>>=
char *pl_snarfentry(Panel *p){
    Entry *ep;
    int n;

    if(p->flags&USERFL)	/* no snarfing from password entry */
        return nil;
    ep=p->data;
    n=ep->entp-ep->entry;
    if(n<=0) return nil;
    return smprint("%.*s", n, ep->entry);
}
@

<<function pl_pasteentry>>=
void pl_pasteentry(Panel *p, char *s){
    Entry *ep;
    char *e;
    int n, m;

    ep=p->data;
    n=ep->entp-ep->entry;
    m=strlen(s);
    e=pl_erealloc(ep->entry,n+m+SLACK);
    ep->entry=e;
    e+=n;
    strncpy(e, s, m);
    e+=m;
    *e='\0';
    ep->entp=ep->eent=e;
    pldraw(p, p->b);
}
@

<<function pl_drawentry>>=
void pl_drawentry(Panel *p){
    Rectangle r;
    Entry *ep;
    char *s;

    ep=p->data;
    r=pl_box(p->b, p->r, p->state);
    s=ep->entry;
    if(p->flags & USERFL){
        char *p;
        s=strdup(s);
        for(p=s; *p; p++)
            *p='*';
    }
    if(stringwidth(font, s)<=r.max.x-r.min.x)
        pl_drawicon(p->b, r, PLACEW, 0, s);
    else
        pl_drawicon(p->b, r, PLACEE, 0, s);
    if(s != ep->entry)
        free(s);
}
@

<<function pl_hitentry>>=
int pl_hitentry(Panel *p, Mouse *m){
    if((m->buttons&7)==1){
        plgrabkb(p);

        p->state=DOWN;
        pldraw(p, p->b);
        while(m->buttons&1){
            int old;
            old=m->buttons;
            *m=emouse();
            if((old&7)==1){
                if((m->buttons&7)==3){
                    Entry *ep;

                    plsnarf(p);

                    /* cut */
                    ep=p->data;
                    ep->entp=ep->entry;
                    *ep->entp='\0';
                    pldraw(p, p->b);
                }
                if((m->buttons&7)==5)
                    plpaste(p);
            }
        }
        p->state=UP;
        pldraw(p, p->b);
    }
    return 0;
}
@

<<function pl_typeentry>>=
void pl_typeentry(Panel *p, Rune c){
    int n;
    Entry *ep;
    ep=p->data;
    switch(c){
    case '\n':
    case '\r':
        *ep->entp='\0';
        if(ep->hit) ep->hit(p, ep->entry);
        return;
    case Kesc:
        plsnarf(p);
        /* no break */
    case Kdel:	/* clear */
//	case Knack:	/* ^U: erase line */
//		ep->entp=ep->entry;
//		*ep->entp='\0';
//		break;
    case Kbs:	/* ^H: erase character */
        while(ep->entp!=ep->entry && !pl_rune1st(ep->entp[-1])) *--ep->entp='\0';
        if(ep->entp!=ep->entry) *--ep->entp='\0';
        break;
//	case Ketb:	/* ^W: erase word */
//		while(ep->entp!=ep->entry && !pl_idchar(ep->entp[-1]))
//			--ep->entp;
//		while(ep->entp!=ep->entry && pl_idchar(ep->entp[-1]))
//			--ep->entp;
//		*ep->entp='\0';
//		break;
    default:
        if(c < 0x20 || (c & 0xFF00) == KF || (c & 0xFF00) == Spec)
            break;
        ep->entp+=runetochar(ep->entp, &c);
        if(ep->entp>ep->eent){
            n=ep->entp-ep->entry;
            ep->entry=pl_erealloc(ep->entry, n+100+SLACK);
            ep->entp=ep->entry+n;
            ep->eent=ep->entp+100;
        }
        *ep->entp='\0';
        break;
    }
    pldraw(p, p->b);
}
@

<<function pl_getsizeentry>>=
Point pl_getsizeentry(Panel *p, Point children){
    USED(children);
    return pl_boxsize(((Entry *)p->data)->minsize, p->state);
}
@

<<function pl_childspaceentry>>=
void pl_childspaceentry(Panel *p, Point *ul, Point *size){
    USED(p, ul, size);
}
@

<<function pl_freeentry>>=
void pl_freeentry(Panel *p){
    Entry *ep;
    ep = p->data;
    free(ep->entry);
    ep->entry = ep->eent = ep->entp = 0;
}
@

<<function plinitentry>>=
void plinitentry(Panel *v, int flags, int wid, char *str, void (*hit)(Panel *, char *)){
    int elen;
    Entry *ep;
    ep=v->data;
    v->flags=flags|LEAF;
    v->state=UP;
    v->draw=pl_drawentry;
    v->hit=pl_hitentry;
    v->type=pl_typeentry;
    v->getsize=pl_getsizeentry;
    v->childspace=pl_childspaceentry;
    ep->minsize=Pt(wid, font->height);
    v->free=pl_freeentry;
    v->snarf=pl_snarfentry;
    v->paste=pl_pasteentry;
    elen=100;
    if(str) elen+=strlen(str);
    ep->entry=pl_erealloc(ep->entry, elen+SLACK);
    ep->eent=ep->entry+elen;
    strecpy(ep->entry, ep->eent, str ? str : "");
    ep->entp=ep->entry+strlen(ep->entry);
    ep->hit=hit;
    v->kind="entry";
}
@

<<function plentry>>=
Panel *plentry(Panel *parent, int flags, int wid, char *str, void (*hit)(Panel *, char *)){
    Panel *v;
    v=pl_newpanel(parent, sizeof(Entry));
    plinitentry(v, flags, wid, str, hit);
    return v;
}
@

<<function plentryval>>=
char *plentryval(Panel *p){
    Entry *ep;
    ep=p->data;
    *ep->entp='\0';
    return ep->entry;
}
@


%-------------------------------------------------------------

<<windows/libpanel/entry.c>>=
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <event.h>
#include <panel.h>
#include "pldefs.h"
#include <keyboard.h>

typedef struct Entry Entry;
<<struct Entry>>
<<constant SLACK>>
<<function pl_snarfentry>>
<<function pl_pasteentry>>
<<function pl_drawentry>>
<<function pl_hitentry>>
<<function pl_typeentry>>
<<function pl_getsizeentry>>
<<function pl_childspaceentry>>
<<function pl_freeentry>>
<<function plinitentry>>
<<function plentry>>
<<function plentryval>>
@


\subsection*{[[windows/libpanel/event.c]]}

<<function plgrabkb>>=
void plgrabkb(Panel *g){
    plkbfocus=g;
}
@

<<function plkeyboard>>=
void plkeyboard(Rune c){
    if(plkbfocus){
        plkbfocus->type(plkbfocus, c);
        flushimage(display, 1);
    }
}
@

<<function pl_ptinpanel>>=
/*
 * Return the most leafward, highest priority panel containing p
 */
Panel *pl_ptinpanel(Point p, Panel *g){
    Panel *v;
    for(;g;g=g->next) if(ptinrect(p, g->r)){
        v=pl_ptinpanel(p, g->child);
        if(v && v->pri(v, p)>=g->pri(g, p)) return v;
        return g;
    }
    return 0;
}
@

<<function plmouse>>=
void plmouse(Panel *g, Mouse *m){
    Panel *hit, *last;
    if(g->flags&REMOUSE)
        hit=g->lastmouse;
    else{
        hit=pl_ptinpanel(m->xy, g);
        last=g->lastmouse;
        if(last && last!=hit){
            m->buttons|=OUT;
            last->hit(last, m);
            m->buttons&=~OUT;
        }
    }
    if(hit){
        if(hit->hit(hit, m))
            g->flags|=REMOUSE;
        else
            g->flags&=~REMOUSE;
        g->lastmouse=hit;
    }
    flushimage(display, 1);
}
@


%-------------------------------------------------------------

<<windows/libpanel/event.c>>=
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <event.h>
#include <panel.h>
#include "pldefs.h"

<<function plgrabkb>>
<<function plkeyboard>>

<<function pl_ptinpanel>>
<<function plmouse>>
@


\subsection*{[[windows/libpanel/frame.c]]}

<<function pl_drawframe>>=
void pl_drawframe(Panel *p){
    pl_box(p->b, p->r, FRAME);
}
@

<<function pl_hitframe>>=
int pl_hitframe(Panel *p, Mouse *m){
    USED(p, m);
    return 0;
}
@

<<function pl_typeframe>>=
void pl_typeframe(Panel *p, Rune c){
    USED(p, c);
}
@

<<function pl_getsizeframe>>=
Point pl_getsizeframe(Panel *p, Point children){
    USED(p);
    return pl_boxsize(children, FRAME);
}
@

<<function pl_childspaceframe>>=
void pl_childspaceframe(Panel *p, Point *ul, Point *size){
    USED(p);
    pl_interior(FRAME, ul, size);
}
@

<<function plinitframe>>=
void plinitframe(Panel *v, int flags){
    v->flags=flags;
    v->draw=pl_drawframe;
    v->hit=pl_hitframe;
    v->type=pl_typeframe;
    v->getsize=pl_getsizeframe;
    v->childspace=pl_childspaceframe;
    v->kind="frame";
}
@

<<function plframe>>=
Panel *plframe(Panel *parent, int flags){
    Panel *p;
    p=pl_newpanel(parent, 0);
    plinitframe(p, flags);
    return p;
}
@


%-------------------------------------------------------------

<<windows/libpanel/frame.c>>=
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <event.h>
#include <panel.h>
#include "pldefs.h"
<<function pl_drawframe>>
<<function pl_hitframe>>
<<function pl_typeframe>>
<<function pl_getsizeframe>>
<<function pl_childspaceframe>>
<<function plinitframe>>
<<function plframe>>
@


\subsection*{[[windows/libpanel/group.c]]}

<<function pl_drawgroup>>=
void pl_drawgroup(Panel *p){
    USED(p);
}
@

<<function pl_hitgroup>>=
int pl_hitgroup(Panel *p, Mouse *m){
    USED(p, m);
    return 0;
}
@

<<function pl_typegroup>>=
void pl_typegroup(Panel *p, Rune c){
    USED(p, c);
}
@

<<function pl_getsizegroup>>=
Point pl_getsizegroup(Panel *p, Point children){
    USED(p);
    return children;
}
@

<<function pl_childspacegroup>>=
void pl_childspacegroup(Panel *p, Point *ul, Point *size){
    USED(p, ul, size);
}
@

<<function plinitgroup>>=
void plinitgroup(Panel *v, int flags){
    v->flags=flags;
    v->draw=pl_drawgroup;
    v->hit=pl_hitgroup;
    v->type=pl_typegroup;
    v->getsize=pl_getsizegroup;
    v->childspace=pl_childspacegroup;
    v->kind="group";
}
@

<<function plgroup>>=
Panel *plgroup(Panel *parent, int flags){
    Panel *p;
    p=pl_newpanel(parent, 0);
    plinitgroup(p, flags);
    return p;
}
@


%-------------------------------------------------------------

<<windows/libpanel/group.c>>=
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <event.h>
#include <panel.h>
#include "pldefs.h"
<<function pl_drawgroup>>
<<function pl_hitgroup>>
<<function pl_typegroup>>
<<function pl_getsizegroup>>
<<function pl_childspacegroup>>
<<function plinitgroup>>
<<function plgroup>>
@


\subsection*{[[windows/libpanel/init.c]]}

<<function plinit>>=
/*
 * Just a wrapper for all the initialization routines
 */
int plinit(int ldepth){
    if(!pl_drawinit(ldepth)) return 0;
    return 1;
}
@


%-------------------------------------------------------------

<<windows/libpanel/init.c>>=
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <event.h>
#include <panel.h>
#include "pldefs.h"
<<function plinit>>
@


\subsection*{[[windows/libpanel/label.c]]}

<<struct Label>>=
struct Label{
    int placement;
    Icon *icon;
};
@

<<function pl_drawlabel>>=
void pl_drawlabel(Panel *p){
    Label *l;
    l=p->data;
    pl_drawicon(p->b, pl_box(p->b, p->r, PASSIVE), l->placement, p->flags, l->icon);
}
@

<<function pl_hitlabel>>=
int pl_hitlabel(Panel *p, Mouse *m){
    USED(p, m);
    return 0;
}
@

<<function pl_typelabel>>=
void pl_typelabel(Panel *p, Rune c){
    USED(p, c);
}
@

<<function pl_getsizelabel>>=
Point pl_getsizelabel(Panel *p, Point children){
    USED(children);		/* shouldn't have any children */
    return pl_boxsize(pl_iconsize(p->flags, ((Label *)p->data)->icon), PASSIVE);
}
@

<<function pl_childspacelabel>>=
void pl_childspacelabel(Panel *g, Point *ul, Point *size){
    USED(g, ul, size);
}
@

<<function plinitlabel>>=
void plinitlabel(Panel *v, int flags, Icon *icon){
    v->flags=flags|LEAF;
    ((Label *)(v->data))->icon=icon;
    v->draw=pl_drawlabel;
    v->hit=pl_hitlabel;
    v->type=pl_typelabel;
    v->getsize=pl_getsizelabel;
    v->childspace=pl_childspacelabel;
    v->kind="label";
}
@

<<function pllabel>>=
Panel *pllabel(Panel *parent, int flags, Icon *icon){
    Panel *p;
    p=pl_newpanel(parent, sizeof(Label));
    plinitlabel(p, flags, icon);
    plplacelabel(p, PLACECEN);
    return p;
}
@

<<function plplacelabel>>=
void plplacelabel(Panel *p, int placement){
    ((Label *)(p->data))->placement=placement;
}
@


%-------------------------------------------------------------

<<windows/libpanel/label.c>>=
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <event.h>
#include <panel.h>
#include "pldefs.h"
typedef struct Label Label;
<<struct Label>>
<<function pl_drawlabel>>
<<function pl_hitlabel>>
<<function pl_typelabel>>
<<function pl_getsizelabel>>
<<function pl_childspacelabel>>
<<function plinitlabel>>
<<function pllabel>>
<<function plplacelabel>>
@


\subsection*{[[windows/libpanel/list.c]]}

<<struct List>>=
struct List{
    void (*hit)(Panel *, int, int);	/* call user back on hit */
    char *(*gen)(Panel *, int);	/* return text given index or 0 if out of range */
    int lo;				/* indices of first, last items displayed */
    int sel;			/* index of hilited item */
    int len;			/* # of items in list */
    Rectangle listr;
    Point minsize;
    int buttons;
};
@

<<constant MAXHGT>>=
#define	MAXHGT	12
@

<<function pl_listsel>>=
void pl_listsel(Panel *p, int sel, int on){
    List *lp;
    int hi;
    Rectangle r;
    lp=p->data;
    hi=lp->lo+(lp->listr.max.y-lp->listr.min.y)/font->height;
    if(lp->lo>=0 && lp->lo<=sel && sel<hi && sel<lp->len){
        r=lp->listr;
        r.min.y+=(sel-lp->lo)*font->height;
        r.max.y=r.min.y+font->height;
        if(on)
            pl_highlight(p->b, r);
        else{
            pl_fill(p->b, r);
            pl_drawicon(p->b, r, PLACEW, 0, lp->gen(p, sel));
        }
    }
}
@

<<function pl_liststrings>>=
void pl_liststrings(Panel *p, int lo, int hi, Rectangle r){
    Panel *sb;
    List *lp;
    char *s;
    int i;
    lp=p->data;
    for(i=lo;i!=hi && (s=lp->gen(p, i));i++){
        r.max.y=r.min.y+font->height;
        pl_drawicon(p->b, r, PLACEW, 0, s);
        r.min.y+=font->height;
    }
    if(lo<=lp->sel && lp->sel<hi) pl_listsel(p, lp->sel, 1);
    sb=p->yscroller;
    if(sb && sb->setscrollbar)
        sb->setscrollbar(sb, lp->lo,
            lp->lo+(lp->listr.max.y-lp->listr.min.y)/font->height, lp->len);
}
@

<<function pl_drawlist>>=
void pl_drawlist(Panel *p){
    List *lp;
    lp=p->data;
    lp->listr=pl_box(p->b, p->r, UP);
    pl_liststrings(p, lp->lo, lp->lo+(lp->listr.max.y-lp->listr.min.y)/font->height,
        lp->listr);
}
@

<<function pl_hitlist>>=
int pl_hitlist(Panel *p, Mouse *m){
    int oldsel, hitme;
    Point ul, size;
    List *lp;
    lp=p->data;
    hitme=0;
    ul=p->r.min;
    size=subpt(p->r.max, p->r.min);
    pl_interior(p->state, &ul, &size);
    oldsel=lp->sel;
    if(m->buttons&OUT){
        p->state=UP;
        if(m->buttons&~OUT) lp->sel=-1;
    }
    else if(p->state==DOWN || m->buttons&7){
        lp->sel=(m->xy.y-ul.y)/font->height+lp->lo;
        if(m->buttons&7){
            lp->buttons=m->buttons;
            p->state=DOWN;
        }
        else{
            hitme=1;
            p->state=UP;
        }
    }
    if(oldsel!=lp->sel){
        pl_listsel(p, oldsel, 0);
        pl_listsel(p, lp->sel, 1);
    }
    if(hitme && 0<=lp->sel && lp->sel<lp->len && lp->hit)
        lp->hit(p, lp->buttons, lp->sel);
    return 0;
}
@

<<function pl_scrolllist>>=
void pl_scrolllist(Panel *p, int dir, int buttons, int val, int len){
    Point ul, size;
    int nlist, oldlo, hi, nline, y;
    List *lp;
    Rectangle r;
    lp=p->data;
    ul=p->r.min;
    size=subpt(p->r.max, p->r.min);
    pl_interior(p->state, &ul, &size);
    nlist=size.y/font->height;
    oldlo=lp->lo;
    if(dir==VERT) switch(buttons){
    case 1: lp->lo-=nlist*val/len; break;
    case 2: lp->lo=lp->len*val/len; break;
    case 4:	lp->lo+=nlist*val/len; break;
    }
    if(lp->lo<0) lp->lo=0;
    if(lp->lo>=lp->len) lp->lo=lp->len-1;
    if(lp->lo==oldlo) return;
    p->scr.pos.y=lp->lo;
    r=lp->listr;
    nline=(r.max.y-r.min.y)/font->height;
    hi=lp->lo+nline;
    if(hi<=oldlo || lp->lo>=oldlo+nline){
        pl_box(p->b, r, PASSIVE);
        pl_liststrings(p, lp->lo, hi, r);
    }
    else if(lp->lo<oldlo){
        y=r.min.y+(oldlo-lp->lo)*font->height;
        pl_cpy(p->b, Pt(r.min.x, y), 
            Rect(r.min.x, r.min.y, r.max.x, r.min.y+(hi-oldlo)*font->height));
        r.max.y=y;
        pl_box(p->b, r, PASSIVE);
        pl_liststrings(p, lp->lo, oldlo, r);
    }
    else{
        pl_cpy(p->b, r.min, Rect(r.min.x, r.min.y+(lp->lo-oldlo)*font->height,
            r.max.x, r.max.y));
        r.min.y=r.min.y+(oldlo+nline-lp->lo)*font->height;
        pl_box(p->b, r, PASSIVE);
        pl_liststrings(p, oldlo+nline, hi, r);
    }
}
@

<<function pl_typelist>>=
void pl_typelist(Panel *g, Rune c){
    USED(g, c);
}
@

<<function pl_getsizelist>>=
Point pl_getsizelist(Panel *p, Point children){
    USED(children);
    return pl_boxsize(((List *)p->data)->minsize, p->state);
}
@

<<function pl_childspacelist>>=
void pl_childspacelist(Panel *g, Point *ul, Point *size){
    USED(g, ul, size);
}
@

<<function plinitlist>>=
void plinitlist(Panel *v, int flags, char *(*gen)(Panel *, int), int nlist, void (*hit)(Panel *, int, int)){
    List *lp;
    int wid, max;
    char *str;
    lp=v->data;
    v->flags=flags|LEAF;
    v->state=UP;
    v->draw=pl_drawlist;
    v->hit=pl_hitlist;
    v->type=pl_typelist;
    v->getsize=pl_getsizelist;
    v->childspace=pl_childspacelist;
    lp->gen=gen;
    lp->hit=hit;
    max=0;
    for(lp->len=0;str=gen(v, lp->len);lp->len++){
        wid=stringwidth(font, str);
        if(wid>max) max=wid;
    }
    if(flags&(FILLX|EXPAND)){
        for(lp->len=0;gen(v, lp->len);lp->len++);
        lp->minsize=Pt(0, nlist*font->height);
    }
    else{
        max=0;
        for(lp->len=0;str=gen(v, lp->len);lp->len++){
            wid=stringwidth(font, str);
            if(wid>max) max=wid;
        }
        lp->minsize=Pt(max, nlist*font->height);
    }
    lp->sel=-1;
    lp->lo=0;
    v->scroll=pl_scrolllist;
    v->scr.pos=Pt(0,0);
    v->scr.size=Pt(0,lp->len);
    v->kind="list";
}
@

<<function pllist>>=
Panel *pllist(Panel *parent, int flags, char *(*gen)(Panel *, int), int nlist, void (*hit)(Panel *, int, int)){
    Panel *v;
    v=pl_newpanel(parent, sizeof(List));
    plinitlist(v, flags, gen, nlist, hit);
    return v;
}
@


%-------------------------------------------------------------

<<windows/libpanel/list.c>>=
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <event.h>
#include <panel.h>
#include "pldefs.h"
typedef struct List List;
<<struct List>>
<<constant MAXHGT>>
<<function pl_listsel>>
<<function pl_liststrings>>
<<function pl_drawlist>>
<<function pl_hitlist>>
<<function pl_scrolllist>>
<<function pl_typelist>>
<<function pl_getsizelist>>
<<function pl_childspacelist>>
<<function plinitlist>>
<<function pllist>>
@


\subsection*{[[windows/libpanel/mem.c]]}

<<function pl_emalloc>>=
void *pl_emalloc(int n){
    void *v;
    v=mallocz(n, 1);
    if(v==0){
        fprint(2, "Can't malloc!\n");
        exits("no mem");
    }
    setmalloctag(v, getcallerpc(&n));
    return v;
}
@

<<function pl_erealloc>>=
void *pl_erealloc(void *v, int n)
{
    v=realloc(v, n);
    if(v==0){
        fprint(2, "Can't realloc!\n");
        exits("no mem");
    }
    setrealloctag(v, getcallerpc(&v));
    return v;
}
@

<<function pl_unexpected>>=
void pl_unexpected(Panel *g, char *rou){
    fprint(2, "%s called unexpectedly (%s %lux)\n", rou, g->kind, (ulong)g);
    abort();
}
@

<<function pl_drawerror>>=
void pl_drawerror(Panel *g){
    pl_unexpected(g, "draw");
}
@

<<function pl_hiterror>>=
int pl_hiterror(Panel *g, Mouse *m){
    USED(m);
    pl_unexpected(g, "hit");
    return 0;
}
@

<<function pl_typeerror>>=
void pl_typeerror(Panel *g, Rune c){
    USED(c);
    pl_unexpected(g, "type");
}
@

<<function pl_getsizeerror>>=
Point pl_getsizeerror(Panel *g, Point childsize){
    pl_unexpected(g, "getsize");
    return childsize;
}
@

<<function pl_childspaceerror>>=
void pl_childspaceerror(Panel *g, Point *ul, Point *size){
    USED(ul, size);
    pl_unexpected(g, "childspace");
}
@

<<function pl_scrollerror>>=
void pl_scrollerror(Panel *g, int dir, int button, int num, int den){
    USED(dir, button, num, den);
    pl_unexpected(g, "scroll");
}
@

<<function pl_setscrollbarerror>>=
void pl_setscrollbarerror(Panel *g, int top, int bot, int den){
    USED(top, bot, den);
    pl_unexpected(g, "setscrollbar");
}
@

<<function pl_prinormal>>=
int pl_prinormal(Panel *, Point){
    return PRI_NORMAL;
}
@

<<function pl_newpanel>>=
Panel *pl_newpanel(Panel *parent, int ndata){
    Panel *v;
    if(parent && parent->flags&LEAF){
        fprint(2, "newpanel: can't create child of %s %lux\n", parent->kind, (ulong)parent);
        exits("bad newpanel");
    }
    v=pl_emalloc(sizeof(Panel));
    v->r=Rect(0,0,0,0);
    v->flags=0;
    v->ipad=Pt(0,0);
    v->pad=Pt(0,0);
    v->size=Pt(0,0);
    v->sizereq=Pt(0,0);
    v->lastmouse=0;
    v->next=0;
    v->child=0;
    v->echild=0;
    v->b=0;
    v->pri=pl_prinormal;
    v->scrollee=0;
    v->xscroller=0;
    v->yscroller=0;
    v->parent=parent;
    v->scr.pos=Pt(0,0);
    v->scr.size=Pt(0,0);
    if(parent){
        if(parent->child==0)
            parent->child=v;
        else
            parent->echild->next=v;
        parent->echild=v;
    }
    v->draw=pl_drawerror;
    v->hit=pl_hiterror;
    v->type=pl_typeerror;
    v->getsize=pl_getsizeerror;
    v->childspace=pl_childspaceerror;
    v->scroll=pl_scrollerror;
    v->setscrollbar=pl_setscrollbarerror;
    v->free=0;
    v->snarf=0;
    v->paste=0;
    if(ndata)
        v->data=pl_emalloc(ndata);
    else
        v->data=0;
    return v;
}
@

<<function plfree>>=
void plfree(Panel *p){
    Panel *cp, *ncp;
    if(p==0)
        return;
    if(p==plkbfocus)
        plkbfocus=0;
    for(cp=p->child;cp;cp=ncp){
        ncp=cp->next;
        plfree(cp);
    }
    if(p->free) p->free(p);
    if(p->data) free(p->data);
    free(p);
}
@


%-------------------------------------------------------------

<<windows/libpanel/mem.c>>=
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <event.h>
#include <panel.h>
#include "pldefs.h"
<<function pl_emalloc>>
<<function pl_erealloc>>
<<function pl_unexpected>>
<<function pl_drawerror>>
<<function pl_hiterror>>
<<function pl_typeerror>>
<<function pl_getsizeerror>>
<<function pl_childspaceerror>>
<<function pl_scrollerror>>
<<function pl_setscrollbarerror>>
<<function pl_prinormal>>
<<function pl_newpanel>>
<<function plfree>>
@


\subsection*{[[windows/libpanel/message.c]]}

<<struct Message>>=
struct Message{
    char *text;
    Point minsize;
};
@

<<function pl_textmsg>>=
void pl_textmsg(Image *b, Rectangle r, Font *f, char *s){
    char *start, *end;	/* of line */
    Point where;
    int lwid, c, wid;
    where=r.min;
    wid=r.max.x-r.min.x;
    do{
        start=s;
        lwid=0;
        end=s;
        do{
            for(;*s!=' ' && *s!='\0';s=pl_nextrune(s)) lwid+=pl_runewidth(f, s);
            if(lwid>wid) break;
            end=s;
            for(;*s==' ';s=pl_nextrune(s)) lwid+=pl_runewidth(f, s);
        }while(*s!='\0');
        if(end==start)	/* can't even fit one word on line! */
            end=s;
        c=*end;
        *end='\0';
        string(b, where, display->black, ZP, f, start);
        *end=c;
        where.y+=font->height;
        s=end;
        while(*s==' ') s=pl_nextrune(s);
    }while(*s!='\0');
}
@

<<function pl_foldsize>>=
Point pl_foldsize(Font *f, char *s, int wid){
    char *start, *end;	/* of line */
    Point size;
    int lwid, ewid;
    size=Pt(0,0);
    do{
        start=s;
        lwid=0;
        end=s;
        ewid=lwid;
        do{
            for(;*s!=' ' && *s!='\0';s=pl_nextrune(s)) lwid+=pl_runewidth(f, s);
            if(lwid>wid) break;
            end=s;
            ewid=lwid;
            for(;*s==' ';s=pl_nextrune(s)) lwid+=pl_runewidth(f, s);
        }while(*s!='\0');
        if(end==start){	/* can't even fit one word on line! */
            ewid=lwid;
            end=s;
        }
        if(ewid>size.x) size.x=ewid;
        size.y+=font->height;
        s=end;
        while(*s==' ') s=pl_nextrune(s);
    }while(*s!='\0');
    return size;
}
@

<<function pl_drawmessage>>=
void pl_drawmessage(Panel *p){
    pl_textmsg(p->b, pl_box(p->b, p->r, PASSIVE), font, ((Message *)p->data)->text);
}
@

<<function pl_hitmessage>>=
int pl_hitmessage(Panel *g, Mouse *m){
    USED(g, m);
    return 0;
}
@

<<function pl_typemessage>>=
void pl_typemessage(Panel *g, Rune c){
    USED(g, c);
}
@

<<function pl_getsizemessage>>=
Point pl_getsizemessage(Panel *p, Point children){
    Message *mp;
    USED(children);
    mp=p->data;
    return pl_boxsize(pl_foldsize(font, mp->text, mp->minsize.x), PASSIVE);
}
@

<<function pl_childspacemessage>>=
void pl_childspacemessage(Panel *p, Point *ul, Point *size){
    USED(p, ul, size);
}
@

<<function plinitmessage>>=
void plinitmessage(Panel *v, int flags, int wid, char *msg){
    Message *mp;
    mp=v->data;
    v->flags=flags|LEAF;
    v->draw=pl_drawmessage;
    v->hit=pl_hitmessage;
    v->type=pl_typemessage;
    v->getsize=pl_getsizemessage;
    v->childspace=pl_childspacemessage;
    mp->text=msg;
    mp->minsize=Pt(wid, font->height);
    v->kind="message";
}
@

<<function plmessage>>=
Panel *plmessage(Panel *parent, int flags, int wid, char *msg){
    Panel *v;
    v=pl_newpanel(parent, sizeof(Message));
    plinitmessage(v, flags, wid, msg);
    return v;
}
@


%-------------------------------------------------------------

<<windows/libpanel/message.c>>=
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <event.h>
#include <panel.h>
#include "pldefs.h"
typedef struct Message Message;
<<struct Message>>
<<function pl_textmsg>>
<<function pl_foldsize>>
<<function pl_drawmessage>>
<<function pl_hitmessage>>
<<function pl_typemessage>>
<<function pl_getsizemessage>>
<<function pl_childspacemessage>>
<<function plinitmessage>>
<<function plmessage>>
@


\subsection*{[[windows/libpanel/pack.c]]}

<<function pl_max>>=
int pl_max(int a, int b){
    return a>b?a:b;
}
@

<<function pl_sizesibs>>=
Point pl_sizesibs(Panel *p){
    Point s;
    if(p==0) return Pt(0,0);
    s=pl_sizesibs(p->next);
    switch(p->flags&PACK){
    case PACKN:
    case PACKS:
        s.x=pl_max(s.x, p->sizereq.x);
        s.y+=p->sizereq.y;
        break;
    case PACKE:
    case PACKW:
        s.x+=p->sizereq.x;
        s.y=pl_max(s.y, p->sizereq.y);
        break;
    }
    return s;
}
@

<<function pl_sizereq>>=
/*
 * Compute the requested size of p and its descendants.
 */
void pl_sizereq(Panel *p){
    Panel *cp;
    Point maxsize;
    maxsize=Pt(0,0);
    for(cp=p->child;cp;cp=cp->next){
        pl_sizereq(cp);
        if(cp->sizereq.x>maxsize.x) maxsize.x=cp->sizereq.x;
        if(cp->sizereq.y>maxsize.y) maxsize.y=cp->sizereq.y;
    }
    for(cp=p->child;cp;cp=cp->next){
        if(cp->flags&MAXX) cp->sizereq.x=maxsize.x;
        if(cp->flags&MAXY) cp->sizereq.y=maxsize.y;
    }
    p->childreq=pl_sizesibs(p->child);
    p->sizereq=addpt(addpt(p->getsize(p, p->childreq), p->ipad), p->pad);
    if(p->flags&FIXEDX) p->sizereq.x=p->fixedsize.x;
    if(p->flags&FIXEDY) p->sizereq.y=p->fixedsize.y;
}
@

<<function pl_getshare>>=
Point pl_getshare(Panel *p){
    Point share;
    if(p==0) return Pt(0,0);
    share=pl_getshare(p->next);
    if(p->flags&EXPAND) switch(p->flags&PACK){
    case PACKN:
    case PACKS:
        if(share.x==0) share.x=1;
        share.y++;
        break;
    case PACKE:
    case PACKW:
        share.x++;
        if(share.y==0) share.y=1;
        break;
    }
    return share;
}
@

<<function pl_setrect>>=
/*
 * Set the sizes and rectangles of p and its descendants, given their requested sizes.
 */
void pl_setrect(Panel *p, Point ul, Point avail){
    Point space, newul, newspace, slack, share;
    int l;
    Panel *c;
    p->size=subpt(p->sizereq, p->pad);
    ul=addpt(ul, divpt(p->pad, 2));
    avail=subpt(avail, p->pad);
    if(p->size.x>avail.x)
        p->size.x = avail.x;
    if(p->size.y>avail.y)
        p->size.y = avail.y;
    if(p->flags&(FILLX|EXPAND)) p->size.x=avail.x;
    if(p->flags&(FILLY|EXPAND)) p->size.y=avail.y;
    switch(p->flags&PLACE){
    case PLACECEN:	ul.x+=(avail.x-p->size.x)/2; ul.y+=(avail.y-p->size.y)/2; break;
    case PLACES:	ul.x+=(avail.x-p->size.x)/2; ul.y+= avail.y-p->size.y   ; break;
    case PLACEE:	ul.x+= avail.x-p->size.x   ; ul.y+=(avail.y-p->size.y)/2; break;
    case PLACEW:	                             ul.y+=(avail.y-p->size.y)/2; break;
    case PLACEN:	ul.x+=(avail.x-p->size.x)/2;                              break;
    case PLACENE:	ul.x+= avail.x-p->size.x   ;                              break;
    case PLACENW:                                                             break;
    case PLACESE:	ul.x+= avail.x-p->size.x   ; ul.y+= avail.y-p->size.y   ; break;
    case PLACESW:                                ul.y+= avail.y-p->size.y   ; break;
    }
    p->r=Rpt(ul, addpt(ul, p->size));
    space=p->size;
    p->childspace(p, &ul, &space);
    slack=subpt(space, p->childreq);
    share=pl_getshare(p->child);
    for(c=p->child;c;c=c->next){
        if(c->flags&EXPAND){
            switch(c->flags&PACK){
            case PACKN:
            case PACKS:
                c->sizereq.x+=slack.x;
                l=slack.y/share.y;
                c->sizereq.y+=l;
                slack.y-=l;
                --share.y;
                break;
            case PACKE:
            case PACKW:
                l=slack.x/share.x;
                c->sizereq.x+=l;
                slack.x-=l;
                --share.x;
                c->sizereq.y+=slack.y;
                break;
            }
        }
        switch(c->flags&PACK){
        case PACKN:
            newul=Pt(ul.x, ul.y+c->sizereq.y);
            newspace=Pt(space.x, space.y-c->sizereq.y);
            pl_setrect(c, ul, Pt(space.x, c->sizereq.y));
            break;
        case PACKW:
            newul=Pt(ul.x+c->sizereq.x, ul.y);
            newspace=Pt(space.x-c->sizereq.x, space.y);
            pl_setrect(c, ul, Pt(c->sizereq.x, space.y));
            break;
        case PACKS:
            newul=ul;
            newspace=Pt(space.x, space.y-c->sizereq.y);
            pl_setrect(c, Pt(ul.x, ul.y+space.y-c->sizereq.y),
                Pt(space.x, c->sizereq.y));
            break;
        case PACKE:
            newul=ul;
            newspace=Pt(space.x-c->sizereq.x, space.y);
            pl_setrect(c, Pt(ul.x+space.x-c->sizereq.x, ul.y),
                Pt(c->sizereq.x, space.y));
            break;
        }
        ul=newul;
        space=newspace;
    }
}
@

<<function plpack>>=
void plpack(Panel *p, Rectangle where){
    pl_sizereq(p);
    pl_setrect(p, where.min, subpt(where.max, where.min));
}
@

<<function plmove>>=
/*
 * move an already-packed panel so that p->r=raddp(p->r, d)
 */
void plmove(Panel *p, Point d){
    if(strcmp(p->kind, "edit") == 0)	/* sorry */
        plemove(p, d);
    p->r=rectaddpt(p->r, d);
    for(p=p->child;p;p=p->next) plmove(p, d);
}
@


%-------------------------------------------------------------

<<windows/libpanel/pack.c>>=
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <event.h>
#include <panel.h>
#include "pldefs.h"
<<function pl_max>>
<<function pl_sizesibs>>
<<function pl_sizereq>>
<<function pl_getshare>>
<<function pl_setrect>>
<<function plpack>>
<<function plmove>>
@


\subsection*{[[windows/libpanel/panel.h]]}

<<struct Scroll>>=
struct Scroll{
    Point pos, size;
};
@

<<struct Rtext>>=
struct Rtext{
    int flags;		/* responds to hits? text selection? */
    void *user;		/* user data */
    int space;		/* how much space before, if no break */
    int indent;		/* how much space before, after a break */
    Image *b;		/* what to display, if nonzero */
    Panel *p;		/* what to display, if nonzero and b==0 */
    Font *font;		/* font in which to draw text */
    char *text;		/* what to display, if b==0 and p==0 */
    Rtext *next;		/* next piece */
    /* private below */
    Rtext *nextline;	/* links line to line */
    Rtext *last;		/* last, for append */
    Rectangle r;		/* where to draw, if origin were Pt(0,0) */
    int topy;		/* y coord of top of line */
    int wid;		/* not including space */
};
@

<<struct Panel>>=
struct Panel{
    Point ipad, pad;				/* extra space inside and outside */
    Point fixedsize;				/* size of Panel, if FIXED */
    int user;					/* available for user */
    void *userp;					/* available for user */
    Rectangle r;					/* where the Panel goes */
    /* private below */
    Panel *next;					/* It's a list! */
    Panel *child, *echild, *parent;			/* No, it's a tree! */
    Image *b;					/* where we're drawn */
    int flags;					/* position flags, see below */
    char *kind;					/* what kind of panel? */
    int state;					/* for hitting & drawing purposes */
    Point size;					/* space for this Panel */
    Point sizereq;					/* size requested by this Panel */
    Point childreq;					/* total size needed by children */
    Panel *lastmouse;				/* who got the last mouse event? */
    Panel *scrollee;				/* pointer to scrolled window */
    Panel *xscroller, *yscroller;			/* pointers to scroll bars */
    Scroll scr;					/* scroll data */
    void *data;					/* kind-specific data */
    void (*draw)(Panel *);				/* draw panel and children */
    int (*pri)(Panel *, Point);			/* priority for hitting */
    int (*hit)(Panel *, Mouse *);			/* process mouse event */
    void (*type)(Panel *, Rune);			/* process keyboard event */
    Point (*getsize)(Panel *, Point);		/* return size, given child size */
    void (*childspace)(Panel *, Point *, Point *);	/* child ul & size given our size */
    void (*scroll)(Panel *, int, int, int, int);	/* scroll bar to scrollee */
    void (*setscrollbar)(Panel *, int, int, int);	/* scrollee to scroll bar */
    void (*free)(Panel *);				/* free fields of data when done */
    char* (*snarf)(Panel *);			/* snarf text from panel */
    void (*paste)(Panel *, char *);			/* paste text into panel */
};
@

<<constant PACK>>=
/*
 * Panel flags
 */
#define	PACK	0x0007		/* which side of the parent is the Panel attached to? */
@

<<constant PACKN>>=
#define		PACKN	0x0000
@

<<constant PACKE>>=
#define		PACKE	0x0001
@

<<constant PACKS>>=
#define		PACKS	0x0002
@

<<constant PACKW>>=
#define		PACKW	0x0003
@

<<constant PACKCEN>>=
#define		PACKCEN	0x0004	/* only used by pulldown */
@

<<constant FILLX>>=
#define	FILLX	0x0008		/* grow horizontally to fill the available space */
@

<<constant FILLY>>=
#define	FILLY	0x0010		/* grow vertically to fill the available space */
@

<<constant PLACE>>=
#define	PLACE	0x01e0		/* which side of its space should the Panel adhere to? */
@

<<constant PLACECEN>>=
#define		PLACECEN 0x0000
@

<<constant PLACES>>=
#define		PLACES	0x0020
@

<<constant PLACEE>>=
#define		PLACEE	0x0040
@

<<constant PLACEW>>=
#define		PLACEW	0x0060
@

<<constant PLACEN>>=
#define		PLACEN	0x0080
@

<<constant PLACENE>>=
#define		PLACENE	0x00a0
@

<<constant PLACENW>>=
#define		PLACENW	0x00c0
@

<<constant PLACESE>>=
#define		PLACESE	0x00e0
@

<<constant PLACESW>>=
#define		PLACESW	0x0100
@

<<constant EXPAND>>=
#define	EXPAND	0x0200		/* use up all extra space in the parent */
@

<<constant FIXED>>=
#define	FIXED	0x0c00		/* don't pass children's size requests through to parent */
@

<<constant FIXEDX>>=
#define	FIXEDX	0x0400
@

<<constant FIXEDY>>=
#define	FIXEDY	0x0800
@

<<constant MAXX>>=
#define	MAXX	0x1000		/* make x size as big as biggest sibling's */
@

<<constant MAXY>>=
#define	MAXY	0x2000		/* make y size as big as biggest sibling's */
@

<<constant BITMAP>>=
#define	BITMAP	0x4000		/* text argument is a bitmap, not a string */
@

<<constant USERFL>>=
#define USERFL	0x100000	/* start of user flag */
@

<<constant OUT>>=
/*
 * An extra bit in Mouse.buttons
 */
#define	OUT	8			/* Mouse.buttons bit, set when mouse leaves Panel */
@

<<constant PRI_NORMAL>>=
/*
 * Priorities
 */
#define	PRI_NORMAL	0		/* ordinary panels */
@

<<constant PRI_POPUP>>=
#define	PRI_POPUP	1		/* popup menus */
@

<<constant PRI_SCROLLBAR>>=
#define	PRI_SCROLLBAR	2		/* scroll bars */
@

<<constant PL_HOT>>=
/* Rtext.flags */
#define PL_HOT		1
@

<<constant PL_SEL>>=
#define PL_SEL		2
@

<<global plkbfocus>>=
Panel *plkbfocus;			/* the panel in keyboard focus */
@


%-------------------------------------------------------------

<<windows/libpanel/panel.h>>=
//#pragma	src	"/sys/src/libpanel"
//#pragma	lib	"libpanel.a"
typedef struct Scroll Scroll;
typedef struct Panel Panel;		/* a Graphical User Interface element */
typedef struct Rtext Rtext;		/* formattable text */
typedef void Icon;			/* Always used as Icon * -- Image or char */
typedef struct Idol Idol;		/* A picture/text combo */
<<struct Scroll>>
<<struct Rtext>>
<<struct Panel>>
<<constant PACK>>
<<constant PACKN>>
<<constant PACKE>>
<<constant PACKS>>
<<constant PACKW>>
<<constant PACKCEN>>
<<constant FILLX>>
<<constant FILLY>>
<<constant PLACE>>
<<constant PLACECEN>>
<<constant PLACES>>
<<constant PLACEE>>
<<constant PLACEW>>
<<constant PLACEN>>
<<constant PLACENE>>
<<constant PLACENW>>
<<constant PLACESE>>
<<constant PLACESW>>
<<constant EXPAND>>
<<constant FIXED>>
<<constant FIXEDX>>
<<constant FIXEDY>>
<<constant MAXX>>
<<constant MAXY>>
<<constant BITMAP>>
<<constant USERFL>>

<<constant OUT>>
<<constant PRI_NORMAL>>
<<constant PRI_POPUP>>
<<constant PRI_SCROLLBAR>>

<<constant PL_HOT>>
<<constant PL_SEL>>

<<global plkbfocus>>

int plinit(int);			/* initialization */
void plpack(Panel *, Rectangle);	/* figure out where to put the Panel & children */
void plmove(Panel *, Point);		/* move an already-packed panel to a new location */
void pldraw(Panel *, Image *);		/* display the panel on the bitmap */
void plfree(Panel *);			/* give back space */
void plgrabkb(Panel *);			/* this Panel should receive keyboard events */
void plkeyboard(Rune);			/* send a keyboard event to the appropriate Panel */
void plmouse(Panel *, Mouse *);		/* send a Mouse event to a Panel tree */
void plscroll(Panel *, Panel *, Panel *); /* link up scroll bars */
char *plentryval(Panel *);		/* entry delivers its value */
void plsetbutton(Panel *, int);		/* set or clear the mark on a button */
void plsetslider(Panel *, int, int);	/* set the value of a slider */
Rune *pleget(Panel *);			/* get the text from an edit window */
int plelen(Panel *);			/* get the length of the text from an edit window */
void plegetsel(Panel *, int *, int *);	/* get the selection from an edit window */
void plepaste(Panel *, Rune *, int);	/* paste in an edit window */
void plesel(Panel *, int, int);		/* set the selection in an edit window */
void plescroll(Panel *, int);		/* scroll an edit window */
Scroll plgetscroll(Panel *);		/* get scrolling information from panel */
void plsetscroll(Panel *, Scroll);	/* set scrolling information */
void plplacelabel(Panel *, int);	/* label placement */

/*
 * Panel creation & reinitialization functions
 */
Panel *plbutton(Panel *pl, int, Icon *, void (*)(Panel *pl, int));
Panel *plcanvas(Panel *pl, int, void (*)(Panel *), void (*)(Panel *pl, Mouse *));
Panel *plcheckbutton(Panel *pl, int, Icon *, void (*)(Panel *pl, int, int));
Panel *pledit(Panel *, int, Point, Rune *, int, void (*)(Panel *));
Panel *plentry(Panel *pl, int, int, char *, void (*)(Panel *pl, char *));
Panel *plframe(Panel *pl, int);
Panel *plgroup(Panel *pl, int);
Panel *plidollist(Panel*, int, Point, Font*, Idol*, void (*)(Panel*, int, void*));
Panel *pllabel(Panel *pl, int, Icon *);
Panel *pllist(Panel *pl, int, char *(*)(Panel *, int), int, void(*)(Panel *pl, int, int));
Panel *plmenu(Panel *pl, int, Icon **, int, void (*)(int, int));
Panel *plmenubar(Panel *pl, int, int, Icon *, Panel *pl, Icon *, ...);
Panel *plmessage(Panel *pl, int, int, char *);
Panel *plpopup(Panel *pl, int, Panel *pl, Panel *pl, Panel *pl);
Panel *plpulldown(Panel *pl, int, Icon *, Panel *pl, int);
Panel *plradiobutton(Panel *pl, int, Icon *, void (*)(Panel *pl, int, int));
Panel *plscrollbar(Panel *plparent, int flags);
Panel *plslider(Panel *pl, int, Point, void(*)(Panel *pl, int, int, int));
Panel *pltextview(Panel *, int, Point, Rtext *, void (*)(Panel *, int, Rtext *));
void plinitbutton(Panel *, int, Icon *, void (*)(Panel *, int));
void plinitcanvas(Panel *, int, void (*)(Panel *), void (*)(Panel *, Mouse *));
void plinitcheckbutton(Panel *, int, Icon *, void (*)(Panel *, int, int));
void plinitedit(Panel *, int, Point, Rune *, int, void (*)(Panel *));
void plinitentry(Panel *, int, int, char *, void (*)(Panel *, char *));
void plinitframe(Panel *, int);
void plinitgroup(Panel *, int);
void plinitidollist(Panel*, int, Point, Font*, Idol*, void (*)(Panel*, int, void*));
void plinitlabel(Panel *, int, Icon *);
void plinitlist(Panel *, int, char *(*)(Panel *, int), int, void(*)(Panel *, int, int));
void plinitmenu(Panel *, int, Icon **, int, void (*)(int, int));
void plinitmessage(Panel *, int, int, char *);
void plinitpopup(Panel *, int, Panel *, Panel *, Panel *);
void plinitpulldown(Panel *, int, Icon *, Panel *, int);
void plinitradiobutton(Panel *, int, Icon *, void (*)(Panel *, int, int));
void plinitscrollbar(Panel *parent, int flags);
void plinitslider(Panel *, int, Point, void(*)(Panel *, int, int, int));
void plinittextview(Panel *, int, Point, Rtext *, void (*)(Panel *, int, Rtext *));
/*
 * Rtext constructors & destructor
 */
Rtext *plrtstr(Rtext **, int, int, Font *, char *, int, void *);
Rtext *plrtbitmap(Rtext **, int, int, Image *, int, void *);
Rtext *plrtpanel(Rtext **, int, int, Panel *, void *);
void plrtfree(Rtext *);
void plrtseltext(Rtext *, Rtext *, Rtext *);
char *plrtsnarftext(Rtext *);

int plgetpostextview(Panel *);
void plsetpostextview(Panel *, int);

/*
 * Idols
 */
Idol *plmkidol(Idol**, Image*, Image*, char*, void*);
void plfreeidol(Idol*);
Point plidolsize(Idol*, Font*, int);
void *plidollistgetsel(Panel*);

/*
 * Snarf
 */
void plputsnarf(char *);
char *plgetsnarf(void);
void plsnarf(Panel *);			/* snarf a panel */
void plpaste(Panel *);			/* paste a panel */
@


\subsection*{[[windows/libpanel/pldefs.h]]}

<<constant HITME>>=
#define	HITME	0x08000		/* tells ptinpanel not to look at children */
@

<<constant LEAF>>=
#define	LEAF	0x10000		/* newpanel will refuse to attach children */
@

<<constant INVIS>>=
#define	INVIS	0x20000		/* don't draw this */
@

<<constant REMOUSE>>=
#define	REMOUSE	0x40000		/* send next mouse event here, even if not inside */
@

<<enum _anon_ (windows/libpanel/pldefs.h)>>=
/*
 * States, also styles
 */
enum{
    UP,
    DOWN1,
    DOWN2,
    DOWN3,
    DOWN,
    PASSIVE,
    FRAME
};
@

<<enum _anon_ (windows/libpanel/pldefs.h)2>>=
/*
 * Scroll flags
 */
enum{
    SCROLLUP,
    SCROLLDOWN,
    SCROLLABSY,
    SCROLLLEFT,
    SCROLLRIGHT,
    SCROLLABSX,
};
@

<<enum _anon_ (windows/libpanel/pldefs.h)3>>=
/*
 * Scrollbar, slider orientations
 */
enum{
    HORIZ,
    VERT
};
@

<<struct Textwin>>=
struct Textwin{
    Rune *text, *etext, *eslack;	/* text, with some slack off the end */
    int top, bot;			/* range of runes visible on screen */
    int sel0, sel1;			/* selection */
    Point *loc, *eloc;		/* ul corners of visible runes (+1 more at end!) */
    Image *b;			/* bitmap the text is drawn in */
    Rectangle r;			/* rectangle the text is drawn in */
    Font *font;			/* font text is drawn in */
    int hgt;			/* same as font->height */
    int tabstop;			/* tab settings are every tabstop pixels */
    int mintab;			/* the minimum size of a tab */
};
@


%-------------------------------------------------------------

<<windows/libpanel/pldefs.h>>=
/*
 * Definitions for internal use only
 */
/*
 * Variable-font text routines
 * These could make a separate library.
 */
int pl_rtfmt(Rtext *, int);
void pl_rtdraw(Image *, Rectangle, Rtext *, int);
void pl_rtredraw(Image *, Rectangle, Rtext *, int, int);
Rtext *pl_rthit(Rtext *, int, Point, Point);
<<constant HITME>>
<<constant LEAF>>
<<constant INVIS>>
<<constant REMOUSE>>
<<enum _anon_ (windows/libpanel/pldefs.h)>>
<<enum _anon_ (windows/libpanel/pldefs.h)2>>
<<enum _anon_ (windows/libpanel/pldefs.h)3>>
Panel *pl_newpanel(Panel *, int);	/* make a new Panel, given parent & data size */
void *pl_emalloc(int);			/* allocate some space, exit on error */
void *pl_erealloc(void*,int);		/* reallocate some space, exit on error */
void pl_print(Panel *);			/* print a Panel tree */
Panel *pl_ptinpanel(Point, Panel *);	/* highest-priority subpanel containing point */
/*
 * Drawing primitives
 */
int pl_drawinit(int);
Rectangle pl_box(Image *, Rectangle, int);
Rectangle pl_outline(Image *, Rectangle, int);
Point pl_boxsize(Point, int);
void pl_interior(int, Point *, Point *);
void pl_drawicon(Image *, Rectangle, int, int, Icon *);
Rectangle pl_check(Image *, Rectangle, int);
Rectangle pl_radio(Image *, Rectangle, int);
int pl_ckwid(void);
void pl_sliderupd(Image *, Rectangle, int, int, int);
void pl_invis(Panel *, int);
Point pl_iconsize(int, Icon *);
void pl_highlight(Image *, Rectangle);
void pl_clr(Image *, Rectangle);
void pl_fill(Image *, Rectangle);
void pl_cpy(Image *, Point, Rectangle);

/*
 * Rune mangling functions
 */
int pl_idchar(int);
int pl_rune1st(int);
char *pl_nextrune(char *);
int pl_runewidth(Font *, char *);
/*
 * Fixed-font Text-window routines
 * These could be separated out into a separate library.
 */
typedef struct Textwin Textwin;
<<struct Textwin>>
Textwin *twnew(Image *, Font *, Rune *, int);
void twfree(Textwin *);
void twhilite(Textwin *, int, int, int);
void twselect(Textwin *, Mouse *);
void twreplace(Textwin *, int, int, Rune *, int);
void twscroll(Textwin *, int);
int twpt2rune(Textwin *, Point);
void twreshape(Textwin *, Rectangle);
void twmove(Textwin *, Point);
void plemove(Panel *, Point);
@


\subsection*{[[windows/libpanel/popup.c]]}

<<struct Popup>>=
struct Popup{
    Image *save;			/* where to save what the popup covers */
    Panel *pop[3];			/* what to pop up */
};
@

<<function pl_drawpopup>>=
void pl_drawpopup(Panel *p){
    USED(p);
}
@

<<function pl_hitpopup>>=
int pl_hitpopup(Panel *g, Mouse *m){
    Panel *p;
    Point d;
    Popup *pp;

    pp=g->data;
    if(g->state==UP){
        switch(m->buttons&7){
        case 0: p=g->child; break;
        case 1:	p=pp->pop[0]; g->state=DOWN1; break;
        case 2: p=pp->pop[1]; g->state=DOWN2; break;
        case 4: p=pp->pop[2]; g->state=DOWN3; break;
        default: p=0; break;
        }
        if(p==0){
            p=g->child;
            g->state=DOWN;
        }
        else if(g->state!=UP){
            plpack(p, screen->clipr);
            if(p->lastmouse)
                d=subpt(m->xy, divpt(addpt(p->lastmouse->r.min,
                             p->lastmouse->r.max), 2));
            else
                d=subpt(m->xy, divpt(addpt(p->r.min, p->r.max), 2));
            if(p->r.min.x+d.x<g->r.min.x) d.x=g->r.min.x-p->r.min.x;
            if(p->r.max.x+d.x>g->r.max.x) d.x=g->r.max.x-p->r.max.x;
            if(p->r.min.y+d.y<g->r.min.y) d.y=g->r.min.y-p->r.min.y;
            if(p->r.max.y+d.y>g->r.max.y) d.y=g->r.max.y-p->r.max.y;
            plmove(p, d);
            pp->save=allocimage(display, p->r, g->b->chan, 0, DNofill);
            if(pp->save!=0) draw(pp->save, p->r, g->b, 0, p->r.min);
            pl_invis(p, 0);
            pldraw(p, g->b);
        }
    }
    else{
        switch(g->state){
        default: SET(p); break;			/* can't happen! */
        case DOWN1: p=pp->pop[0]; break;
        case DOWN2: p=pp->pop[1]; break;
        case DOWN3: p=pp->pop[2]; break;
        case DOWN:  p=g->child;  break;
        }
        if((m->buttons&7)==0){
            if(g->state!=DOWN){
                if(pp->save!=0){
                    draw(g->b, p->r, pp->save, 0, p->r.min);
                    flushimage(display, 1);
                    freeimage(pp->save);
                    pp->save=0;
                }
                pl_invis(p, 1);
            }
            g->state=UP;
        }
    }
    plmouse(p, m);
    if((m->buttons&7)==0)
        g->state=UP;
    return (m->buttons&7)!=0;
}
@

<<function pl_typepopup>>=
void pl_typepopup(Panel *g, Rune c){
    USED(g, c);
}
@

<<function pl_getsizepopup>>=
Point pl_getsizepopup(Panel *g, Point children){
    USED(g);
    return children;
}
@

<<function pl_childspacepopup>>=
void pl_childspacepopup(Panel *g, Point *ul, Point *size){
    USED(g, ul, size);
}
@

<<function pl_pripopup>>=
int pl_pripopup(Panel *, Point){
    return PRI_POPUP;
}
@

<<function plinitpopup>>=
void plinitpopup(Panel *v, int flags, Panel *pop0, Panel *pop1, Panel *pop2){
    Popup *pp;
    pp=v->data;
    v->flags=flags;
    v->pri=pl_pripopup;
    v->state=UP;
    v->draw=pl_drawpopup;
    v->hit=pl_hitpopup;
    v->type=pl_typepopup;
    v->getsize=pl_getsizepopup;
    v->childspace=pl_childspacepopup;
    pp->pop[0]=pop0;
    pp->pop[1]=pop1;
    pp->pop[2]=pop2;
    pp->save=0;
    v->kind="popup";
}
@

<<function plpopup>>=
Panel *plpopup(Panel *parent, int flags, Panel *pop0, Panel *pop1, Panel *pop2){
    Panel *v;
    v=pl_newpanel(parent, sizeof(Popup));
    plinitpopup(v, flags, pop0, pop1, pop2);
    return v;
}
@


%-------------------------------------------------------------

<<windows/libpanel/popup.c>>=
/*
 * popup
 *	looks like a group, except diverts hits on certain buttons to
 *	panels that it temporarily pops up.
 */
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <event.h>
#include <panel.h>
#include "pldefs.h"
typedef struct Popup Popup;
<<struct Popup>>
<<function pl_drawpopup>>
<<function pl_hitpopup>>
<<function pl_typepopup>>
<<function pl_getsizepopup>>
<<function pl_childspacepopup>>
<<function pl_pripopup>>
<<function plinitpopup>>
<<function plpopup>>
@


\subsection*{[[windows/libpanel/print.c]]}

<<function pl_iprint>>=
void pl_iprint(int indent, char *fmt, ...){
    char buf[8192];
    va_list arg;
    memset(buf, '\t', indent);
    va_start(arg, fmt);
    write(1, buf, vsnprint(buf+indent, sizeof(buf)-indent, fmt, arg));
    va_end(arg);
}
@

<<function pl_ipprint>>=
void pl_ipprint(Panel *p, int n){
    Panel *c;
    char *place, *stick;
    pl_iprint(n, "%s (0x%.8x)\n", p->kind, p);
    pl_iprint(n, "  r=(%d %d, %d %d)\n",
        p->r.min.x, p->r.min.y, p->r.max.x, p->r.max.y);
    switch(p->flags&PACK){
    default: SET(place); break;
    case PACKN: place="n"; break;
    case PACKE: place="e"; break;
    case PACKS: place="s"; break;
    case PACKW: place="w"; break;
    }
    switch(p->flags&PLACE){
    default: SET(stick); break;
    case PLACECEN:	stick=""; break;
    case PLACES:	stick=" stick s"; break;
    case PLACEE:	stick=" stick e"; break;
    case PLACEW:	stick=" stick w"; break;
    case PLACEN:	stick=" stick n"; break;
    case PLACENE:	stick=" stick ne"; break;
    case PLACENW:	stick=" stick nw"; break;
    case PLACESE:	stick=" stick se"; break;
    case PLACESW:	stick=" stick sw"; break;
    }
    pl_iprint(n, "  place %s%s%s%s%s%s\n",
        place,
        p->flags&FILLX?" fill x":"",
        p->flags&FILLY?" fill y":"",
        stick,
        p->flags&EXPAND?" expand":"",
        p->flags&FIXED?" fixed":"");
    if(!eqpt(p->pad, Pt(0, 0))) pl_iprint(n, "  pad=%d,%d)\n", p->pad.x, p->pad.y);
    if(!eqpt(p->ipad, Pt(0, 0))) pl_iprint(n, "  ipad=%d,%d)\n", p->ipad.x, p->ipad.y);
    pl_iprint(n, "  size=(%d,%d), sizereq=(%d,%d)\n",
        p->size.x, p->size.y, p->sizereq.x, p->sizereq.y);
    for(c=p->child;c;c=c->next)
        pl_ipprint(c, n+1);
}
@

<<function pl_print>>=
void pl_print(Panel *p){
    pl_ipprint(p, 0);
}
@


%-------------------------------------------------------------

<<windows/libpanel/print.c>>=
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <event.h>
#include <panel.h>
#include "pldefs.h"
<<function pl_iprint>>
<<function pl_ipprint>>
<<function pl_print>>
@


\subsection*{[[windows/libpanel/pulldown.c]]}

<<struct Pulldown>>=
struct Pulldown{
    Icon *icon;		/* button label */
    Panel *pull;		/* Panel to pull down */
    int side;		/* which side of the button to put the panel on */
    Image *save;		/* where to save what we draw the panel on */
};
@

<<function pl_drawpulldown>>=
void pl_drawpulldown(Panel *p){
    pl_drawicon(p->b, pl_box(p->b, p->r, p->state), PLACECEN,
        p->flags, ((Pulldown *)p->data)->icon);
}
@

<<function pl_hitpulldown>>=
int pl_hitpulldown(Panel *g, Mouse *m){
    int oldstate, passon;
    Rectangle r;
    Panel *p, *hitme;
    Pulldown *pp;
    pp=g->data;
    oldstate=g->state;
    p=pp->pull;
    hitme=0;
    switch(g->state){
    case UP:
        if(!ptinrect(m->xy, g->r))
            g->state=UP;
        else if(m->buttons&7){
            r=g->b->r;
            p->flags&=~PLACE;
            switch(pp->side){
            case PACKN:
                r.min.x=g->r.min.x;
                r.max.y=g->r.min.y;
                p->flags|=PLACESW;
                break;
            case PACKS:
                r.min.x=g->r.min.x;
                r.min.y=g->r.max.y;
                p->flags|=PLACENW;
                break;
            case PACKE:
                r.min.x=g->r.max.x;
                r.min.y=g->r.min.y;
                p->flags|=PLACENW;
                break;
            case PACKW:
                r.max.x=g->r.min.x;
                r.min.y=g->r.min.y;
                p->flags|=PLACENE;
                break;
            case PACKCEN:
                r.min=g->r.min;
                p->flags|=PLACENW;
                break;
            }
            plpack(p, r);
            pp->save=allocimage(display, p->r, g->b->chan, 0, DNofill);
            if(pp->save!=0) draw(pp->save, p->r, g->b, 0, p->r.min);
            pl_invis(p, 0);
            pldraw(p, g->b);
            g->state=DOWN;
        }
        break;
    case DOWN:
        if(!ptinrect(m->xy, g->r)){
            switch(pp->side){
            default: SET(passon); break;		/* doesn't happen */
            case PACKN: passon=m->xy.y<g->r.min.y; break;
            case PACKS: passon=m->xy.y>=g->r.max.y; break;
            case PACKE: passon=m->xy.x>=g->r.max.x; break;
            case PACKW: passon=m->xy.x<g->r.min.x; break;
            case PACKCEN: passon=1; break;
            }
            if(passon){
                hitme=p;
                if((m->buttons&7)==0) g->state=UP;
            }
            else	g->state=UP;
        }
        else if((m->buttons&7)==0) g->state=UP;
        else hitme=p;
        if(g->state!=DOWN && pp->save){
            draw(g->b, p->r, pp->save, 0, p->r.min);
            freeimage(pp->save);
            pp->save=0;
            pl_invis(p, 1);
            hitme=p;
        }
    }
    if(g->state!=oldstate) pldraw(g, g->b);
    if(hitme) plmouse(hitme, m);
    return g->state==DOWN;
}
@

<<function pl_typepulldown>>=
void pl_typepulldown(Panel *p, Rune c){
    USED(p, c);
}
@

<<function pl_getsizepulldown>>=
Point pl_getsizepulldown(Panel *p, Point children){
    USED(p, children);
    return pl_boxsize(pl_iconsize(p->flags, ((Pulldown *)p->data)->icon), p->state);
}
@

<<function pl_childspacepulldown>>=
void pl_childspacepulldown(Panel *p, Point *ul, Point *size){
    USED(p, ul, size);
}
@

<<function plinitpulldown>>=
void plinitpulldown(Panel *v, int flags, Icon *icon, Panel *pullthis, int side){
    Pulldown *pp;
    pp=v->data;
    v->flags=flags|LEAF;
    v->draw=pl_drawpulldown;
    v->hit=pl_hitpulldown;
    v->type=pl_typepulldown;
    v->getsize=pl_getsizepulldown;
    v->childspace=pl_childspacepulldown;
    pp->pull=pullthis;
    pp->side=side;
    pp->icon=icon;
    v->kind="pulldown";
}
@

<<function plpulldown>>=
Panel *plpulldown(Panel *parent, int flags, Icon *icon, Panel *pullthis, int side){
    Panel *v;
    v=pl_newpanel(parent, sizeof(Pulldown));
    v->state=UP;
    ((Pulldown *)v->data)->save=0;
    plinitpulldown(v, flags, icon, pullthis, side);
    return v;
}
@

<<function plmenubar>>=
Panel *plmenubar(Panel *parent, int flags, int cflags, Icon *l1, Panel *m1, Icon *l2, ...){
    Panel *v;
    va_list arg;
    Icon *s;
    int pulldir;
    switch(cflags&PACK){
    default:
        SET(pulldir);
        break;
    case PACKE:
    case PACKW:
        pulldir=PACKS;
        break;
    case PACKN:
    case PACKS:
        pulldir=PACKE;
        break;
    }
    v=plgroup(parent, flags);
    va_start(arg, cflags);
    while((s=va_arg(arg, Icon *))!=0)
        plpulldown(v, cflags, s, va_arg(arg, Panel *), pulldir);
    va_end(arg);
    USED(l1, m1, l2);
    v->kind="menubar";
    return v;
}
@


%-------------------------------------------------------------

<<windows/libpanel/pulldown.c>>=
/*
 * pulldown
 *	makes a button that pops up a panel when hit
 */
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <event.h>
#include <panel.h>
#include "pldefs.h"
typedef struct Pulldown Pulldown;
<<struct Pulldown>>
<<function pl_drawpulldown>>
<<function pl_hitpulldown>>
<<function pl_typepulldown>>
<<function pl_getsizepulldown>>
<<function pl_childspacepulldown>>
<<function plinitpulldown>>
<<function plpulldown>>
<<function plmenubar>>
@


\subsection*{[[windows/libpanel/rtext.c]]}

<<constant LEAD>>=
#define LEAD	4	/* extra space between lines */
@

<<constant BORD>>=
#define BORD	2	/* extra border for images */
@

<<function pl_rtnew>>=
Rtext *pl_rtnew(Rtext **t, int space, int indent, Image *b, Panel *p, Font *f, char *s, int flags, void *user){
    Rtext *new;
    new=pl_emalloc(sizeof(Rtext));
    new->flags=flags;
    new->user=user;
    new->space=space;
    new->indent=indent;
    new->b=b;
    new->p=p;
    new->font=f;
    new->text=s;
    new->next=0;
    new->nextline=0;
    new->r=Rect(0,0,0,0);
    if(*t)
        (*t)->last->next=new;
    else
        *t=new;
    (*t)->last=new;
    return new;
}
@

<<function plrtpanel>>=
Rtext *plrtpanel(Rtext **t, int space, int indent, Panel *p, void *user){
    return pl_rtnew(t, space, indent, 0, p, 0, 0, 1, user);
}
@

<<function plrtstr>>=
Rtext *plrtstr(Rtext **t, int space, int indent, Font *f, char *s, int flags, void *user){
    return pl_rtnew(t, space, indent, 0, 0, f, s, flags, user);
}
@

<<function plrtbitmap>>=
Rtext *plrtbitmap(Rtext **t, int space, int indent, Image *b, int flags, void *user){
    return pl_rtnew(t, space, indent, b, 0, 0, 0, flags, user);
}
@

<<function plrtfree>>=
void plrtfree(Rtext *t){
    Rtext *next;
    while(t){
        next=t->next;
        free(t);
        t=next;
    }
}
@

<<function pltabsize>>=
void pltabsize(int min, int size){
    pl_tabmin=min;
    pl_tabsize=size;
}
@

<<function pl_space>>=
int pl_space(int space, int pos, int indent){
    if(space>=0) return space;
    switch(PL_OP(space)){
    default:
        return 0;
    case PL_TAB:
        return ((pos-indent+pl_tabmin)/pl_tabsize+PL_ARG(space))*pl_tabsize+indent-pos;
    }
}
@

<<function pl_rtfmt>>=
/*
 * initialize rectangles & nextlines of text starting at t,
 * galley width is wid.  Returns the total length of the text
 */
int pl_rtfmt(Rtext *t, int wid){
    Rtext *tp, *eline;
    int ascent, descent, x, space, a, d, w, topy, indent;
    Point p;
    p=Pt(0,0);
    eline=t;
    while(t){
        ascent=0;
        descent=0;
        indent=space=pl_space(t->indent, 0, 0);
        x=0;
        tp=t;
        for(;;){
            if(tp->b){
                a=tp->b->r.max.y-tp->b->r.min.y+BORD;
                d=BORD;
                w=tp->b->r.max.x-tp->b->r.min.x+BORD*2;
            }
            else if(tp->p){
                /* what if plpack fails? */
                plpack(tp->p, Rect(0,0,wid,wid));
                plmove(tp->p, subpt(Pt(0,0), tp->p->r.min));
                a=tp->p->r.max.y-tp->p->r.min.y;
                d=0;
                w=tp->p->r.max.x-tp->p->r.min.x;
            }
            else{
                a=tp->font->ascent;
                d=tp->font->height-a;
                w=tp->wid=stringwidth(tp->font, tp->text);
            }
            if(x+w+space>wid) break;
            if(a>ascent) ascent=a;
            if(d>descent) descent=d;
            x+=w+space;
            tp=tp->next;
            if(tp==0){
                eline=0;
                break;
            }
            space=pl_space(tp->space, x, indent);
            if(space) eline=tp;
        }
        if(eline==t){	/* No progress!  Force fit the first block! */
            if(tp==t){
                if(a>ascent) ascent=a;
                if(d>descent) descent=d;
                eline=tp->next;
            }else
                eline=tp;
        }
        topy=p.y;
        p.y+=ascent;
        p.x=indent=pl_space(t->indent, 0, 0);
        for(;;){
            t->topy=topy;
            t->r.min.x=p.x;
            if(t->b){
                t->r.max.y=p.y+BORD;
                t->r.min.y=p.y-(t->b->r.max.y-t->b->r.min.y)-BORD;
                p.x+=(t->b->r.max.x-t->b->r.min.x)+BORD*2;
            }
            else if(t->p){
                t->r.max.y=p.y;
                t->r.min.y=p.y-t->p->r.max.y;
                p.x+=t->p->r.max.x;
            }
            else{
                t->r.min.y=p.y-t->font->ascent;
                t->r.max.y=t->r.min.y+t->font->height;
                p.x+=t->wid;
            }
            t->r.max.x=p.x;
            t->nextline=eline;
            t=t->next;
            if(t==eline) break;
            p.x+=pl_space(t->space, p.x, indent);
        }
        p.y+=descent+LEAD;
    }
    return p.y;
}
@

<<function pl_stuffbitmap>>=
/*
 * If we draw the text in a backup bitmap and copy it onto the screen,
 * the bitmap pointers in all the subpanels point to the wrong bitmap.
 * This code fixes them.
 */
void pl_stuffbitmap(Panel *p, Image *b){
    p->b=b;
    for(p=p->child;p;p=p->next)
        pl_stuffbitmap(p, b);
}
@

<<function pl_rtdraw>>=
void pl_rtdraw(Image *b, Rectangle r, Rtext *t, int yoffs){
    static Image *backup;
    Point offs, lp;
    Rectangle dr;
    Image *bb;

    bb = b;
    if(backup==0 || backup->chan!=b->chan || rectinrect(r, backup->r)==0){
        freeimage(backup);
        backup=allocimage(display, bb->r, bb->chan, 0, DNofill);
    }
    if(backup)
        b=backup;
    pl_clr(b, r);
    lp=ZP;
    offs=subpt(r.min, Pt(0, yoffs));
    for(;t;t=t->next) if(!eqrect(t->r, Rect(0,0,0,0))){
        dr=rectaddpt(t->r, offs);
        if(dr.max.y>r.min.y
        && dr.min.y<r.max.y){
            if(t->b){
                draw(b, insetrect(dr, BORD), t->b, 0, t->b->r.min);
                if(t->flags&PL_HOT) border(b, dr, 1, display->black, ZP);
                if(t->flags&PL_SEL)
                    pl_highlight(b, dr);
            }
            else if(t->p){
                plmove(t->p, subpt(dr.min, t->p->r.min));
                pldraw(t->p, b);
                if(b!=bb)
                    pl_stuffbitmap(t->p, bb);
            }
            else{
                string(b, dr.min, display->black, ZP, t->font, t->text);
                if(t->flags&PL_SEL)
                    pl_highlight(b, dr);
                if(t->flags&PL_HOT){
                    if(lp.y+1 != dr.max.y)
                        lp = Pt(dr.min.x, dr.max.y-1);
                    line(b, lp, Pt(dr.max.x, dr.max.y-1),
                        Endsquare, Endsquare, 0,
                        display->black, ZP);
                    lp = Pt(dr.max.x, dr.max.y-1);
                    continue;
                }
            }
            lp=ZP;
        }
    }
    if(b!=bb)
        draw(bb, r, b, 0, r.min);
}
@

<<function pl_reposition>>=
/*
 * Reposition text already drawn in the window.
 * We just move the pixels and update the positions of any
 * enclosed panels
 */
void pl_reposition(Rtext *t, Image *b, Point p, Rectangle r){
    Point offs;
    pl_cpy(b, p, r);
    offs=subpt(p, r.min);
    for(;t;t=t->next)
        if(!eqrect(t->r, Rect(0,0,0,0)) && !t->b && t->p)
            plmove(t->p, offs);
}
@

<<function pl_rtredraw>>=
/*
 * Rectangle r of Image b contains an image of Rtext t, offset by oldoffs.
 * Redraw the text to have offset yoffs.
 */
void pl_rtredraw(Image *b, Rectangle r, Rtext *t, int yoffs, int oldoffs){
    int dy, size;
    dy=oldoffs-yoffs;
    size=r.max.y-r.min.y;
    if(dy>=size || -dy>=size)
        pl_rtdraw(b, r, t, yoffs);
    else if(dy<0){
        pl_reposition(t, b, r.min,
            Rect(r.min.x, r.min.y-dy, r.max.x, r.max.y));
        pl_rtdraw(b, Rect(r.min.x, r.max.y+dy, r.max.x, r.max.y),
            t, yoffs+size+dy);
    }
    else if(dy>0){
        pl_reposition(t, b, Pt(r.min.x, r.min.y+dy),
            Rect(r.min.x, r.min.y, r.max.x, r.max.y-dy));
        pl_rtdraw(b, Rect(r.min.x, r.min.y, r.max.x, r.min.y+dy), t, yoffs);
    }
}
@

<<function pl_rthit>>=
Rtext *pl_rthit(Rtext *t, int yoffs, Point p, Point ul){
    Rectangle r;
    Point lp;
    if(t==0) return 0;
    p.x-=ul.x;
    p.y+=yoffs-ul.y;
    while(t->nextline && t->nextline->topy<=p.y) t=t->nextline;
    lp=ZP;
    for(;t!=0;t=t->next){
        if(t->topy>p.y) return 0;
        r = t->r;
        if((t->flags&PL_HOT) != 0 && t->b == nil && t->p == nil){
            if(lp.y == r.max.y && lp.x < r.min.x)
                r.min.x=lp.x;
            lp=r.max;
        } else
            lp=ZP;
        if(ptinrect(p, r)) return t;
    }
    return 0;
}
@

<<function plrtseltext>>=
void plrtseltext(Rtext *t, Rtext *s, Rtext *e){
    while(t){
        t->flags &= ~PL_SEL;
        t = t->next;
    }
    if(s==0 || e==0)
        return;
    for(t=s; t!=0 && t!=e; t=t->next)
        ;
    if(t==e){
        for(t=s; t!=e; t=t->next)
            t->flags |= PL_SEL;
    }else{
        for(t=e; t!=s; t=t->next)
            t->flags |= PL_SEL;
    }
    t->flags |= PL_SEL;
}
@

<<function plrtsnarftext>>=
char *plrtsnarftext(Rtext *w){
    char *b, *p, *e, *t;
    int n;

    b=p=e=0;
    for(; w; w = w->next){
        if((w->flags&PL_SEL)==0 || w->text==0)
            continue;
        n = strlen(w->text)+64;
        if(p+n >= e){
            n = (p+n+64)-b;
            t = pl_erealloc(b, n);
            p = t+(p-b);
            e = t+n;
            b = t;
        }
        if(w->space == 0)
            p += sprint(p, "%s", w->text);
        else if(w->space > 0)
            p += sprint(p, " %s", w->text);
        else if(PL_OP(w->space) == PL_TAB)
            p += sprint(p, "\t%s", w->text);
        if(w->nextline == w->next)
            p += sprint(p, "\n");
    }
    return b;
}
@


%-------------------------------------------------------------

<<windows/libpanel/rtext.c>>=
/*
 * Rich text with images.
 * Should there be an offset field, to do subscripts & kerning?
 */
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <event.h>
#include <panel.h>
#include "pldefs.h"
#include "rtext.h"

<<constant LEAD>>
<<constant BORD>>

<<function pl_rtnew>>
<<function plrtpanel>>
<<function plrtstr>>
<<function plrtbitmap>>
<<function plrtfree>>
int pl_tabmin, pl_tabsize;
<<function pltabsize>>
<<function pl_space>>
<<function pl_rtfmt>>

<<function pl_stuffbitmap>>

<<function pl_rtdraw>>
<<function pl_reposition>>
<<function pl_rtredraw>>
<<function pl_rthit>>

<<function plrtseltext>>

<<function plrtsnarftext>>
@


\subsection*{[[windows/libpanel/rtext.h]]}

<<constant PL_NOPBIT>>=
/*
 * Rtext definitions
 */
#define	PL_NOPBIT	4
@

<<constant PL_NARGBIT>>=
#define	PL_NARGBIT	12
@

<<constant PL_ARGMASK>>=
#define	PL_ARGMASK	((1<<PL_NARGBIT)-1)
@

<<function PL_SPECIAL>>=
#define	PL_SPECIAL(op)	(((-1<<PL_NOPBIT)|op)<<PL_NARGBIT)
@

<<function PL_OP>>=
#define	PL_OP(t)	((t)&~PL_ARGMASK)
@

<<function PL_ARG>>=
#define	PL_ARG(t)	((t)&PL_ARGMASK)
@

<<constant PL_TAB>>=
#define	PL_TAB		PL_SPECIAL(0)		/* # of tab stops before text */
@


%-------------------------------------------------------------

<<windows/libpanel/rtext.h>>=
<<constant PL_NOPBIT>>
<<constant PL_NARGBIT>>
<<constant PL_ARGMASK>>
<<function PL_SPECIAL>>
<<function PL_OP>>
<<function PL_ARG>>
<<constant PL_TAB>>
void pltabsize(int, int);			/* set min tab and tab size */
@


\subsection*{[[windows/libpanel/scroll.c]]}

<<function plscroll>>=
void plscroll(Panel *scrollee, Panel *xscroller, Panel *yscroller){
    scrollee->xscroller=xscroller;
    scrollee->yscroller=yscroller;
    if(xscroller) xscroller->scrollee=scrollee;
    if(yscroller) yscroller->scrollee=scrollee;
}
@

<<function plgetscroll>>=
Scroll plgetscroll(Panel *p){
    return p->scr;
}
@

<<function plsetscroll>>=
void plsetscroll(Panel *p, Scroll s){
    if(p->scroll){
        if(s.size.x) p->scroll(p, HORIZ, 2, s.pos.x, s.size.x);
        if(s.size.y) p->scroll(p, VERT, 2, s.pos.y, s.size.y);
    }
}
@


%-------------------------------------------------------------

<<windows/libpanel/scroll.c>>=
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <event.h>
#include <panel.h>
#include "pldefs.h"
<<function plscroll>>
<<function plgetscroll>>
<<function plsetscroll>>
@


\subsection*{[[windows/libpanel/scrollbar.c]]}

<<struct Scrollbar>>=
struct Scrollbar{
    int dir;		/* HORIZ or VERT */
    int lo, hi;		/* setting, in screen coordinates */
    int buttons;		/* saved mouse buttons for transmittal to scrollee */
    Rectangle interior;
    Point minsize;
};
@

<<constant SBWID>>=
#define	SBWID	15	/* should come from draw.c? */
@

<<function pl_drawscrollbar>>=
void pl_drawscrollbar(Panel *p){
    Scrollbar *sp;
    sp=p->data;
    sp->interior=pl_outline(p->b, p->r, p->state);
    pl_sliderupd(p->b, sp->interior, sp->dir, sp->lo, sp->hi);
}
@

<<function pl_hitscrollbar>>=
int pl_hitscrollbar(Panel *g, Mouse *m){
    int oldstate, pos, len, dy;
    Point ul, size;
    Scrollbar *sp;
    sp=g->data;
    ul=g->r.min;
    size=subpt(g->r.max, g->r.min);
    pl_interior(g->state, &ul, &size);
    oldstate=g->state;
    if(!(g->flags & USERFL) && (m->buttons&OUT || !ptinrect(m->xy, g->r))){
        m->buttons&=~OUT;
        g->state=UP;
        goto out;
    }
    if(sp->dir==HORIZ){
        pos=m->xy.x-ul.x;
        len=size.x;
    }
    else{
        pos=m->xy.y-ul.y;
        len=size.y;
    }
    if(pos<0) pos=0;
    else if(pos>len) pos=len;
    if(m->buttons&7){
        g->state=DOWN;
        sp->buttons=m->buttons;
        switch(m->buttons){
        case 1:
            dy=pos*(sp->hi-sp->lo)/len;
            pl_sliderupd(g->b, sp->interior, sp->dir, sp->lo-dy,
                sp->hi-dy);
            break;
        case 2:
            if(g->scrollee && g->scrollee->scroll)
                g->scrollee->scroll(g->scrollee, sp->dir,
                    m->buttons, pos, len);
            break;
        case 4:
            dy=pos*(sp->hi-sp->lo)/len;
            pl_sliderupd(g->b, sp->interior, sp->dir, sp->lo+dy,
                sp->hi+dy);
            break;
        }
    }
    else{
        if(!(sp->buttons&2) && g->state==DOWN && g->scrollee && g->scrollee->scroll)
            g->scrollee->scroll(g->scrollee, sp->dir, sp->buttons,
                pos, len);
        g->state=UP;
    }
out:
    if(oldstate!=g->state) pldraw(g, g->b);
    return g->state==DOWN;
}
@

<<function pl_typescrollbar>>=
void pl_typescrollbar(Panel *p, Rune c){
    USED(p, c);
}
@

<<function pl_getsizescrollbar>>=
Point pl_getsizescrollbar(Panel *p, Point children){
    USED(children);
    return pl_boxsize(((Scrollbar *)p->data)->minsize, p->state);
}
@

<<function pl_childspacescrollbar>>=
void pl_childspacescrollbar(Panel *p, Point *ul, Point *size){
    USED(p, ul, size);
}
@

<<function pl_setscrollbarscrollbar>>=
/*
 * Arguments lo, hi and len are in the scrollee's natural coordinates
 */
void pl_setscrollbarscrollbar(Panel *p, int lo, int hi, int len){
    Point ul, size;
    int mylen;
    Scrollbar *sp;
    sp=p->data;
    ul=p->r.min;
    size=subpt(p->r.max, p->r.min);
    pl_interior(p->state, &ul, &size);
    mylen=sp->dir==HORIZ?size.x:size.y;
    if(len==0) len=1;
    sp->lo=lo*mylen/len;
    sp->hi=hi*mylen/len;
    if(sp->lo<0) sp->lo=0;
    if(sp->lo>=mylen) sp->hi=mylen-1;
    if(sp->hi<=sp->lo) sp->hi=sp->lo+1;
    if(sp->hi>mylen) sp->hi=mylen;
    pldraw(p, p->b);
}
@

<<function pl_priscrollbar>>=
int pl_priscrollbar(Panel *, Point){
    return PRI_SCROLLBAR;
}
@

<<function plinitscrollbar>>=
void plinitscrollbar(Panel *v, int flags){
    Scrollbar *sp;
    sp=v->data;
    v->flags=flags|LEAF;
    v->pri=pl_priscrollbar;
    v->state=UP;
    v->draw=pl_drawscrollbar;
    v->hit=pl_hitscrollbar;
    v->type=pl_typescrollbar;
    v->getsize=pl_getsizescrollbar;
    v->childspace=pl_childspacescrollbar;
    v->setscrollbar=pl_setscrollbarscrollbar;
    switch(flags&PACK){
    case PACKN:
    case PACKS:
        sp->dir=HORIZ;
        sp->minsize=Pt(0, SBWID);
        v->flags|=FILLX;
        break;
    case PACKE:
    case PACKW:
        sp->dir=VERT;
        sp->minsize=Pt(SBWID, 0);
        v->flags|=FILLY;
        break;
    }
    sp->lo=0;
    sp->hi=0;
    v->kind="scrollbar";
}
@

<<function plscrollbar>>=
Panel *plscrollbar(Panel *parent, int flags){
    Panel *v;
    v=pl_newpanel(parent, sizeof(Scrollbar));
    plinitscrollbar(v, flags);
    return v;
}
@


%-------------------------------------------------------------

<<windows/libpanel/scrollbar.c>>=
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <event.h>
#include <panel.h>
#include "pldefs.h"
typedef struct Scrollbar Scrollbar;
<<struct Scrollbar>>
<<constant SBWID>>
<<function pl_drawscrollbar>>
<<function pl_hitscrollbar>>
<<function pl_typescrollbar>>
<<function pl_getsizescrollbar>>
<<function pl_childspacescrollbar>>
<<function pl_setscrollbarscrollbar>>
<<function pl_priscrollbar>>
<<function plinitscrollbar>>
<<function plscrollbar>>
@


\subsection*{[[windows/libpanel/slider.c]]}

<<struct Slider>>=
struct Slider{
    int dir;			/* HORIZ or VERT */
    int val;			/* setting, in screen coordinates */
    Point minsize;
    void (*hit)(Panel *, int, int, int);	/* call back to user when slider changes */
    int buttons;
};
@

<<function pl_drawslider>>=
void pl_drawslider(Panel *p){
    Rectangle r;
    Slider *sp;
    sp=p->data;
    r=pl_box(p->b, p->r, UP);
    switch(sp->dir){
    case HORIZ: pl_sliderupd(p->b, r, sp->dir, 0, sp->val); break;
    case VERT:  pl_sliderupd(p->b, r, sp->dir, r.max.y-sp->val, r.max.y); break;
    }
}
@

<<function pl_hitslider>>=
int pl_hitslider(Panel *p, Mouse *m){
    int oldstate, oldval, len;
    Point ul, size;
    Slider *sp;
    sp=p->data;
    ul=p->r.min;
    size=subpt(p->r.max, p->r.min);
    pl_interior(p->state, &ul, &size);
    oldstate=p->state;
    oldval=sp->val;
    SET(len);
    if(m->buttons&OUT)
        p->state=UP;
    else if(m->buttons&7){
        p->state=DOWN;
        sp->buttons=m->buttons;
        if(sp->dir==HORIZ){
            sp->val=m->xy.x-ul.x;
            len=size.x;
        }
        else{
            sp->val=ul.y+size.y-m->xy.y;
            len=size.y;
        }
        if(sp->val<0) sp->val=0;
        else if(sp->val>len) sp->val=len;
    }
    else	/* mouse inside, but no buttons down */
        p->state=UP;
    if(oldval!=sp->val || oldstate!=p->state) pldraw(p, p->b);
    if(oldval!=sp->val && sp->hit) sp->hit(p, sp->buttons, sp->val, len);
    return 0;
}
@

<<function pl_typeslider>>=
void pl_typeslider(Panel *p, Rune c){
    USED(p, c);
}
@

<<function pl_getsizeslider>>=
Point pl_getsizeslider(Panel *p, Point children){
    USED(children);
    return pl_boxsize(((Slider *)p->data)->minsize, p->state);
}
@

<<function pl_childspaceslider>>=
void pl_childspaceslider(Panel *g, Point *ul, Point *size){
    USED(g, ul, size);
}
@

<<function plinitslider>>=
void plinitslider(Panel *v, int flags, Point size, void (*hit)(Panel *, int, int, int)){
    Slider *sp;
    sp=v->data;
    v->r=Rect(0,0,size.x,size.y);
    v->flags=flags|LEAF;
    v->state=UP;
    v->draw=pl_drawslider;
    v->hit=pl_hitslider;
    v->type=pl_typeslider;
    v->getsize=pl_getsizeslider;
    v->childspace=pl_childspaceslider;
    sp->minsize=size;
    sp->dir=size.x>size.y?HORIZ:VERT;
    sp->hit=hit;
    v->kind="slider";
}
@

<<function plslider>>=
Panel *plslider(Panel *parent, int flags, Point size, void (*hit)(Panel *, int, int, int)){
    Panel *p;
    p=pl_newpanel(parent, sizeof(Slider));
    plinitslider(p, flags, size, hit);
    return p;
}
@

<<function plsetslider>>=
void plsetslider(Panel *p, int value, int range){
    Slider *sp;
    sp=p->data;
    if(value<0) value=0;
    else if(value>range) value=range;
    if(sp->dir==HORIZ) sp->val=value*(p->r.max.x-p->r.min.x)/range;
    else sp->val=value*(p->r.max.y-p->r.min.y)/range;
}
@


%-------------------------------------------------------------

<<windows/libpanel/slider.c>>=
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <event.h>
#include <panel.h>
#include "pldefs.h"
typedef struct Slider Slider;
<<struct Slider>>
<<function pl_drawslider>>
<<function pl_hitslider>>
<<function pl_typeslider>>
<<function pl_getsizeslider>>
<<function pl_childspaceslider>>
<<function plinitslider>>
<<function plslider>>
<<function plsetslider>>
@


\subsection*{[[windows/libpanel/snarf.c]]}

<<function plputsnarf>>=
void plputsnarf(char *s){
    int fd;

    if(s==0 || *s=='\0')
        return;
    if((fd=open("/dev/snarf", OWRITE|OTRUNC))>=0){
        write(fd, s, strlen(s));
        close(fd);
    }
}
@

<<function plgetsnarf>>=
char *plgetsnarf(void){
    int fd, n, r;
    char *s;

    if((fd=open("/dev/snarf", OREAD))<0)
        return nil;
    n=0;
    s=nil;
    for(;;){
        s=pl_erealloc(s, n+1024);
        if((r = read(fd, s+n, 1024)) <= 0)
            break;
        n += r;
    }
    close(fd);
    if(n <= 0){
        free(s);
        return nil;
    }
    s[n] = '\0';
    return s;
}
@

<<function plsnarf>>=
void plsnarf(Panel *p){
    char *s;

    if(p==0 || p->snarf==0)
        return;
    s=p->snarf(p);
    plputsnarf(s);
    free(s);
}
@

<<function plpaste>>=
void plpaste(Panel *p){
    char *s;

    if(p==0 || p->paste==0)
        return;
    if(s=plgetsnarf()){
        p->paste(p, s);
        free(s);
    }
}
@


%-------------------------------------------------------------

<<windows/libpanel/snarf.c>>=
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <event.h>
#include <panel.h>
#include "pldefs.h"

<<function plputsnarf>>
<<function plgetsnarf>>
<<function plsnarf>>
<<function plpaste>>
@


\subsection*{[[windows/libpanel/textview.c]]}

<<struct Textview>>=
struct Textview{
    void (*hit)(Panel *, int, Rtext *); /* call back to user on hit */
    Rtext *text;			/* text */
    int yoffs;			/* offset of top of screen */
    Rtext *hitword;			/* text to hilite */
    Rtext *hitfirst;		/* first word in range select */
    int twid;			/* text width */
    int thgt;			/* text height */
    Point minsize;			/* smallest acceptible window size */
    int buttons;
};
@

<<function pl_setscrpos>>=
void pl_setscrpos(Panel *p, Textview *tp, Rectangle r){
    Panel *sb;
    int lo, hi;
    lo=tp->yoffs;
    hi=lo+r.max.y-r.min.y;	/* wrong? */
    sb=p->yscroller;
    if(sb && sb->setscrollbar) sb->setscrollbar(sb, lo, hi, tp->thgt);
}
@

<<function pl_drawtextview>>=
void pl_drawtextview(Panel *p){
    int twid;
    Rectangle r;
    Textview *tp;
    tp=p->data;
    r=pl_outline(p->b, p->r, UP);
    twid=r.max.x-r.min.x;
    if(twid!=tp->twid){
        tp->twid=twid;
        tp->thgt=pl_rtfmt(tp->text, tp->twid);
        p->scr.size.y=tp->thgt;
    }
    p->scr.pos.y=tp->yoffs;
    pl_rtdraw(p->b, r, tp->text, tp->yoffs);
    pl_setscrpos(p, tp, r);
}
@

<<function pl_passon>>=
/*
 * If t is a panel word, pass the mouse event on to it
 */
void pl_passon(Rtext *t, Mouse *m){
    if(t && t->b==0 && t->p!=0)
        plmouse(t->p, m);
}
@

<<function pl_hittextview>>=
int pl_hittextview(Panel *p, Mouse *m){
    Rtext *oldhitword, *oldhitfirst;
    int hitme, oldstate;
    Point ul, size;
    Textview *tp;

    tp=p->data;

    hitme=0;
    oldstate=p->state;
    oldhitword=tp->hitword;
    oldhitfirst=tp->hitfirst;
    if(oldhitword==oldhitfirst)
        pl_passon(oldhitword, m);
    if(m->buttons&OUT)
        p->state=UP;
    else if(m->buttons&7){
        p->state=DOWN;
        tp->buttons=m->buttons;
        if(oldhitword==0 || oldhitword->p==0 || (oldhitword->p->flags&REMOUSE)==0){
            ul=p->r.min;
            size=subpt(p->r.max, p->r.min);
            pl_interior(p->state, &ul, &size);
            tp->hitword=pl_rthit(tp->text, tp->yoffs, m->xy, ul);
            if(tp->hitword==0)
                if(oldhitword!=0 && oldstate==DOWN)
                    tp->hitword=oldhitword;
                else
                    tp->hitfirst=0;
            if(tp->hitword!=0 && oldstate!=DOWN)
                tp->hitfirst=tp->hitword;
        }
    }
    else{
        if(p->state==DOWN) hitme=1;
        p->state=UP;
    }
    if(tp->hitfirst!=oldhitfirst || tp->hitword!=oldhitword){
        plrtseltext(tp->text, tp->hitword, tp->hitfirst);
        pl_drawtextview(p);
        if(tp->hitword==tp->hitfirst)
            pl_passon(tp->hitword, m);
    }
    if(hitme && tp->hit && tp->hitword!=0 && tp->hitword==tp->hitfirst){
        plrtseltext(tp->text, 0, 0);
        pl_drawtextview(p);
        tp->hit(p, tp->buttons, tp->hitword);
        tp->hitword=0;
        tp->hitfirst=0;
    }
    return 0;
}
@

<<function pl_scrolltextview>>=
void pl_scrolltextview(Panel *p, int dir, int buttons, int num, int den){
    int yoffs;
    Point ul, size;
    Textview *tp;
    Rectangle r;
    if(dir!=VERT) return;

    tp=p->data;
    ul=p->r.min;
    size=subpt(p->r.max, p->r.min);
    pl_interior(p->state, &ul, &size);
    switch(buttons){
    default:
        SET(yoffs);
        break;
    case 1:		/* left -- top moves to pointer */
        yoffs=(vlong)tp->yoffs-num*size.y/den;
        if(yoffs<0) yoffs=0;
        break;
    case 2:		/* middle -- absolute index of file */
        yoffs=(vlong)tp->thgt*num/den;
        break;
    case 4:		/* right -- line pointed at moves to top */
        yoffs=tp->yoffs+(vlong)num*size.y/den;
        if(yoffs>tp->thgt) yoffs=tp->thgt;
        break;
    }
    if(yoffs!=tp->yoffs){
        r=pl_outline(p->b, p->r, p->state);
        pl_rtredraw(p->b, r, tp->text, yoffs, tp->yoffs);
        p->scr.pos.y=tp->yoffs=yoffs;
        pl_setscrpos(p, tp, r);
    }
}
@

<<function pl_typetextview>>=
void pl_typetextview(Panel *g, Rune c){
    USED(g, c);
}
@

<<function pl_getsizetextview>>=
Point pl_getsizetextview(Panel *p, Point children){
    USED(children);
    return pl_boxsize(((Textview *)p->data)->minsize, p->state);
}
@

<<function pl_childspacetextview>>=
void pl_childspacetextview(Panel *g, Point *ul, Point *size){
    USED(g, ul, size);
}
@

<<function pl_pritextview>>=
/*
 * Priority depends on what thing inside the panel we're pointing at.
 */
int pl_pritextview(Panel *p, Point xy){
    Point ul, size;
    Textview *tp;
    Rtext *h;
    tp=p->data;
    ul=p->r.min;
    size=subpt(p->r.max, p->r.min);
    pl_interior(p->state, &ul, &size);
    h=pl_rthit(tp->text, tp->yoffs, xy, ul);
    if(h && h->b==0 && h->p!=0){
        p=pl_ptinpanel(xy, h->p);
        if(p) return p->pri(p, xy);
    }
    return PRI_NORMAL;
}
@

<<function pl_snarftextview>>=
char* pl_snarftextview(Panel *p){
    return plrtsnarftext(((Textview *)p->data)->text);
}
@

<<function plinittextview>>=
void plinittextview(Panel *v, int flags, Point minsize, Rtext *t, void (*hit)(Panel *, int, Rtext *)){
    Textview *tp;
    tp=v->data;
    v->flags=flags|LEAF;
    v->state=UP;
    v->draw=pl_drawtextview;
    v->hit=pl_hittextview;
    v->type=pl_typetextview;
    v->getsize=pl_getsizetextview;
    v->childspace=pl_childspacetextview;
    v->kind="textview";
    v->pri=pl_pritextview;
    tp->hit=hit;
    tp->minsize=minsize;
    tp->text=t;
    tp->yoffs=0;
    tp->hitfirst=0;
    tp->hitword=0;
    v->scroll=pl_scrolltextview;
    v->snarf=pl_snarftextview;
    tp->twid=-1;
    v->scr.pos=Pt(0,0);
    v->scr.size=Pt(0,1);
}
@

<<function pltextview>>=
Panel *pltextview(Panel *parent, int flags, Point minsize, Rtext *t, void (*hit)(Panel *, int, Rtext *)){
    Panel *v;
    v=pl_newpanel(parent, sizeof(Textview));
    plinittextview(v, flags, minsize, t, hit);
    return v;
}
@

<<function plgetpostextview>>=
int plgetpostextview(Panel *p){
    return ((Textview *)p->data)->yoffs;
}
@

<<function plsetpostextview>>=
void plsetpostextview(Panel *p, int yoffs){
    ((Textview *)p->data)->yoffs=yoffs;
    pldraw(p, p->b);
}
@


%-------------------------------------------------------------

<<windows/libpanel/textview.c>>=
/*
 * Fonted text viewer, calls out to code in rtext.c
 *
 * Should redo this to copy the already-visible parts on scrolling & only
 * update the newly appearing stuff -- then the offscreen assembly bitmap can go away.
 */
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <event.h>
#include <panel.h>
#include "pldefs.h"

typedef struct Textview Textview;
<<struct Textview>>

<<function pl_setscrpos>>
<<function pl_drawtextview>>
<<function pl_passon>>
<<function pl_hittextview>>
<<function pl_scrolltextview>>
<<function pl_typetextview>>
<<function pl_getsizetextview>>
<<function pl_childspacetextview>>
<<function pl_pritextview>>

<<function pl_snarftextview>>

<<function plinittextview>>
<<function pltextview>>
<<function plgetpostextview>>
<<function plsetpostextview>>
@


\subsection*{[[windows/libpanel/textwin.c]]}

<<constant SLACK (windows/libpanel/textwin.c)>>=
#define SLACK 100
@

<<function tw_before>>=
/*
 * Is text at point a before or after that at point b?
 */
int tw_before(Textwin *t, Point a, Point b){
    return a.y<b.y || a.y<b.y+t->hgt && a.x<b.x;
}
@

<<function twpt2rune>>=
/*
 * Return the character index indicated by point p, or -1
 * if its off-screen.  The screen must be up-to-date.
 *
 * Linear search should be binary search.
 */
int twpt2rune(Textwin *t, Point p){
    Point *el, *lp;
    el=t->loc+(t->bot-t->top);
    for(lp=t->loc;lp!=el;lp++)
        if(tw_before(t, p, *lp)){
            if(lp==t->loc) return t->top;
            return lp-t->loc+t->top-1;
        }
    return t->bot;
}
@

<<function tw_rune2pt>>=
/*
 * Return ul corner of the character with the given index
 */
Point tw_rune2pt(Textwin *t, int i){
    if(i<t->top) return t->r.min;
    if(i>t->bot) return t->r.max;
    return t->loc[i-t->top];
}
@

<<function tw_storeloc>>=
/*
 * Store p at t->loc[l], extending t->loc if necessary
 */
void tw_storeloc(Textwin *t, int l, Point p){
    int nloc;
    if(l>=t->eloc-t->loc){
        nloc=l+SLACK;
        t->loc=pl_erealloc(t->loc, nloc*sizeof(Point));
        t->eloc=t->loc+nloc;
    }
    t->loc[l]=p;
}
@

<<function tw_setloc>>=
/*
 * Set the locations at which the given runes should appear.
 * Returns the index of the first rune not set, which might not
 * be last because we reached the bottom of the window.
 *
 * N.B. this zaps the loc of r[last], so that value should be saved first,
 * if it's important.
 */
int tw_setloc(Textwin *t, int first, int last, Point ul){
    Rune *r, *er;
    int x, dt, lp;
    char buf[UTFmax+1];
    er=t->text+last;
    for(r=t->text+first,lp=first-t->top;r!=er && ul.y+t->hgt<=t->r.max.y;r++,lp++){
        tw_storeloc(t, lp, ul);
        switch(*r){
        case '\n':
            ul.x=t->r.min.x;
            ul.y+=t->hgt;
            break;
        case '\t':
            x=ul.x-t->r.min.x+t->mintab+t->tabstop;
            x-=x%t->tabstop;
            ul.x=x+t->r.min.x;
            if(ul.x>t->r.max.x){
                ul.x=t->r.min.x;
                ul.y+=t->hgt;
                tw_storeloc(t, lp, ul);
                if(ul.y+t->hgt>t->r.max.y) return r-t->text;
                ul.x+=+t->tabstop;
            }
            break;
        default:
            buf[runetochar(buf, r)]='\0';
            dt=stringwidth(t->font, buf);
            ul.x+=dt;
            if(ul.x>t->r.max.x){
                ul.x=t->r.min.x;
                ul.y+=t->hgt;
                tw_storeloc(t, lp, ul);
                if(ul.y+t->hgt>t->r.max.y) return r-t->text;
                ul.x+=dt;
            }
            break;
        }
    }
    tw_storeloc(t, lp, ul);
    return r-t->text;
}
@

<<function tw_draw>>=
/*
 * Draw the given runes at their locations.
 * Bug -- saving up multiple characters would
 * reduce the number of calls to string,
 * and probably make this a lot faster.
 */
void tw_draw(Textwin *t, int first, int last){
    Rune *r, *er;
    Point *lp, ul, ur;
    char buf[UTFmax+1];
    if(first<t->top) first=t->top;
    if(last>t->bot) last=t->bot;
    if(last<=first) return;
    er=t->text+last;
    for(r=t->text+first,lp=t->loc+(first-t->top);r!=er;r++,lp++){
        if(lp->y+t->hgt>t->r.max.y){
            fprint(2, "chr %C, index %ld of %d, loc %d %d, off bottom\n",
                *r, lp-t->loc, t->bot-t->top, lp->x, lp->y);
            return;
        }
        switch(*r){
        case '\n':
            ur=*lp;
            break;
        case '\t':
            ur=*lp;
            if(lp[1].y!=lp[0].y)
                ul=Pt(t->r.min.x, lp[1].y);
            else
                ul=*lp;
            pl_clr(t->b, Rpt(ul, Pt(lp[1].x, ul.y+t->hgt)));
            break;
        default:
            buf[runetochar(buf, r)]='\0';
    /***/		pl_clr(t->b, Rpt(*lp, addpt(*lp, stringsize(t->font, buf))));
            ur=string(t->b, *lp, display->black, ZP, t->font, buf);
            break;
        }
        if(lp[1].y!=lp[0].y)
    /***/		pl_clr(t->b, Rpt(ur, Pt(t->r.max.x, ur.y+t->hgt)));
    }
}
@

<<function tw_hilitep>>=
/*
 * Hilight the characters with tops between ul and ur
 */
void tw_hilitep(Textwin *t, Point ul, Point ur){
    Point swap;
    int y;
    if(tw_before(t, ur, ul)){ swap=ul; ul=ur; ur=swap;}
    y=ul.y+t->hgt;
    if(y>t->r.max.y) y=t->r.max.y;
    if(ul.y==ur.y)
        pl_highlight(t->b, Rpt(ul, Pt(ur.x, y)));
    else{
        pl_highlight(t->b, Rpt(ul, Pt(t->r.max.x, y)));
        ul=Pt(t->r.min.x, y);
        pl_highlight(t->b, Rpt(ul, Pt(t->r.max.x, ur.y)));
        ul=Pt(t->r.min.x, ur.y);
        y=ur.y+t->hgt;
        if(y>t->r.max.y) y=t->r.max.y;
        pl_highlight(t->b, Rpt(ul, Pt(ur.x, y)));
    }
}
@

<<function twhilite>>=
/*
 * Hilite/unhilite the given range of characters
 */
void twhilite(Textwin *t, int sel0, int sel1, int on){
    Point ul, ur;
    int swap, y;
    if(sel1<sel0){ swap=sel0; sel0=sel1; sel1=swap; }
    if(sel1<t->top || t->bot<sel0) return;
    if(sel0<t->top) sel0=t->top;
    if(sel1>t->bot) sel1=t->bot;
    if(!on){
        if(sel1==sel0){
            ul=t->loc[sel0-t->top];
            y=ul.y+t->hgt;
            if(y>t->r.max.y) y=t->r.max.y;
            pl_clr(t->b, Rpt(ul, Pt(ul.x+1, y)));
        }else
            tw_draw(t, sel0, sel1);
        return;
    }
    ul=t->loc[sel0-t->top];
    if(sel1==sel0)
        ur=addpt(ul, Pt(1, 0));
    else
        ur=t->loc[sel1-t->top];
    tw_hilitep(t, ul, ur);
}
@

<<function twselect>>=
/*
 * Set t->sel[01] from mouse input.
 * Also hilites the selection.
 * Caller should unhilite the previous
 * selection before calling this.
 */
void twselect(Textwin *t, Mouse *m){
    int sel0, sel1, newsel;
    Point p0, p1, newp;
    sel0=sel1=twpt2rune(t, m->xy);
    p0=tw_rune2pt(t, sel0);
    p1=addpt(p0, Pt(1, 0));
    twhilite(t, sel0, sel1, 1);
    for(;;){
        flushimage(display, 1);
        *m=emouse();
        if((m->buttons&7)!=1) break;
        newsel=twpt2rune(t, m->xy);
        newp=tw_rune2pt(t, newsel);
        if(eqpt(newp, p0)) newp=addpt(newp, Pt(1, 0));
        if(!eqpt(newp, p1)){
            if((sel0<=sel1 && sel1<newsel) || (newsel<sel1 && sel1<sel0))
                tw_hilitep(t, p1, newp);
            else if((sel0<=newsel && newsel<sel1) || (sel1<newsel && newsel<=sel0)){
                twhilite(t, sel1, newsel, 0);
                if(newsel==sel0)
                    tw_hilitep(t, p0, newp);
            }else if((newsel<sel0 && sel0<=sel1) || (sel1<sel0 && sel0<=newsel)){
                twhilite(t, sel0, sel1, 0);
                tw_hilitep(t, p0, newp);
            }
            sel1=newsel;
            p1=newp;
        }
    }
    if(sel0<=sel1){
        t->sel0=sel0;
        t->sel1=sel1;
    }
    else{
        t->sel0=sel1;
        t->sel1=sel0;
    }
}
@

<<function tw_clrend>>=
/*
 * Clear the area following the last displayed character
 */
void tw_clrend(Textwin *t){
    Point ul;
    int y;
    ul=t->loc[t->bot-t->top];
    y=ul.y+t->hgt;
    if(y>t->r.max.y) y=t->r.max.y;
    pl_clr(t->b, Rpt(ul, Pt(t->r.max.x, y)));
    ul=Pt(t->r.min.x, y);
    pl_clr(t->b, Rpt(ul, t->r.max));
}
@

<<function tw_moverect>>=
/*
 * Move part of a line of text, truncating the source or padding
 * the destination on the right if necessary.
 */
void tw_moverect(Textwin *t, Point uld, Point urd, Point uls, Point urs){
    int sw, dw, d;
    if(urs.y!=uls.y) urs=Pt(t->r.max.x, uls.y);
    if(urd.y!=uld.y) urd=Pt(t->r.max.x, uld.y);
    sw=uls.x-urs.x;
    dw=uld.x-urd.x;
    if(dw>sw){
        d=dw-sw;
        pl_clr(t->b, Rect(urd.x-d, urd.y, urd.x, urd.y+t->hgt));
        dw=sw;
    }
    pl_cpy(t->b, uld, Rpt(uls, Pt(uls.x+dw, uls.y+t->hgt)));
}
@

<<function tw_moveup>>=
/*
 * Move a block of characters up or to the left:
 *	Identify contiguous runs of characters whose width doesn't change, and
 *	move them in one bitblt per run.
 *	If we get to a point where source and destination are x-aligned,
 *	they will remain x-aligned for the rest of the block.
 *	Then, if they are y-aligned, they're already in the right place.
 *	Otherwise, we can move them in three bitblts; one if all the
 *	remaining characters are on one line.
 */
void tw_moveup(Textwin *t, Point *dp, Point *sp, Point *esp){
    Point uld, uls;			/* upper left of destination/source */
    int y;
    while(sp!=esp && sp->x!=dp->x){
        uld=*dp;
        uls=*sp;
        while(sp!=esp && sp->y==uls.y && dp->y==uld.y && sp->x-uls.x==dp->x-uld.x){
            sp++;
            dp++;
        }
        tw_moverect(t, uld, *dp, uls, *sp);
    }
    if(sp==esp || esp->y==dp->y) return;
    if(esp->y==sp->y){	/* one line only */
        pl_cpy(t->b, *dp, Rpt(*sp, Pt(esp->x, sp->y+t->hgt)));
        return;
    }
    y=sp->y+t->hgt;
    pl_cpy(t->b, *dp, Rpt(*sp, Pt(t->r.max.x, y)));
    pl_cpy(t->b, Pt(t->r.min.x, dp->y+t->hgt),
        Rect(t->r.min.x, y, t->r.max.x, esp->y));
    y=dp->y+esp->y-sp->y;
    pl_cpy(t->b, Pt(t->r.min.x, y),
        Rect(t->r.min.x, esp->y, esp->x, esp->y+t->hgt));
}
@

<<function tw_movedn>>=
/*
 * Same as above, but moving down and in reverse order, so as not to overwrite stuff
 * not moved yet.
 */
void tw_movedn(Textwin *t, Point *dp, Point *bsp, Point *esp){
    Point *sp, urs, urd;
    int dy;
    dp+=esp-bsp;
    sp=esp;
    dy=dp->y-sp->y;
    while(sp!=bsp && dp[-1].x==sp[-1].x){
        --dp;
        --sp;
    }
    if(dy!=0){
        if(sp->y==esp->y)
            pl_cpy(t->b, *dp, Rect(sp->x, sp->y, esp->x, esp->y+t->hgt));
        else{
            pl_cpy(t->b, Pt(t->r.min.x, sp->x+dy),
                Rect(t->r.min.x, sp->y, esp->x, esp->y+t->hgt));
            pl_cpy(t->b, Pt(t->r.min.x, dp->y+t->hgt),
                Rect(t->r.min.x, sp->y+t->hgt, t->r.max.x, esp->y));
            pl_cpy(t->b, *dp,
                Rect(sp->x, sp->y, t->r.max.x, sp->y+t->hgt));
        }
    }
    while(sp!=bsp){
        urd=*dp;
        urs=*sp;
        while(sp!=bsp && sp[-1].y==sp[0].y && dp[-1].y==dp[0].y
           && sp[-1].x-sp[0].x==dp[-1].x-dp[0].x){
            --sp;
            --dp;
        }
        tw_moverect(t, *dp, urd, *sp, urs);
    }
}
@

<<function tw_relocate>>=
/*
 * Move the given range of characters, already drawn on
 * the given textwin, to the given location.
 * Start and end must both index characters that are initially on-screen.
 */
void tw_relocate(Textwin *t, int first, int last, Point dst){
    Point *srcloc;
    int nbyte;
    if(first<t->top || last<first || t->bot<last) return;
    nbyte=(last-first+1)*sizeof(Point);
    srcloc=pl_emalloc(nbyte);
    memmove(srcloc, &t->loc[first-t->top], nbyte);
    tw_setloc(t, first, last, dst);
    if(tw_before(t, dst, srcloc[0]))
        tw_moveup(t, t->loc+first-t->top, srcloc, srcloc+(last-first));
    else
        tw_movedn(t, t->loc+first-t->top, srcloc, srcloc+(last-first));
}
@

<<function twreplace>>=
/*
 * Replace the runes with indices from r0 to r1-1 with the text
 * pointed to by text, and with length ntext.
 *	Open up a hole in t->text, t->loc.
 *	Insert new text, calculate their locs (save the extra loc that's overwritten first)
 *	(swap saved & overwritten locs)
 *	move tail.
 *	calc locs and draw new text after tail, if necessary.
 *	draw new text, if necessary
 */
void twreplace(Textwin *t, int r0, int r1, Rune *ins, int nins){
    int olen, nlen, tlen, dtop;
    olen=t->etext-t->text;
    nlen=olen+nins-(r1-r0);
    tlen=t->eslack-t->text;
    if(nlen>tlen){
        tlen=nlen+SLACK;
        t->text=pl_erealloc(t->text, tlen*sizeof(Rune));
        t->eslack=t->text+tlen;
    }
    if(olen!=nlen)
        memmove(t->text+r0+nins, t->text+r1, (olen-r1)*sizeof(Rune));
    if(nins!=0)	/* ins can be 0 if nins==0 */
        memmove(t->text+r0, ins, nins*sizeof(Rune));
    t->etext=t->text+nlen;
    if(r0>t->bot)		/* insertion is completely below visible text */
        return;
    if(r1<t->top){		/* insertion is completely above visible text */
        dtop=nlen-olen;
        t->top+=dtop;
        t->bot+=dtop;
        return;
    }
    if(1 || t->bot<=r0+nins){	/* no useful text on screen below r0 */
        if(r0<=t->top)	/* no useful text above, either */
            t->top=r0;
        t->bot=tw_setloc(t, r0, nlen, t->loc[r0-t->top]);
        tw_draw(t, r0, t->bot);
        tw_clrend(t);
        return;
    }
    /*
     * code for case where there is useful text below is missing (see `1 ||' above)
     */
}
@

<<function twscroll>>=
/*
 * This works but is stupid.
 */
void twscroll(Textwin *t, int top){
    while(top!=0 && t->text[top-1]!='\n') --top;
    t->top=top;
    t->bot=tw_setloc(t, top, t->etext-t->text, t->r.min);
    tw_draw(t, t->top, t->bot);
    tw_clrend(t);
}
@

<<function twreshape>>=
void twreshape(Textwin *t, Rectangle r){
    t->r=r;
    t->bot=tw_setloc(t, t->top, t->etext-t->text, t->r.min);
    tw_draw(t, t->top, t->bot);
    tw_clrend(t);
}
@

<<function twnew>>=
Textwin *twnew(Image *b, Font *f, Rune *text, int ntext){
    Textwin *t;
    t=pl_emalloc(sizeof(Textwin));
    t->text=pl_emalloc((ntext+SLACK)*sizeof(Rune));
    t->loc=pl_emalloc(SLACK*sizeof(Point));
    t->eloc=t->loc+SLACK;
    t->etext=t->text+ntext;
    t->eslack=t->etext+SLACK;
    if(ntext) memmove(t->text, text, ntext*sizeof(Rune));
    t->top=0;
    t->bot=0;
    t->sel0=0;
    t->sel1=0;
    t->b=b;
    t->font=f;
    t->hgt=f->height;
    t->mintab=stringwidth(f, "0");
    t->tabstop=8*t->mintab;
    return t;
}
@

<<function twfree>>=
void twfree(Textwin *t){
    free(t->loc);
    free(t->text);
    free(t);
}
@

<<function twmove>>=
/*
 * Correct the character locations in a textwin after the panel is moved.
 * This horrid hack would not be necessary if loc values were relative
 * to the panel, rather than absolute.
 */
void twmove(Textwin *t, Point d){
    Point *lp;
    t->r = rectaddpt(t->r, d);
    for(lp=t->loc; lp<t->eloc; lp++)
        *lp = addpt(*lp, d);
}
@


%-------------------------------------------------------------

<<windows/libpanel/textwin.c>>=
/*
 * Text windows
 *	void twhilite(Textwin *t, int sel0, int sel1, int on)
 *		hilite (on=1) or unhilite (on=0) a range of characters
 *	void twselect(Textwin *t, Mouse *m)
 *		set t->sel0, t->sel1 from mouse input.
 *		Also hilites selection.
 *		Caller should first unhilite previous selection.
 *	void twreplace(Textwin *t, int r0, int r1, Rune *ins, int nins)
 *		Replace the given range of characters with the given insertion.
 *		Caller should unhilite selection while this is called.
 *	void twscroll(Textwin *t, int top)
 *		Character with index top moves to the top line of the screen.
 *	int twpt2rune(Textwin *t, Point p)
 *		which character is displayed at point p?
 *	void twreshape(Textwin *t, Rectangle r)
 *		save r and redraw the text
 *	Textwin *twnew(Bitmap *b, Font *f, Rune *text, int ntext)
 *		create a new text window
 *	void twfree(Textwin *t)
 *		get rid of a surplus Textwin
 */
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <event.h>
#include <panel.h>
#include "pldefs.h"

<<constant SLACK (windows/libpanel/textwin.c)>>

<<function tw_before>>
<<function twpt2rune>>
<<function tw_rune2pt>>
<<function tw_storeloc>>
<<function tw_setloc>>
<<function tw_draw>>
<<function tw_hilitep>>
<<function twhilite>>
<<function twselect>>
<<function tw_clrend>>
<<function tw_moverect>>
<<function tw_moveup>>
<<function tw_movedn>>
<<function tw_relocate>>
<<function twreplace>>
<<function twscroll>>
<<function twreshape>>
<<function twnew>>
<<function twfree>>
<<function twmove>>
@


\subsection*{[[windows/libpanel/utf.c]]}

<<function pl_idchar>>=
/*
 * This is the same definition that 8½ uses
 */
int pl_idchar(int c){
    if(c<=' '
    || 0x7F<=c && c<=0xA0
    || utfrune("!\"#$%&'()*+,-./:;<=>?@`[\\]^{|}~", c))
        return 0;
    return 1;
}
@

<<function pl_rune1st>>=
int pl_rune1st(int c){
    return (c&0xc0)!=0x80;
}
@

<<function pl_nextrune>>=
char *pl_nextrune(char *s){
    do s++; while(!pl_rune1st(*s));
    return s;
}
@

<<function pl_runewidth>>=
int pl_runewidth(Font *f, char *s){
    char r[4], *t;
    t=r;
    do *t++=*s++; while(!pl_rune1st(*s));
    *t='\0';
    return stringwidth(f, r);
}
@


%-------------------------------------------------------------

<<windows/libpanel/utf.c>>=
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <event.h>
#include <panel.h>
#include "pldefs.h"
<<function pl_idchar>>
<<function pl_rune1st>>
<<function pl_nextrune>>
<<function pl_runewidth>>
@


\section{[[windows/libplumb/]]}

\subsection*{[[windows/libplumb/event.c]]}

<<struct EQueue>>=
struct EQueue
{
    int		id;
    char		*buf;
    int		nbuf;
    EQueue	*next;
};
@

<<global equeue>>=
static	EQueue	*equeue;
@

<<global eqlock>>=
static	Lock		eqlock;
@

<<function partial>>=
static
int
partial(int id, Event *e, uchar *b, int n)
{
    EQueue *eq, *p;
    int nmore;

    lock(&eqlock);
    for(eq = equeue; eq != nil; eq = eq->next)
        if(eq->id == id)
            break;
    unlock(&eqlock);
    if(eq == nil)
        return 0;
    /* partial message exists for this id */
    eq->buf = realloc(eq->buf, eq->nbuf+n);
    if(eq->buf == nil)
        drawerror(display, "eplumb: cannot allocate buffer");
    memmove(eq->buf+eq->nbuf, b, n);
    eq->nbuf += n;
    e->v = plumbunpackpartial((char*)eq->buf, eq->nbuf, &nmore);
    if(nmore == 0){	/* no more to read in this message */
        lock(&eqlock);
        if(eq == equeue)
            equeue = eq->next;
        else{
            for(p = equeue; p!=nil && p->next!=eq; p = p->next)
                ;
            if(p == nil)
                drawerror(display, "eplumb: bad event queue");
            p->next = eq->next;
        }
        unlock(&eqlock);
        free(eq->buf);
        free(eq);
    }
    return 1;
}
@

<<function addpartial>>=
static
void
addpartial(int id, char *b, int n)
{
    EQueue *eq;

    eq = malloc(sizeof(EQueue));
    if(eq == nil)
        return;
    eq->id = id;
    eq->nbuf = n;
    eq->buf = malloc(n);
    if(eq->buf == nil){
        free(eq);
        return;
    }
    memmove(eq->buf, b, n);
    lock(&eqlock);
    eq->next = equeue;
    equeue = eq;
    unlock(&eqlock);
}
@

<<function plumbevent>>=
static
int
plumbevent(int id, Event *e, uchar *b, int n)
{
    int nmore;

    if(partial(id, e, b, n) == 0){
        /* no partial message already waiting for this id */
        e->v = plumbunpackpartial((char*)b, n, &nmore);
        if(nmore > 0)	/* incomplete message */
            addpartial(id, (char*)b, n);
    }
    if(e->v == nil)
        return 0;
    return id;
}
@

<<function eplumb>>=
int
eplumb(int key, char *port)
{
    int fd;

    fd = plumbopen(port, OREAD|OCEXEC);
    if(fd < 0)
        return -1;
    return estartfn(key, fd, 8192, plumbevent);
}
@


%-------------------------------------------------------------

<<windows/libplumb/event.c>>=
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <event.h>
#include "plumb.h"

typedef struct EQueue EQueue;

<<struct EQueue>>

<<global equeue>>
<<global eqlock>>

<<function partial>>

<<function addpartial>>

<<function plumbevent>>

<<function eplumb>>
@


\subsection*{[[windows/libplumb/mesg.c]]}

<<function plumbopen>>=
int
plumbopen(char *name, int omode)
{
    int fd, f;
    char *s, *plumber;
    char buf[128], err[ERRMAX];

    if(name[0] == '/')
        return open(name, omode);
        
    /* find elusive plumber */
    if(access("/mnt/plumb/send", AWRITE) >= 0)
        plumber = "/mnt/plumb";
    else if(access("/mnt/term/mnt/plumb/send", AWRITE) >= 0)
        plumber = "/mnt/term/mnt/plumb";
    else{
        /* last resort: try mounting service */
        plumber = "/mnt/plumb";
        s = getenv("plumbsrv");
        if(s == nil)
            return -1;
        f = open(s, ORDWR);
        free(s);
        if(f < 0)
            return -1;
        if(mount(f, -1, "/mnt/plumb", MREPL, "") < 0){
            close(f);
            return -1;
        }
        if(access("/mnt/plumb/send", AWRITE) < 0)
            return -1;
    }

    snprint(buf, sizeof buf, "%s/%s", plumber, name);
    fd = open(buf, omode);
    if(fd >= 0)
        return fd;

    /* try creating port; used by non-standard plumb implementations */
    rerrstr(err, sizeof err);
    fd = create(buf, omode, 0600);
    if(fd >= 0)
        return fd;
    errstr(err, sizeof err);

    return -1;
}
@

<<function Strlen>>=
static int
Strlen(char *s)
{
    if(s == nil)
        return 0;
    return strlen(s);
}
@

<<function Strcpy>>=
static char*
Strcpy(char *s, char *t)
{
    if(t == nil)
        return s;
    return strcpy(s, t) + strlen(t);
}
@

<<function quote>>=
/* quote attribute value, if necessary */
static char*
quote(char *s, char *buf, char *bufe)
{
    char *t;
    int c;

    if(s == nil){
        buf[0] = '\0';
        return buf;
    }
    if(strpbrk(s, " '=\t") == nil)
        return s;
    t = buf;
    *t++ = '\'';
    while(t < bufe-2){
        c = *s++;
        if(c == '\0')
            break;
        *t++ = c;
        if(c == '\'')
            *t++ = c;
    }
    *t++ = '\'';
    *t = '\0';
    return buf;
}
@

<<function plumbpackattr>>=
char*
plumbpackattr(Plumbattr *attr)
{
    int n;
    Plumbattr *a;
    char *s, *t, *buf, *bufe;

    if(attr == nil)
        return nil;
    if((buf = malloc(4096)) == nil)
        return nil;
    bufe = buf + 4096;
    n = 0;
    for(a=attr; a!=nil; a=a->next)
        n += Strlen(a->name) + 1 + Strlen(quote(a->value, buf, bufe)) + 1;
    s = malloc(n);
    if(s == nil) {
        free(buf);
        return nil;
    }
    t = s;
    *t = '\0';
    for(a=attr; a!=nil; a=a->next){
        if(t != s)
            *t++ = ' ';
        strcpy(t, a->name);
        strcat(t, "=");
        strcat(t, quote(a->value, buf, bufe));
        t += strlen(t);
    }
    if(t > s+n)
        abort();
    free(buf);
    return s;
}
@

<<function plumblookup>>=
char*
plumblookup(Plumbattr *attr, char *name)
{
    while(attr){
        if(strcmp(attr->name, name) == 0)
            return attr->value;
        attr = attr->next;
    }
    return nil;
}
@

<<function plumbpack>>=
char*
plumbpack(Plumbmsg *m, int *np)
{
    int n, ndata;
    char *buf, *p, *attr;

    ndata = m->ndata;
    if(ndata < 0)
        ndata = Strlen(m->data);
    attr = plumbpackattr(m->attr);
    n = Strlen(m->src)+1 + Strlen(m->dst)+1 + Strlen(m->wdir)+1 +
        Strlen(m->type)+1 + Strlen(attr)+1 + 16 + ndata;
    buf = malloc(n+1);	/* +1 for '\0' */
    if(buf == nil){
        free(attr);
        return nil;
    }
    p = Strcpy(buf, m->src);
    *p++ = '\n';
    p = Strcpy(p, m->dst);
    *p++ = '\n';
    p = Strcpy(p, m->wdir);
    *p++ = '\n';
    p = Strcpy(p, m->type);
    *p++ = '\n';
    p = Strcpy(p, attr);
    *p++ = '\n';
    p += sprint(p, "%d\n", ndata);
    memmove(p, m->data, ndata);
    *np = (p-buf)+ndata;
    buf[*np] = '\0';	/* null terminate just in case */
    if(*np >= n+1)
        abort();
    free(attr);
    return buf;
}
@

<<function plumbsend>>=
int
plumbsend(int fd, Plumbmsg *m)
{
    char *buf;
    int n;

    buf = plumbpack(m, &n);
    if(buf == nil)
        return -1;
    n = write(fd, buf, n);
    free(buf);
    return n;
}
@

<<function plumbline>>=
static int
plumbline(char **linep, char *buf, int i, int n, int *bad)
{
    int starti;
    char *p;

    starti = i;
    while(i<n && buf[i]!='\n')
        i++;
    if(i == n)
        *bad = 1;
    else{
        p = malloc((i-starti) + 1);
        if(p == nil)
            *bad = 1;
        else{
            memmove(p, buf+starti, i-starti);
            p[i-starti] = '\0';
        }
        *linep = p;
        i++;
    }
    return i;
}
@

<<function plumbfree>>=
void
plumbfree(Plumbmsg *m)
{
    Plumbattr *a, *next;

    free(m->src);
    free(m->dst);
    free(m->wdir);
    free(m->type);
    for(a=m->attr; a!=nil; a=next){
        next = a->next;
        free(a->name);
        free(a->value);
        free(a);
    }
    free(m->data);
    free(m);
}
@

<<function plumbunpackattr>>=
Plumbattr*
plumbunpackattr(char *p)
{
    Plumbattr *attr, *prev, *a;
    char *q, *v, *buf, *bufe;
    int c, quoting;

    buf = malloc(4096);
    if(buf == nil)
        return nil;
    bufe = buf + 4096;
    attr = prev = nil;
    while(*p!='\0' && *p!='\n'){
        while(*p==' ' || *p=='\t')
            p++;
        if(*p == '\0')
            break;
        for(q=p; *q!='\0' && *q!='\n' && *q!=' ' && *q!='\t'; q++)
            if(*q == '=')
                break;
        if(*q != '=')
            break;	/* malformed attribute */
        a = malloc(sizeof(Plumbattr));
        if(a == nil)
            break;
        a->name = malloc(q-p+1);
        if(a->name == nil){
            free(a);
            break;
        }
        memmove(a->name, p, q-p);
        a->name[q-p] = '\0';
        /* process quotes in value */
        q++;	/* skip '=' */
        v = buf;
        quoting = 0;
        while(*q!='\0' && *q!='\n'){
            if(v >= bufe)
                break;
            c = *q++;
            if(quoting){
                if(c == '\''){
                    if(*q == '\'')
                        q++;
                    else{
                        quoting = 0;
                        continue;
                    }
                }
            }else{
                if(c==' ' || c=='\t')
                    break;
                if(c == '\''){
                    quoting = 1;
                    continue;
                }
            }
            *v++ = c;
        }
        a->value = malloc(v-buf+1);
        if(a->value == nil){
            free(a->name);
            free(a);
            break;
        }
        memmove(a->value, buf, v-buf);
        a->value[v-buf] = '\0';
        a->next = nil;
        if(prev == nil)
            attr = a;
        else
            prev->next = a;
        prev = a;
        p = q;
    }
    free(buf);
    return attr;
}
@

<<function plumbaddattr>>=
Plumbattr*
plumbaddattr(Plumbattr *attr, Plumbattr *new)
{
    Plumbattr *l;

    l = attr;
    if(l == nil)
        return new;
    while(l->next != nil)
        l = l->next;
    l->next = new;
    return attr;
}
@

<<function plumbdelattr>>=
Plumbattr*
plumbdelattr(Plumbattr *attr, char *name)
{
    Plumbattr *l, *prev;

    prev = nil;
    for(l=attr; l!=nil; l=l->next){
        if(strcmp(name, l->name) == 0)
            break;
        prev = l;
    }
    if(l == nil)
        return nil;
    if(prev)
        prev->next = l->next;
    else
        attr = l->next;
    free(l->name);
    free(l->value);
    free(l);
    return attr;
}
@

<<function plumbunpackpartial>>=
Plumbmsg*
plumbunpackpartial(char *buf, int n, int *morep)
{
    Plumbmsg *m;
    int i, bad;
    char *ntext, *attr;

    m = malloc(sizeof(Plumbmsg));
    if(m == nil)
        return nil;
    memset(m, 0, sizeof(Plumbmsg));
    if(morep != nil)
        *morep = 0;
    bad = 0;
    i = plumbline(&m->src, buf, 0, n, &bad);
    i = plumbline(&m->dst, buf, i, n, &bad);
    i = plumbline(&m->wdir, buf, i, n, &bad);
    i = plumbline(&m->type, buf, i, n, &bad);
    i = plumbline(&attr, buf, i, n, &bad);
    i = plumbline(&ntext, buf, i, n, &bad);
    if(bad){
        plumbfree(m);
        return nil;
    }
    m->attr = plumbunpackattr(attr);
    free(attr);
    m->ndata = atoi(ntext);
    if(m->ndata != n-i){
        bad = 1;
        if(morep!=nil && m->ndata>n-i)
            *morep = m->ndata - (n-i);
    }
    free(ntext);
    if(!bad){
        m->data = malloc(n-i+1);	/* +1 for '\0' */
        if(m->data == nil)
            bad = 1;
        else{
            memmove(m->data, buf+i, m->ndata);
            m->ndata = n-i;
            /* null-terminate in case it's text */
            m->data[m->ndata] = '\0';
        }
    }
    if(bad){
        plumbfree(m);
        m = nil;
    }
    return m;
}
@

<<function plumbunpack>>=
Plumbmsg*
plumbunpack(char *buf, int n)
{
    return plumbunpackpartial(buf, n, nil);
}
@

<<function plumbrecv>>=
Plumbmsg*
plumbrecv(int fd)
{
    char *buf;
    Plumbmsg *m;
    int n, more;

    buf = malloc(8192);
    if(buf == nil)
        return nil;
    n = read(fd, buf, 8192);
    m = nil;
    if(n > 0){
        m = plumbunpackpartial(buf, n, &more);
        if(m==nil && more>0){
            /* we now know how many more bytes to read for complete message */
            buf = realloc(buf, n+more);
            if(buf == nil)
                return nil;
            if(readn(fd, buf+n, more) == more)
                m = plumbunpackpartial(buf, n+more, nil);
        }
    }
    free(buf);
    return m;
}
@


%-------------------------------------------------------------

<<windows/libplumb/mesg.c>>=
#include <u.h>
#include <libc.h>
#include "plumb.h"

<<function plumbopen>>

<<function Strlen>>

<<function Strcpy>>

<<function quote>>

<<function plumbpackattr>>

<<function plumblookup>>

<<function plumbpack>>

<<function plumbsend>>

<<function plumbline>>

<<function plumbfree>>

<<function plumbunpackattr>>

<<function plumbaddattr>>

<<function plumbdelattr>>

<<function plumbunpackpartial>>

<<function plumbunpack>>

<<function plumbrecv>>
@


\subsection*{[[windows/libplumb/plumbsendtext.c]]}

<<function plumbsendtext>>=
int
plumbsendtext(int fd, char *src, char *dst, char *wdir, char *data)
{
    Plumbmsg m;

    m.src = src;
    m.dst = dst;
    m.wdir = wdir;
    m.type = "text";
    m.attr = nil;
    m.ndata = strlen(data);
    m.data = data;
    return plumbsend(fd, &m);
}
@


%-------------------------------------------------------------

<<windows/libplumb/plumbsendtext.c>>=
#include <u.h>
#include <libc.h>
#include "plumb.h"

<<function plumbsendtext>>
@


