\documentclass[12pt]{report}
%12pt, twocolumn, landscape

%******************************************************************************
% Prelude
%******************************************************************************
\newif\iffinal
\newif\ifverbose
\finaltrue\verbosetrue % see also other newif in Macros.tex

%------------------------------------------------------------------------------
%history: 
%------------------------------------------------------------------------------

%thx to LP, I changed for the better a few things:

%thx to this manual, I better understand toolkits:

%history LP-ization:
% - skeleton, mostly copy paste of Template.nw skeleton
% - put all content of files in the Extra section, via 'pfff -lpize'
% - split in chunks (some done automatically)
%    * function, global, struct, enum, constant, macro(actually function)
%    * [[xxx]] other fields, [[xxx]] extra fields
% - read Extra section, identify concepts, first TOC
% - SEMI distribute parts of the file before
% - SEMI typeify, scheckify
% - TODO aspectify advanced features!
% - TODO add explanations
% - TODO add figures

%------------------------------------------------------------------------------
% Packages
%------------------------------------------------------------------------------

\usepackage{xspace}
\usepackage{verbatim}
%note: required by 'syncweb -to_tex' for the \t \l \n in this file
\usepackage{fancyvrb}
\usepackage{url}
\usepackage{hyperref}
 \hypersetup{colorlinks=true}
\usepackage[pageref]{backref}
 \def\backref{{\footnotesize cited page(s)}~}
\usepackage{booktabs} 
 \newcommand{\otoprule}{\midrule[\heavyrulewidth]}
\usepackage{graphicx}

\input{../docs/latex/Config}
\usepackage{../docs/latex/noweb}
 \noweboptions{footnotesizecode,nomargintag}
 %note: allow chunk on different pages, less white space at bottom of pages
 \def\nwendcode{\endtrivlist \endgroup}
 \let\nwdocspar=\par
\usepackage{../docs/latex/syncweb}

%------------------------------------------------------------------------------
% Macros
%------------------------------------------------------------------------------
\input{../docs/latex/Macros}

%------------------------------------------------------------------------------
% Config
%------------------------------------------------------------------------------
\allcodefalse
% ifallcode is used for:


\begin{document}
%******************************************************************************
% Title
%******************************************************************************

\title{
{\Huge 
Principia Softwarica: The GUI toolkit [[libpanel]]
}\\
{version 0.1}
}

\author{
Yoann Padioleau\\
\texttt{yoann.padioleau@gmail.com}\\
\\
with code from\\
Tom Duff
}

\maketitle 

%\onecolumn
\hrule
\input{../docs/latex/Copyright}
\input{../docs/latex/CopyrightPlan9}
\hrule
%\twocolumn

\begingroup
\hypersetup{linkcolor=blue}
% need to s/onecolumn/twocolumn in report.cls :) for \tableofcontents
\tableofcontents
\endgroup

%******************************************************************************
% Body
%******************************************************************************

\chapter{Introduction}

The goal of this book is to explain with full details the source code of
a {widget} library.

\section{Motivations}

Here are a few questions I hope this book will answer:
\begin{itemize}

\item How does a mouse event get dispatched to the appropriate widget?

\item How does scrolling work? How widgets communicate with each other?

\end{itemize}

\section{The \plan widget library: [[libpanel]]}

% 4000LOC?
% used by mothra web browser (libpanel made for that purpose?)
% and by usb userspace serial program (not sure why).

% seen already in rio menuhit, frame, but limited.

\section{Other graphical user interface toolkits}

Here are a few GUI toolkits that I considered for this book, but
which I ultimately discarded:
\begin{itemize}

\item Xlib
% or X athena widget?
% helloworld in xlib is terrible, \cite{}

\item Tcl/Tk
% really Tk
% first to set basic elements of GUI?

\item GTK
% panel uses less code than lablgtk which is just a binding ...

\item Qt
% huge now
% qt1 of kde1?

\end{itemize}

%history:
% - Xerox Alto, smalltalk
%industry:
% - MFC, WPF (Windows Presentation Foundation) and XAML
% - java Awt, Java Swing
% - Apple?
%mini:
% - minimal GUI with one header file in C:
%   https://github.com/vurtun/nuklear
%other:
% - tk reimplementation for inferno (and limbo)
%   28000 LOC
%exotic:
% - KScript/KWorld from STEPS is less than 10 000 LOC in total.
%RAD widgets "designers":
% - Glade for GTK
% - Qt designer
% - Apple Xcode?
% - WPF XAML

%bench for GUIs, programming-wise
%https://github.com/eugenkiss/7guis/wiki

%related:
%http://runtimelegend.com/rep/lforms/index

\section{Getting started}
\label{sec:getting-started}

\section{Requirements}

\section{About this document}
#include "../docs/latex/About.nw"

\section{Copyright}
\input{../docs/latex/CopyrightPlan9Text}

\section{Acknowledgments}

I would like to acknowledge of course the author of
[[libpanel]], Tom Duff, 
who wrote in some sense most of this book.


\chapter{Overview}

\section{GUI toolkit principles}

\subsection{The widget}
% window object

\subsection{The event loop}
% reactive programming

\subsection{Packing and layout}

\subsection{Scrolling}

\section{[[hellopanel.c]]}

<<lib_gui/libpanel/tests/hellopanel.c>>=
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <event.h>
#include <panel.h>

// source code from panel.pdf introduction

Panel *root;

<<function [[done]]>>

<<function [[eresized]]>>

void main(void){
    int i;
    Event e;
    errorneg1 err;
    
    err = initdraw(nil, nil, "hellopanel");
    <<[[main()]] sanity check [[err]]>>
    einit(Emouse);
    plinit(view->depth);
    
    root=plframe(nil, 0);
    pllabel(root, 0, "Hello, world!");
    plbutton(root, 0, "done", done);
    
    eresized(false);
    
    for(;;) {
        i=event(&e);
        plmouse(root, &e.mouse);
    }
}
@

<<function [[done]]>>=
void done(Panel *p, int buttons){
    USED(p, buttons);
    exits(nil);
}
@



<<[[main()]] sanity check [[err]]>>=
if(err < 0)
    sysfatal("initdraw: %r");
@

<<function [[eresized]]>>=
void eresized(bool new){
    if(new && getwindow(display, Refnone) == ERROR_NEG1) {
        fprint(STDERR, "getwindow: %r\n");
        exits("getwindow");
    }
    plpack(root, view->r);
    pldraw(root, view);
    flushimage(display, true);
}
@

%plpack!
%pldraw!


\section{Code organization}

% panel.h = public API
% pldefs.h = internal API, helper functions

\section{Software architecture}

% plxxx
% plinitxxx
% pl_drawxxx
% pl_hitxxx

<<[[libpanel]] includes>>=
#include <u.h>
#include <libc.h>
#include <draw.h>
#include <event.h>
#include <panel.h>
#include "pldefs.h"
@

%\section{Libpanel}
%% different alloc, different event loop, 
%% and the Panel main data structure
%
%\section{Frame}
%% have libframe/ but also a frame widget in libpanel
%
%\section{Scrolling}
%% have also a menu in libpanel, scrollbar
%
%\section{Menu}
%% have also a menu in libpanel, popup, pulldown


\section{Book structure}

%###############################################################################

\chapter{Core Data Structures}
\label{chap:core-ds}

\section{[[Panel]]}
\l widget really

<<struct [[Panel]]>>=
struct Panel{
    // public

    Rectangle r;					/* where the Panel goes */

    <<[[Panel]] padding fields>>
    <<[[Panel]] user fields>>
    <<[[Panel]] extra public fields>>

    /* private below */

    Image *b;					/* where we're drawn */
    <<[[Panel]] widget specific data>>
    <<[[Panel]] debugging fields>>
    <<[[Panel]] other fields>>

    // methods
    <<[[Panel]] main methods>>
    <<[[Panel]] packing methods>>
    <<[[Panel]] other methods>>

    // Extra
    <<[[Panel]] extra fields>>
};
@

%Panel.r is set by plpack() and Panel.b is set by pldraw()

%ctor
<<function [[pl_newpanel]]>>=
Panel *pl_newpanel(Panel *parent, int ndata){
    Panel *v;

    <<[[pl_newpanel()]] sanity check if can create child on [[parent]]>>
    v=pl_emalloc(sizeof(Panel));

    <<[[pl_newpanel()]] set tree fields>>
    <<[[pl_newpanel()]] set widget-specific data fields>>
    <<[[pl_newpanel()]] set other fields>>
    <<[[pl_newpanel()]] set default methods>>

    return v;
}
@
%pad: I reordered the assignments

%See appendix for pl_emalloc

<<[[Panel]] other fields>>=
// LEAF | INVIS | ...
int flags;					/* position flags, see below */
@

<<[[pl_newpanel()]] set other fields>>=
v->flags=0;
@


%dtor
<<function [[plfree]]>>=
void plfree(Panel *p){
    Panel *cp, *ncp;

    if(p==nil)
        return;
    <<[[plfree()]] if [[plkbfocus]]>>
    <<[[plfree()]] free the children>>
    <<[[plfree()]] free the widget-specific data>>
    free(p);
}
@

\subsection{A tree of widgets}

<<[[Panel]] extra fields>>=
// option<ref<Panel>>
Panel *parent; 			/* No, it's a tree! */
@
<<[[Panel]] extra fields>>=
// option<list<ref_own<Panel>>> (next = Panel.next, tail = Panel.echild)
Panel *child;
@

<<[[Panel]] extra fields>>=
// list<ref<Panel>> (head = Panel.child)
Panel *next;					/* It's a list! */
@

<<[[Panel]] extra fields>>=
// option<ref<Panel>>
Panel *echild;
@
% to quickly add to the end




<<[[pl_newpanel()]] set tree fields>>=
v->next=nil;
v->child=nil;
v->echild=nil;

v->parent=parent;
//add_list(v, parent->child)
if(parent){
    if(parent->child==nil)
        parent->child=v;
    else
        parent->echild->next=v;
    parent->echild=v;
}
@

<<[[plfree()]] free the children>>=
for(cp=p->child;cp;cp=ncp){
    ncp=cp->next;
    plfree(cp);
}
@




<<constant [[LEAF]]>>=
#define	LEAF	0x10000		/* newpanel will refuse to attach children */
@

<<[[pl_newpanel()]] sanity check if can create child on [[parent]]>>=
if(parent && parent->flags&LEAF){
    fprint(STDERR, "newpanel: can't create child of %s %lux\n", 
             parent->kind, (ulong)parent);
    exits("bad newpanel");
}
@


\subsection{Widget-specific data}

<<[[Panel]] widget specific data>>=
// union<ref_own<Label|Entry|Button|...>
void *data;					/* kind-specific data */
@

<<[[Panel]] other methods>>=
void (*free)(Panel *);				/* free fields of data when done */
@


<<[[pl_newpanel()]] set widget-specific data fields>>=
if(ndata)
    v->data=pl_emalloc(ndata);
else
    v->data=nil;
v->free=nil;
@

<<[[plfree()]] free the widget-specific data>>=
if(p->free) p->free(p);
if(p->data) free(p->data);
@


\subsection{Main widget methods}

<<[[Panel]] main methods>>=
void (*draw)(Panel *);				/* draw panel and children */

int (*hit)(Panel *, Mouse *);			/* process mouse event */
void (*type)(Panel *, Rune);			/* process keyboard event */
@


<<[[pl_newpanel()]] set default methods>>=
v->draw=pl_drawerror;
v->hit=pl_hiterror;
v->type=pl_typeerror;
@
% see error management appendix. raise error. widget specific constructor
% should set those fields correctly!


\subsection{Keyboard focus}

<<global [[plkbfocus]]>>=
Panel *plkbfocus;			/* the panel in keyboard focus */
@

% hitxxx -> <>
<<function [[plgrabkb]]>>=
void plgrabkb(Panel *g){
    plkbfocus=g;
}
@



\subsection{XXX}



<<[[pl_newpanel()]] set other fields>>=
v->r=Rect(0,0,0,0);
v->b=nil;
v->ipad=Pt(0,0);
v->pad=Pt(0,0);
v->size=Pt(0,0);
v->sizereq=Pt(0,0);
v->lastmouse=nil;
v->scrollee=0;
v->xscroller=0;
v->yscroller=0;
v->scr.pos=Pt(0,0);
v->scr.size=Pt(0,0);
@

%XXX
<<[[Panel]] other fields>>=
int state;					/* for hitting & drawing purposes */
@
<<[[Panel]] other fields>>=
Point size;					/* space for this Panel */
Point sizereq;					/* size requested by this Panel */
Point childreq;					/* total size needed by children */
@
<<[[Panel]] other fields>>=
Panel *scrollee;				/* pointer to scrolled window */
Panel *xscroller, *yscroller;			/* pointers to scroll bars */
Scroll scr;					/* scroll data */
@


<<[[Panel]] other methods>>=
void (*scroll)(Panel *, int, int, int, int);	/* scroll bar to scrollee */
void (*setscrollbar)(Panel *, int, int, int);	/* scrollee to scroll bar */
@


<<[[pl_newpanel()]] set default methods>>=
v->scroll=pl_scrollerror;
v->setscrollbar=pl_setscrollbarerror;
@

\section{[[Icon]]}

<<type [[Icon]]>>=
typedef void Icon;			/* Always used as Icon * -- Image or char */
@

% see pl_drawicon()

\section{Placement}

<<constant [[PLACE]]>>=
#define	PLACE	0x01e0		/* which side of its space should the Panel adhere to? */
@
% bitmask?

<<constant [[PLACECEN]]>>=
#define		PLACECEN 0x0000
@
%Center

<<constant [[PLACES]]>>=
#define		PLACES	0x0020
@
<<constant [[PLACEE]]>>=
#define		PLACEE	0x0040
@
<<constant [[PLACEW]]>>=
#define		PLACEW	0x0060
@
<<constant [[PLACEN]]>>=
#define		PLACEN	0x0080
@
<<constant [[PLACENE]]>>=
#define		PLACENE	0x00a0
@
<<constant [[PLACENW]]>>=
#define		PLACENW	0x00c0
@
<<constant [[PLACESE]]>>=
#define		PLACESE	0x00e0
@
<<constant [[PLACESW]]>>=
#define		PLACESW	0x0100
@

\section{Packing}

% difference with place?

<<constant [[PACK]]>>=
#define	PACK	0x0007		/* which side of the parent is the Panel attached to? */
@
% bitmask

<<constant [[PACKN]]>>=
#define		PACKN	0x0000
@

<<constant [[PACKE]]>>=
#define		PACKE	0x0001
@

<<constant [[PACKS]]>>=
#define		PACKS	0x0002
@

<<constant [[PACKW]]>>=
#define		PACKW	0x0003
@


<<constant [[PACKCEN]]>>=
#define		PACKCEN	0x0004	/* only used by pulldown */
@


<<constant [[FILLX]]>>=
#define	FILLX	0x0008		/* grow horizontally to fill the available space */
@

<<constant [[FILLY]]>>=
#define	FILLY	0x0010		/* grow vertically to fill the available space */
@


<<constant [[EXPAND]]>>=
#define	EXPAND	0x0200		/* use up all extra space in the parent */
@


% user settable
<<[[Panel]] padding fields>>=
Point ipad;				/* extra space inside and outside */
Point pad;
@
% see panel.pdf

\chapter{Initializations}
\label{chap:main}

\section{[[plinit()]]}

%init.c
<<function [[plinit]]>>=
/*
 * Just a wrapper for all the initialization routines
 */
error0 plinit(int ldepth){
    return pl_drawinit(ldepth);
}
@
%old: I simplified and just call pl_drawinit


<<global [[plldepth]]>>=
static int plldepth;
@

<<globals [[pl_xxx]]>>=
static Image *pl_white, *pl_light, *pl_dark, *pl_black, *pl_hilit;
@

%draw.c
<<function [[pl_drawinit]]>>=
error0 pl_drawinit(int ldepth){

    plldepth=ldepth;

    pl_black=allocimage(display, Rect(0,0,1,1), view->chan, 1, 0x000000FF);
    pl_white=allocimage(display, Rect(0,0,1,1), view->chan, 1, 0xFFFFFFFF);
    pl_dark =allocimage(display, Rect(0,0,1,1), view->chan, 1, DPurpleblue);
    pl_light=allocimagemix(display, DPalebluegreen, DWhite);
    pl_hilit=allocimage(display, Rect(0,0,1,1), CHAN1(CAlpha,8), 1, 0x80);

    if(pl_white==nil || pl_light==nil || pl_black==nil || pl_dark==nil) 
        return ERROR_0;
    return OK_1;
}
@


\chapter{Drawing}

\section{[[pldraw()]]}

% main -> eresized | ... -> <>
<<function [[pldraw]]>>=
void pldraw(Panel *p, Image *b){
    pl_draw1(p, b);
    flushimage(display, true);
}
@
% get passed [[view]] in [[b]]

<<function [[pl_draw1]]>>=
void pl_draw1(Panel *p, Image *b){
    if(b!=nil)
        pl_drawall(p, b);
}
@

<<function [[pl_drawall]]>>=
void pl_drawall(Panel *p, Image *b){
    <<[[pl_drawall()]] if invisible widget>>
    p->b=b;
    // widget-specific method
    p->draw(p);
    for(p=p->child;p;p=p->next) 
        // recurse
        pl_draw1(p, b);
}
@


\section{Drawing helpers}

<<function [[pl_relief]]>>=
void pl_relief(Image *b, Image *ul, Image *lr, Rectangle r, int wid){
    int x, y;

    draw(b, Rect(r.min.x, r.max.y-wid, r.max.x, r.max.y), lr, 0, ZP); /* bottom */
    draw(b, Rect(r.max.x-wid, r.min.y, r.max.x, r.max.y), lr, 0, ZP); /* right */
    draw(b, Rect(r.min.x, r.min.y, r.min.x+wid, r.max.y), ul, 0, ZP); /* left */
    draw(b, Rect(r.min.x, r.min.y, r.max.x, r.min.y+wid), ul, 0, ZP); /* top */
    for(x=0;x!=wid;x++) for(y=wid-1-x;y!=wid;y++){
        draw(b, rectaddpt(Rect(0,0,1,1), Pt(x+r.max.x-wid, y+r.min.y)), lr, 0, ZP);
        draw(b, rectaddpt(Rect(0,0,1,1), Pt(x+r.min.x, y+r.max.y-wid)), lr, 0, ZP);
    }
}
@


<<constant [[BITMAP]]>>=
#define	BITMAP	0x4000		/* text argument is a bitmap, not a string */
@


<<function [[pl_outline]]>>=
Rectangle pl_outline(Image *b, Rectangle r, int style){
    return pl_boxoutline(b, r, style, 0);
}
@

<<function [[pl_box]]>>=
Rectangle pl_box(Image *b, Rectangle r, int style){
    return pl_boxoutline(b, r, style, 1);
}
@

<<function [[pl_boxoutline]]>>=
Rectangle pl_boxoutline(Image *b, Rectangle r, int style, int fill){
    if(plldepth==0) switch(style){
    case UP:
        pl_relief(b, pl_black, pl_black, r, BWID);
        r=insetrect(r, BWID);
        if(fill) draw(b, r, pl_white, 0, ZP);
        else border(b, r, SPACE, pl_white, ZP);
        break;
    case DOWN:
    case DOWN1:
    case DOWN2:
    case DOWN3:
        pl_relief(b, pl_black, pl_black, r, BWID);
        r=insetrect(r, BWID);
        if(fill) draw(b, r, pl_black, 0, ZP);
        border(b, r, SPACE, pl_black, ZP);
        break;
    case PASSIVE:
        if(fill) draw(b, r, pl_white, 0, ZP);
        r=insetrect(r, PWID);
        if(!fill) border(b, r, SPACE, pl_white, ZP);
        break;
    case FRAME:
        pl_relief(b, pl_white, pl_black, r, FWID);
        r=insetrect(r, FWID);
        pl_relief(b, pl_black, pl_white, r, FWID);
        r=insetrect(r, FWID);
        if(fill) draw(b, r, pl_white, 0, ZP);
        else border(b, r, SPACE, pl_white, ZP);
        break;
    }
    else switch(style){
    case UP:
        pl_relief(b, pl_white, pl_black, r, BWID);
        r=insetrect(r, BWID);
        if(fill) draw(b, r, pl_light, 0, ZP);
        else border(b, r, SPACE, pl_white, ZP);
        break;
    case DOWN:
    case DOWN1:
    case DOWN2:
    case DOWN3:
        pl_relief(b, pl_black, pl_white, r, BWID);
        r=insetrect(r, BWID);
        if(fill) draw(b, r, pl_dark, 0, ZP);
        else border(b, r, SPACE, pl_black, ZP);
        break;
    case PASSIVE:
        if(fill) draw(b, r, pl_light, 0, ZP);
        r=insetrect(r, PWID);
        if(!fill) border(b, r, SPACE, pl_white, ZP);
        break;
    case FRAME:
        pl_relief(b, pl_white, pl_black, r, FWID);
        r=insetrect(r, FWID);
        pl_relief(b, pl_black, pl_white, r, FWID);
        r=insetrect(r, FWID);
        if(fill) draw(b, r, pl_light, 0, ZP);
        else border(b, r, SPACE, pl_white, ZP);
        break;
    }
    return insetrect(r, SPACE);
}
@



\chapter{Events}

\section{Mouse events}

% called in event loop, from root widget

% event user loop -> <>
<<function [[plmouse]]>>=
void plmouse(Panel *g, Mouse *m){
    Panel *hit, *last;

    if(g->flags&REMOUSE)
        hit=g->lastmouse;
    else{

        hit=pl_ptinpanel(m->xy, g);

        last=g->lastmouse;
        if(last && last!=hit){
            m->buttons|=OUT;
            last->hit(last, m);
            m->buttons&=~OUT;
        }
    }
    if(hit){
        if(hit->hit(hit, m))
            g->flags|=REMOUSE;
        else
            g->flags&=~REMOUSE;
        g->lastmouse=hit;
    }
    flushimage(display, true);
}
@

<<function [[pl_ptinpanel]]>>=
/*
 * Return the most leafward, highest priority panel containing p
 */
Panel *pl_ptinpanel(Point p, Panel *g){
    Panel *v;
    for(;g;g=g->next) 
      if(ptinrect(p, g->r)){
        //recurse
        v=pl_ptinpanel(p, g->child);
        if(v && v->pri(v, p) >= g->pri(g, p)) 
            return v;
        return g;
      }
    return 0;
}
@


\subsection{Mouse leaving the widget}

<<constant [[REMOUSE]]>>=
#define	REMOUSE	0x40000		/* send next mouse event here, even if not inside */
@

<<[[Panel]] other fields>>=
Panel *lastmouse;				/* who got the last mouse event? */
@

<<constant [[OUT]]>>=
/*
 * An extra bit in Mouse.buttons
 */
#define	OUT	8			/* Mouse.buttons bit, set when mouse leaves Panel */
@

\subsection{Hitting priority}

<<[[Panel]] other methods>>=
int (*pri)(Panel *, Point);			/* priority for hitting */
@

<<[[pl_newpanel()]] set other fields>>=
v->pri=pl_prinormal;
@

<<function [[pl_prinormal]]>>=
int pl_prinormal(Panel *, Point){
    return PRI_NORMAL;
}
@

<<function [[pl_pripopup]]>>=
int pl_pripopup(Panel *, Point){
    return PRI_POPUP;
}
@
<<function [[pl_priscrollbar]]>>=
int pl_priscrollbar(Panel *, Point){
    return PRI_SCROLLBAR;
}
@


<<constant [[PRI_NORMAL]]>>=
#define	PRI_NORMAL	0		/* ordinary panels */
@
<<constant [[PRI_POPUP]]>>=
#define	PRI_POPUP	1		/* popup menus */
@
<<constant [[PRI_SCROLLBAR]]>>=
#define	PRI_SCROLLBAR	2		/* scroll bars */
@

\section{Keyboard events}

<<function [[plkeyboard]]>>=
void plkeyboard(Rune c){
    if(plkbfocus){
        // widget-specific callback
        plkbfocus->type(plkbfocus, c);
        flushimage(display, true);
    }
}
@

<<[[plfree()]] if [[plkbfocus]]>>=
if(p==plkbfocus)
    plkbfocus=nil;
@

\chapter{Packing}

% eresized -> <>

<<function [[plpack]]>>=
void plpack(Panel *p, Rectangle where){
    pl_sizereq(p);
    pl_setrect(p, where.min, subpt(where.max, where.min));
}
@

\section{[[pl_sizereq()]]}

<<function [[pl_sizereq]]>>=
/*
 * Compute the requested size of p and its descendants.
 */
void pl_sizereq(Panel *p){
    Panel *cp;
    Point maxsize;

    maxsize=Pt(0,0);
    for(cp=p->child;cp;cp=cp->next){
        // recurse
        pl_sizereq(cp);
        if(cp->sizereq.x>maxsize.x) maxsize.x=cp->sizereq.x;
        if(cp->sizereq.y>maxsize.y) maxsize.y=cp->sizereq.y;
    }
    <<[[pl_sizereq()]] if [[MAXX]] or [[MAXY]]>>
    p->childreq=pl_sizesibs(p->child);
    p->sizereq=addpt(addpt(p->getsize(p, p->childreq), p->ipad), p->pad);
    <<[[pl_sizereq()]] if [[FIXEDX]] or [[FIXEDY]]>>
}
@

<<[[Panel]] packing methods>>=
Point (*getsize)(Panel *, Point);		/* return size, given child size */
@
<<[[pl_newpanel()]] set default methods>>=
v->getsize=pl_getsizeerror;
@


<<function [[pl_sizesibs]]>>=
Point pl_sizesibs(Panel *p){
    Point s;

    if(p==0) return Pt(0,0);

    // recurse
    s=pl_sizesibs(p->next);

    switch(p->flags&PACK){
    case PACKN:
    case PACKS:
        s.x=pl_max(s.x, p->sizereq.x);
        s.y+=p->sizereq.y;
        break;
    case PACKE:
    case PACKW:
        s.x+=p->sizereq.x;
        s.y=pl_max(s.y, p->sizereq.y);
        break;
    }
    return s;
}
@

<<function [[pl_max]]>>=
int pl_max(int a, int b){
    return a>b?a:b;
}
@


\section{[[pl_setrect()]]}

<<function [[pl_setrect]]>>=
/*
 * Set the sizes and rectangles of p and its descendants, given their requested sizes.
 */
void pl_setrect(Panel *p, Point ul, Point avail){
    Point space, newul, newspace, slack, share;
    int l;
    Panel *c;

    p->size=subpt(p->sizereq, p->pad);
    ul=addpt(ul, divpt(p->pad, 2));
    avail=subpt(avail, p->pad);
    if(p->size.x>avail.x)
        p->size.x = avail.x;
    if(p->size.y>avail.y)
        p->size.y = avail.y;
    if(p->flags&(FILLX|EXPAND)) p->size.x=avail.x;
    if(p->flags&(FILLY|EXPAND)) p->size.y=avail.y;

    switch(p->flags&PLACE){
    case PLACECEN:	ul.x+=(avail.x-p->size.x)/2; ul.y+=(avail.y-p->size.y)/2; break;
    case PLACES:	ul.x+=(avail.x-p->size.x)/2; ul.y+= avail.y-p->size.y   ; break;
    case PLACEE:	ul.x+= avail.x-p->size.x   ; ul.y+=(avail.y-p->size.y)/2; break;
    case PLACEW:	                             ul.y+=(avail.y-p->size.y)/2; break;
    case PLACEN:	ul.x+=(avail.x-p->size.x)/2;                              break;
    case PLACENE:	ul.x+= avail.x-p->size.x   ;                              break;
    case PLACENW:                                                             break;
    case PLACESE:	ul.x+= avail.x-p->size.x   ; ul.y+= avail.y-p->size.y   ; break;
    case PLACESW:                                ul.y+= avail.y-p->size.y   ; break;
    }
    p->r=Rpt(ul, addpt(ul, p->size));
    space=p->size;
    p->childspace(p, &ul, &space);
    slack=subpt(space, p->childreq);
    share=pl_getshare(p->child);
    for(c=p->child;c;c=c->next){
        if(c->flags&EXPAND){
            switch(c->flags&PACK){
            case PACKN:
            case PACKS:
                c->sizereq.x+=slack.x;
                l=slack.y/share.y;
                c->sizereq.y+=l;
                slack.y-=l;
                --share.y;
                break;
            case PACKE:
            case PACKW:
                l=slack.x/share.x;
                c->sizereq.x+=l;
                slack.x-=l;
                --share.x;
                c->sizereq.y+=slack.y;
                break;
            }
        }
        switch(c->flags&PACK){
        case PACKN:
            newul=Pt(ul.x, ul.y+c->sizereq.y);
            newspace=Pt(space.x, space.y-c->sizereq.y);
            pl_setrect(c, ul, Pt(space.x, c->sizereq.y));
            break;
        case PACKW:
            newul=Pt(ul.x+c->sizereq.x, ul.y);
            newspace=Pt(space.x-c->sizereq.x, space.y);
            pl_setrect(c, ul, Pt(c->sizereq.x, space.y));
            break;
        case PACKS:
            newul=ul;
            newspace=Pt(space.x, space.y-c->sizereq.y);
            pl_setrect(c, Pt(ul.x, ul.y+space.y-c->sizereq.y),
                Pt(space.x, c->sizereq.y));
            break;
        case PACKE:
            newul=ul;
            newspace=Pt(space.x-c->sizereq.x, space.y);
            pl_setrect(c, Pt(ul.x+space.x-c->sizereq.x, ul.y),
                Pt(c->sizereq.x, space.y));
            break;
        }
        ul=newul;
        space=newspace;
    }
}
@

<<[[Panel]] packing methods>>=
void (*childspace)(Panel *, Point *, Point *);	/* child ul & size given our size */
@
<<[[pl_newpanel()]] set default methods>>=
v->childspace=pl_childspaceerror;
@



<<function [[pl_getshare]]>>=
Point pl_getshare(Panel *p){
    Point share;
    if(p==0) return Pt(0,0);
    share=pl_getshare(p->next);
    if(p->flags&EXPAND) switch(p->flags&PACK){
    case PACKN:
    case PACKS:
        if(share.x==0) share.x=1;
        share.y++;
        break;
    case PACKE:
    case PACKW:
        share.x++;
        if(share.y==0) share.y=1;
        break;
    }
    return share;
}
@

\chapter{Basic Widgets}
% no children

\section{Label}

<<struct [[Label]]>>=
struct Label{
    // enum<Placement>
    int placement;
    // ref_own<Icon>
    Icon *icon;
};
@

\subsection{Initializing}

<<function [[pllabel]]>>=
Panel *pllabel(Panel *parent, int flags, Icon *icon){
    Panel *p;

    p=pl_newpanel(parent, sizeof(Label));
    plinitlabel(p, flags, icon);
    plplacelabel(p, PLACECEN);
    return p;
}
@
% place center

<<function [[plinitlabel]]>>=
void plinitlabel(Panel *v, int flags, Icon *icon){
    v->flags=flags|LEAF;
    ((Label *)(v->data))->icon=icon;

    v->draw=pl_drawlabel;
    v->hit=pl_hitlabel;
    v->type=pl_typelabel;

    v->getsize=pl_getsizelabel;
    v->childspace=pl_childspacelabel;

    v->kind="label";
}
@

<<function [[plplacelabel]]>>=
void plplacelabel(Panel *p, int placement){
    ((Label *)(p->data))->placement=placement;
}
@

\subsection{Drawing}

<<function [[pl_drawlabel]]>>=
void pl_drawlabel(Panel *p){
    Label *l = p->data;

    pl_drawicon(p->b, pl_box(p->b, p->r, PASSIVE), l->placement, p->flags, l->icon);
}
@

<<function [[pl_drawicon]]>>=
void pl_drawicon(Image *b, Rectangle r, int stick, int flags, Icon *s){
    Rectangle save;
    Point ul, offs;

    ul=r.min;
    offs=subpt(subpt(r.max, r.min), pl_iconsize(flags, s));

    switch(stick){
    case PLACENW:	                                break;
    case PLACEN:	ul.x+=offs.x/2;                 break;
    case PLACENE:	ul.x+=offs.x;                   break;
    case PLACEW:	                ul.y+=offs.y/2; break;
    case PLACECEN:	ul.x+=offs.x/2; ul.y+=offs.y/2; break;
    case PLACEE:	ul.x+=offs.x;                   break;
    case PLACESW:	                ul.y+=offs.y;   break;
    case PLACES:	ul.x+=offs.x/2; ul.y+=offs.y;   break;
    case PLACESE:	ul.x+=offs.x;   ul.y+=offs.y;   break;
    }

    save=b->clipr;
    if(!rectclip(&r, save))
        return;
    replclipr(b, b->repl, r);
    if(flags&BITMAP) 
        draw(b, Rpt(ul, addpt(ul, pl_iconsize(flags, s))), s, 0, ZP);
    else 
        string(b, ul, pl_black, ZP, font, s);
    replclipr(b, b->repl, save);
}
@


\subsection{Reacting}

% no reaction for labels

<<function [[pl_hitlabel]]>>=
int pl_hitlabel(Panel *p, Mouse *m){
    USED(p, m);
    return 0;
}
@

<<function [[pl_typelabel]]>>=
void pl_typelabel(Panel *p, Rune c){
    USED(p, c);
}
@

\subsection{Packing methods}

<<function [[pl_getsizelabel]]>>=
Point pl_getsizelabel(Panel *p, Point children){
    USED(children);		/* shouldn't have any children */
    return pl_boxsize(pl_iconsize(p->flags, ((Label *)p->data)->icon), PASSIVE);
}
@

<<function [[pl_childspacelabel]]>>=
void pl_childspacelabel(Panel *g, Point *ul, Point *size){
    USED(g, ul, size);
}
@




\section{Text entry}

<<struct [[Entry]]>>=
struct Entry{
    char *entry;
    char *entp;
    char *eent;
    void (*hit)(Panel *, char *);
    Point minsize;
};
@

\subsection{Initializing}

<<function [[plentry]]>>=
Panel *plentry(Panel *parent, int flags, int wid, char *str, void (*hit)(Panel *, char *)){
    Panel *v;

    v=pl_newpanel(parent, sizeof(Entry));
    plinitentry(v, flags, wid, str, hit);
    return v;
}
@


<<function [[plinitentry]]>>=
void plinitentry(Panel *v, int flags, int wid, char *str, void (*hit)(Panel *, char *)){
    int elen;
    Entry *ep;

    ep=v->data;
    v->flags=flags|LEAF;
    v->state=UP;

    v->draw=pl_drawentry;
    v->hit=pl_hitentry;
    v->type=pl_typeentry;
    v->getsize=pl_getsizeentry;
    v->childspace=pl_childspaceentry;

    ep->minsize=Pt(wid, font->height);
    v->free=pl_freeentry;

    v->snarf=pl_snarfentry;
    v->paste=pl_pasteentry;

    elen=100;
    if(str) elen+=strlen(str);
    ep->entry=pl_erealloc(ep->entry, elen+SLACK);
    ep->eent=ep->entry+elen;
    strecpy(ep->entry, ep->eent, str ? str : "");
    ep->entp=ep->entry+strlen(ep->entry);
    ep->hit=hit;
    v->kind="entry";
}
@



\subsection{Drawing}

<<function [[pl_drawentry]]>>=
void pl_drawentry(Panel *p){
    Rectangle r;
    Entry *ep;
    char *s;

    ep=p->data;
    r=pl_box(p->b, p->r, p->state);
    s=ep->entry;
    if(p->flags & USERFL){
        char *p;
        s=strdup(s);
        for(p=s; *p; p++)
            *p='*';
    }
    if(stringwidth(font, s)<=r.max.x-r.min.x)
        pl_drawicon(p->b, r, PLACEW, 0, s);
    else
        pl_drawicon(p->b, r, PLACEE, 0, s);
    if(s != ep->entry)
        free(s);
}
@

<<constant [[USERFL]]>>=
#define USERFL	0x100000	/* start of user flag */
@

\subsection{Reacting}

<<function [[pl_hitentry]]>>=
int pl_hitentry(Panel *p, Mouse *m){
    if((m->buttons&7)==1){
        plgrabkb(p);

        p->state=DOWN;
        pldraw(p, p->b);
        while(m->buttons&1){
            int old;
            old=m->buttons;
            *m=emouse();
            if((old&7)==1){
                if((m->buttons&7)==3){
                    Entry *ep;

                    plsnarf(p);

                    /* cut */
                    ep=p->data;
                    ep->entp=ep->entry;
                    *ep->entp='\0';
                    pldraw(p, p->b);
                }
                if((m->buttons&7)==5)
                    plpaste(p);
            }
        }
        p->state=UP;
        pldraw(p, p->b);
    }
    return 0;
}
@

<<function [[pl_typeentry]]>>=
void pl_typeentry(Panel *p, Rune c){
    int n;
    Entry *ep;
    ep=p->data;
    switch(c){
    case '\n':
    case '\r':
        *ep->entp='\0';
        if(ep->hit) ep->hit(p, ep->entry);
        return;
    case Kesc:
        plsnarf(p);
        /* no break */
    case Kdel:	/* clear */
//	case Knack:	/* ^U: erase line */
//		ep->entp=ep->entry;
//		*ep->entp='\0';
//		break;
    case Kbs:	/* ^H: erase character */
        while(ep->entp!=ep->entry && !pl_rune1st(ep->entp[-1])) *--ep->entp='\0';
        if(ep->entp!=ep->entry) *--ep->entp='\0';
        break;
//	case Ketb:	/* ^W: erase word */
//		while(ep->entp!=ep->entry && !pl_idchar(ep->entp[-1]))
//			--ep->entp;
//		while(ep->entp!=ep->entry && pl_idchar(ep->entp[-1]))
//			--ep->entp;
//		*ep->entp='\0';
//		break;
    default:
        if(c < 0x20 || (c & 0xFF00) == KF || (c & 0xFF00) == Spec)
            break;
        ep->entp+=runetochar(ep->entp, &c);
        if(ep->entp>ep->eent){
            n=ep->entp-ep->entry;
            ep->entry=pl_erealloc(ep->entry, n+100+SLACK);
            ep->entp=ep->entry+n;
            ep->eent=ep->entp+100;
        }
        *ep->entp='\0';
        break;
    }
    pldraw(p, p->b);
}
@

\subsection{Packing methods}

<<function [[pl_getsizeentry]]>>=
Point pl_getsizeentry(Panel *p, Point children){
    USED(children);
    return pl_boxsize(((Entry *)p->data)->minsize, p->state);
}
@

<<function [[pl_childspaceentry]]>>=
void pl_childspaceentry(Panel *p, Point *ul, Point *size){
    USED(p, ul, size);
}
@

<<function [[pl_freeentry]]>>=
void pl_freeentry(Panel *p){
    Entry *ep;
    ep = p->data;
    free(ep->entry);
    ep->entry = ep->eent = ep->entp = 0;
}
@

<<function [[plentryval]]>>=
char *plentryval(Panel *p){
    Entry *ep;
    ep=p->data;
    *ep->entp='\0';
    return ep->entry;
}
@

\section{Edit}

<<struct [[Edit]]>>=
struct Edit{
    Point minsize;
    void (*hit)(Panel *);
    int sel0, sel1;
    Textwin *t;
    Rune *text;
    int ntext;
};
@

\subsection{Initializing}

<<function [[pledit]]>>=
Panel *pledit(Panel *parent, int flags, Point minsize, Rune *text, int ntext, void (*hit)(Panel *)){
    Panel *v;

    v=pl_newpanel(parent, sizeof(Edit));
    ((Edit *)v->data)->t=0;
    plinitedit(v, flags, minsize, text, ntext, hit);
    return v;
}
@


<<function [[plinitedit]]>>=
void plinitedit(Panel *v, int flags, Point minsize, Rune *text, int ntext, void (*hit)(Panel *)){
    Edit *ep;
    ep=v->data;
    v->flags=flags|LEAF;
    v->state=UP;
    v->draw=pl_drawedit;
    v->hit=pl_hitedit;
    v->type=pl_typeedit;
    v->getsize=pl_getsizeedit;
    v->childspace=pl_childspaceedit;
    v->free=pl_freeedit;

    v->snarf=pl_snarfedit;
    v->paste=pl_pasteedit;

    v->kind="edit";
    ep->hit=hit;
    ep->minsize=minsize;
    ep->text=text;
    ep->ntext=ntext;
    if(ep->t!=0) twfree(ep->t);
    ep->t=0;
    ep->sel0=-1;
    ep->sel1=-1;
    v->scroll=pl_scrolledit;
    v->scr.pos=Pt(0,0);
    v->scr.size=Pt(ntext,0);
}
@

<<function [[pl_freeedit]]>>=
void pl_freeedit(Panel *p){
    Edit *ep;
    ep=p->data;
    if(ep->t) twfree(ep->t);
    ep->t=0;
}
@

\subsection{Drawing}

<<function [[pl_drawedit]]>>=
void pl_drawedit(Panel *p){
    Edit *ep;
    Panel *sb;
    ep=p->data;
    if(ep->t==0){
        ep->t=twnew(p->b, font, ep->text, ep->ntext);
        if(ep->t==0){
            fprint(2, "pl_drawedit: can't allocate\n");
            exits("no mem");
        }
    }
    ep->t->b=p->b;
    twreshape(ep->t, p->r);
    twhilite(ep->t, ep->sel0, ep->sel1, 1);
    sb=p->yscroller;
    if(sb && sb->setscrollbar)
        sb->setscrollbar(sb, ep->t->top, ep->t->bot, ep->t->etext-ep->t->text);
}
@

\subsection{Reacting}

<<function [[pl_hitedit]]>>=
/*
 * Should do double-clicks:
 *	If ep->sel0==ep->sel1 on entry and the
 *	call to twselect returns the same selection, then
 *	expand selections (| marks possible selection points, ... is expanded selection)
 *	<|...|>			<> must nest
 *	(|...|)			() must nest
 *	[|...|]			[] must nest
 *	{|...|}			{} must nest
 *	'|...|'			no ' in ...
 *	"|...|"			no " in ...
 *	\n|...|\n		either newline may be the corresponding end of text
 *				include the trailing newline in the selection
 *	...|I...		I and ... are characters satisfying pl_idchar(I)
 *	...I|
 */
int pl_hitedit(Panel *p, Mouse *m){
    Edit *ep;
    ep=p->data;
    if(ep->t && m->buttons&1){
        plgrabkb(p);
        ep->t->b=p->b;
        twhilite(ep->t, ep->sel0, ep->sel1, 0);
        twselect(ep->t, m);
        ep->sel0=ep->t->sel0;
        ep->sel1=ep->t->sel1;
        if((m->buttons&7)==3){
            plsnarf(p);
            plepaste(p, 0, 0);	/* cut */
        }
        else if((m->buttons&7)==5)
            plpaste(p);
        else if(ep->hit)
            (*ep->hit)(p);
    }
    return 0;
}
@

<<function [[pl_typeedit]]>>=
void pl_typeedit(Panel *p, Rune c){
    Edit *ep;
    Textwin *t;
    int bot, scrolled;
    Panel *sb;
    ep=p->data;
    t=ep->t;
    if(t==0) return;
    t->b=p->b;
    twhilite(t, ep->sel0, ep->sel1, 0);
    switch(c){
    case Kesc:
        plsnarf(p);
        plepaste(p, 0, 0);	/* cut */
        break;
    case Kdel:	/* clear */
        ep->sel0=0;
        ep->sel1=plelen(p);
        plepaste(p, 0, 0);	/* cut */
        break;
    case Kbs:	/* ^H: erase character */
        if(ep->sel0!=0) --ep->sel0;
        twreplace(t, ep->sel0, ep->sel1, 0, 0);
        break;
//	case Knack:	/* ^U: erase line */
//		while(ep->sel0!=0 && t->text[ep->sel0-1]!='\n') --ep->sel0;
//		twreplace(t, ep->sel0, ep->sel1, 0, 0);
//		break;
//	case Ketb:	/* ^W: erase word */
//		while(ep->sel0!=0 && !pl_idchar(t->text[ep->sel0-1])) --ep->sel0;
//		while(ep->sel0!=0 && pl_idchar(t->text[ep->sel0-1])) --ep->sel0;
//		twreplace(t, ep->sel0, ep->sel1, 0, 0);
//		break;
    default:
        if((c & 0xFF00) == KF || (c & 0xFF00) == Spec)
            break;
        twreplace(t, ep->sel0, ep->sel1, &c, 1);
        ++ep->sel0;
        break;
    }
    ep->sel1=ep->sel0;
    /*
     * Scroll up until ep->sel0 is above t->bot.
     */
    scrolled=0;
    do{
        bot=t->bot;
        if(ep->sel0<=bot) break;
        twscroll(t, twpt2rune(t, Pt(t->r.min.x, t->r.min.y+font->height)));
        scrolled++;
    }while(bot!=t->bot);
    if(scrolled){
        sb=p->yscroller;
        if(sb && sb->setscrollbar)
            sb->setscrollbar(sb, t->top, t->bot, t->etext-t->text);
    }
    twhilite(t, ep->sel0, ep->sel1, 1);
}
@

\subsection{Packing methods}

<<function [[pl_getsizeedit]]>>=
Point pl_getsizeedit(Panel *p, Point children){
    USED(children);
    return pl_boxsize(((Edit *)p->data)->minsize, p->state);
}
@

<<function [[pl_childspaceedit]]>>=
void pl_childspaceedit(Panel *g, Point *ul, Point *size){
    USED(g, ul, size);
}
@

\subsection{Other methods}


% * Interface includes:
% *	void plescroll(Panel *p, int top);
% *		move the given character position onto the top line
% *	void plegetsel(Panel *p, int *sel0, int *sel1);
% *		read the selection back
% *	int plelen(Panel *p);
% *		read the length of the text back
% *	Rune *pleget(Panel *p);
% *		get a pointer to the text
% *	void plesel(Panel *p, int sel0, int sel1);
% *		set the selection -- adjusts hiliting
% *	void plepaste(Panel *p, Rune *text, int ntext);
% *		replace the selection with the given text


<<function [[pl_scrolledit]]>>=
void pl_scrolledit(Panel *p, int dir, int buttons, int num, int den){
    Edit *ep;
    Textwin *t;
    Panel *sb;
    int index, nline;
    if(dir!=VERT) return;
    ep=p->data;
    t=ep->t;
    if(t==0) return;
    t->b=p->b;
    switch(buttons){
    default:
        return;
    case 1:		/* top line moves to mouse position */
        nline=(t->r.max.y-t->r.min.y)/t->hgt*num/den;
        index=t->top;
        while(index!=0 && nline!=0)
            if(t->text[--index]=='\n') --nline;
        break;
    case 2:		/* absolute */
        index=(t->etext-t->text)*num/den;
        break;
    case 4:		/* mouse points at new top line */
        index=twpt2rune(t,
            Pt(t->r.min.x, t->r.min.y+(t->r.max.y-t->r.min.y)*num/den));
        break;
    }
    while(index!=0 && t->text[index-1]!='\n') --index;
    if(index!=t->top){
        twhilite(ep->t, ep->sel0, ep->sel1, 0);
        twscroll(t, index);
        p->scr.pos.y=t->top;
        twhilite(ep->t, ep->sel0, ep->sel1, 1);
        sb=p->yscroller;
        if(sb && sb->setscrollbar)
            sb->setscrollbar(sb, t->top, t->bot, t->etext-t->text);
    }
}
@





<<function [[plescroll]]>>=
void plescroll(Panel *p, int top){
    Textwin *t;
    t=((Edit*)p->data)->t;
    if(t) twscroll(t, top);
}
@

<<function [[plegetsel]]>>=
void plegetsel(Panel *p, int *sel0, int *sel1){
    Edit *ep;
    ep=p->data;
    *sel0=ep->sel0;
    *sel1=ep->sel1;
}
@

<<function [[plelen]]>>=
int plelen(Panel *p){
    Textwin *t;
    t=((Edit*)p->data)->t;
    if(t==0) return 0;
    return t->etext-t->text;
}
@

<<function [[pleget]]>>=
Rune *pleget(Panel *p){
    Textwin *t;
    t=((Edit*)p->data)->t;
    if(t==0) return 0;
    return t->text;
}
@

<<function [[plesel]]>>=
void plesel(Panel *p, int sel0, int sel1){
    Edit *ep;
    ep=p->data;
    if(ep->t==0) return;
    ep->t->b=p->b;
    twhilite(ep->t, ep->sel0, ep->sel1, 0);
    ep->sel0=sel0;
    ep->sel1=sel1;
    twhilite(ep->t, ep->sel0, ep->sel1, 1);
}
@

<<function [[plepaste]]>>=
void plepaste(Panel *p, Rune *text, int ntext){
    Edit *ep;
    ep=p->data;
    if(ep->t==0) return;
    ep->t->b=p->b;
    twhilite(ep->t, ep->sel0, ep->sel1, 0);
    twreplace(ep->t, ep->sel0, ep->sel1, text, ntext);
    ep->sel1=ep->sel0+ntext;
    twhilite(ep->t, ep->sel0, ep->sel1, 1);
    p->scr.size.y=ep->t->etext-ep->t->text;
    p->scr.pos.y=ep->t->top;
}
@

<<function [[plemove]]>>=
void plemove(Panel *p, Point d){
    Edit *ep;
    ep=p->data;
    if(ep->t && !eqpt(d, Pt(0,0))) twmove(ep->t, d);
}
@


\section{Button}

\subsection{[[Button]]}

<<struct [[Button]]>>=
struct Button{
    int btype;			/* button type */

    Icon *icon;			/* what to write on the button */
    int check;			/* for check/radio buttons */

    void (*hit)(Panel *, int, int);	/* call back user code on check/radio hit */
    void (*menuhit)(int, int);	/* call back user code on menu item hit */
    void (*pl_buttonhit)(Panel *, int);	/* call back user code on button hit */

    int index;			/* arg to menuhit */
    int buttons;
};
@

<<constant [[BUTTON]]>>=
#define	BUTTON	1
@
<<constant [[CHECK]]>>=
#define	CHECK	2
@
<<constant [[RADIO]]>>=
#define	RADIO	3
@

\subsection{Basic button}

\subsubsection{Initializing}

<<function [[plbutton]]>>=
Panel *plbutton(Panel *parent, int flags, Icon *icon, void (*hit)(Panel *, int)){
    Panel *p;
    p=pl_newpanel(parent, sizeof(Button));
    plinitbutton(p, flags, icon, hit);
    return p;
}
@

<<function [[plinitbutton]]>>=
void plinitbutton(Panel *p, int flags, Icon *icon, void (*hit)(Panel *, int)){
    ((Button *)p->data)->pl_buttonhit=hit;
    pl_initbtype(p, flags, icon, pl_buttonhit, BUTTON);
}
@

<<function [[pl_buttonhit]]>>=
void pl_buttonhit(Panel *p, int buttons, int check){
    USED(check);
    if(((Button *)p->data)->pl_buttonhit) ((Button *)p->data)->pl_buttonhit(p, buttons);
}
@


<<function [[pl_initbtype]]>>=
void pl_initbtype(Panel *v, int flags, Icon *icon, void (*hit)(Panel *, int, int), int btype){
    Button *bp;
    bp=v->data;
    v->flags=flags|LEAF;
    v->state=UP;
    v->draw=pl_drawbutton;
    v->hit=pl_hitbutton;
    v->type=pl_typebutton;
    v->getsize=pl_getsizebutton;
    v->childspace=pl_childspacebutton;
    bp->btype=btype;
    bp->check=0;
    bp->hit=hit;
    bp->icon=icon;

    switch(btype){
    case BUTTON: v->kind="button"; break;
    case CHECK:  v->kind="checkbutton"; break;
    case RADIO:  v->kind="radiobutton"; break;
    }
}
@

\subsubsection{Drawing}

<<function [[pl_drawbutton]]>>=
void pl_drawbutton(Panel *p){
    Rectangle r;
    Button *bp;
    bp=p->data;
    r=pl_box(p->b, p->r, p->state);
    switch(bp->btype){
    case CHECK:
        r=pl_check(p->b, r, bp->check);
        break;
    case RADIO:
        r=pl_radio(p->b, r, bp->check);
        break;
    }
    pl_drawicon(p->b, r, PLACECEN, p->flags, bp->icon);
}
@

\subsubsection{Reacting}

<<function [[pl_hitbutton]]>>=
int pl_hitbutton(Panel *p, Mouse *m){
    int oldstate, hitme;
    Panel *sib;
    Button *bp;
    bp=p->data;
    oldstate=p->state;
    if(m->buttons&OUT){
        hitme=0;
        p->state=UP;
    }
    else if(m->buttons&7){
        hitme=0;
        p->state=DOWN;
        bp->buttons=m->buttons;
    }
    else{	/* mouse inside, but no buttons down */
        hitme=p->state==DOWN;
        p->state=UP;
    }
    if(hitme) switch(bp->btype){
    case CHECK:
        if(hitme) bp->check=!bp->check;
        break;
    case RADIO:
        if(bp->check) bp->check=0;
        else{
            if(p->parent){
                for(sib=p->parent->child;sib;sib=sib->next){
                    if(sib->hit==pl_hitbutton
                    && ((Button *)sib->data)->btype==RADIO
                    && ((Button *)sib->data)->check){
                        ((Button *)sib->data)->check=0;
                        pldraw(sib, p->b);
                    }
                }
            }
            bp->check=1;
        }
        break;
    }
    if(hitme || oldstate!=p->state) pldraw(p, p->b);
    if(hitme && bp->hit){
        bp->hit(p, bp->buttons, bp->check);
        p->state=UP;
    }
    return 0;
}
@

<<function [[pl_typebutton]]>>=
void pl_typebutton(Panel *g, Rune c){
    USED(g, c);
}
@

\subsubsection{Other methods}


<<function [[pl_getsizebutton]]>>=
Point pl_getsizebutton(Panel *p, Point children){
    Point s;
    int ckw;
    Button *bp;
    USED(children);		/* shouldn't have any children */
    bp=p->data;
    s=pl_iconsize(p->flags, bp->icon);
    if(bp->btype!=BUTTON){
        ckw=pl_ckwid();
        if(s.y<ckw){
            s.x+=ckw;
            s.y=ckw;
        }
        else s.x+=s.y;
    }
    return pl_boxsize(s, p->state);
}
@

<<function [[pl_childspacebutton]]>>=
void pl_childspacebutton(Panel *g, Point *ul, Point *size){
    USED(g, ul, size);
}
@


<<function [[plsetbutton]]>>=
void plsetbutton(Panel *p, int val){
    ((Button *)p->data)->check=val;
}
@

\subsection{Check button}

\subsubsection{Initializing}

<<function [[plcheckbutton]]>>=
Panel *plcheckbutton(Panel *parent, int flags, Icon *icon, void (*hit)(Panel *, int, int)){
    Panel *p;
    p=pl_newpanel(parent, sizeof(Button));
    plinitcheckbutton(p, flags, icon, hit);
    return p;
}
@

<<function [[plinitcheckbutton]]>>=
void plinitcheckbutton(Panel *p, int flags, Icon *icon, void (*hit)(Panel *, int, int)){
    pl_initbtype(p, flags, icon, hit, CHECK);
}
@

\subsubsection{Drawing}

<<function [[pl_check]]>>=
Rectangle pl_check(Image *b, Rectangle r, int val){
    Rectangle remainder;
    remainder=r;
    r.max.x=r.min.x+r.max.y-r.min.y;
    remainder.min.x=r.max.x;
    r=insetrect(r, CKINSET);
    if(plldepth==0)
        pl_relief(b, pl_black, pl_black, r, CKWID);
    else
        pl_relief(b, pl_black, pl_white, r, CKWID);
    r=insetrect(r, CKWID);
    if(plldepth==0)
        draw(b, r, pl_white, 0, ZP);
    else
        draw(b, r, pl_light, 0, ZP);
    r=insetrect(r, CKBORDER);
    if(val){
        line(b, Pt(r.min.x,   r.min.y+1), Pt(r.max.x-1, r.max.y  ), Endsquare, Endsquare, 0, pl_black, ZP);
        line(b, Pt(r.min.x,   r.min.y  ), Pt(r.max.x,   r.max.y  ), Endsquare, Endsquare, 0, pl_black, ZP);
        line(b, Pt(r.min.x+1, r.min.y  ), Pt(r.max.x,   r.max.y-1), Endsquare, Endsquare, 0, pl_black, ZP);
        line(b, Pt(r.min.x  , r.max.y-2), Pt(r.max.x-1, r.min.y-1), Endsquare, Endsquare, 0, pl_black, ZP);
        line(b, Pt(r.min.x,   r.max.y-1), Pt(r.max.x,   r.min.y-1), Endsquare, Endsquare, 0, pl_black, ZP);
        line(b, Pt(r.min.x+1, r.max.y-1), Pt(r.max.x,   r.min.y  ), Endsquare, Endsquare, 0, pl_black, ZP);
    }
    return remainder;
}
@

\subsubsection{Reacting}
\subsubsection{Other methods}

\subsection{Radio button}

\subsubsection{Initializing}

<<function [[plradiobutton]]>>=
Panel *plradiobutton(Panel *parent, int flags, Icon *icon, void (*hit)(Panel *, int, int)){
    Panel *p;

    p=pl_newpanel(parent, sizeof(Button));
    plinitradiobutton(p, flags, icon, hit);
    return p;
}
@

<<function [[plinitradiobutton]]>>=
void plinitradiobutton(Panel *p, int flags, Icon *icon, void (*hit)(Panel *, int, int)){
    pl_initbtype(p, flags, icon, hit, RADIO);
}
@

\subsubsection{Drawing}

<<function [[pl_radio]]>>=
/*
 * Place a check mark at the left end of r.  Return the unused space.
 * Caller must guarantee that r.max.x-r.min.x>=r.max.y-r.min.y!
 */
Rectangle pl_radio(Image *b, Rectangle r, int val){
    Rectangle remainder;
    remainder=r;
    r.max.x=r.min.x+r.max.y-r.min.y;
    remainder.min.x=r.max.x;
    r=insetrect(r, CKINSET);
    if(plldepth==0)
        pl_relief(b, pl_black, pl_black, r, CKWID);
    else
        pl_relief(b, pl_black, pl_white, r, CKWID);
    r=insetrect(r, CKWID);
    if(plldepth==0)
        draw(b, r, pl_white, 0, ZP);
    else
        draw(b, r, pl_light, 0, ZP);
    if(val) draw(b, insetrect(r, CKSPACE), pl_black, 0, ZP);
    return remainder;
}
@

\subsubsection{Reacting}
\subsubsection{Other methods}

\section{Slider}

<<struct [[Slider]]>>=
struct Slider{
    int dir;			/* HORIZ or VERT */
    int val;			/* setting, in screen coordinates */
    Point minsize;
    void (*hit)(Panel *, int, int, int);	/* call back to user when slider changes */
    int buttons;
};
@

\subsection{Initializing}

<<function [[plslider]]>>=
Panel *plslider(Panel *parent, int flags, Point size, void (*hit)(Panel *, int, int, int)){
    Panel *p;
    p=pl_newpanel(parent, sizeof(Slider));
    plinitslider(p, flags, size, hit);
    return p;
}
@

<<function [[plinitslider]]>>=
void plinitslider(Panel *v, int flags, Point size, void (*hit)(Panel *, int, int, int)){
    Slider *sp;
    sp=v->data;
    v->r=Rect(0,0,size.x,size.y);
    v->flags=flags|LEAF;
    v->state=UP;
    v->draw=pl_drawslider;
    v->hit=pl_hitslider;
    v->type=pl_typeslider;
    v->getsize=pl_getsizeslider;
    v->childspace=pl_childspaceslider;
    sp->minsize=size;
    sp->dir=size.x>size.y?HORIZ:VERT;
    sp->hit=hit;
    v->kind="slider";
}
@


\subsection{Drawing}

<<function [[pl_drawslider]]>>=
void pl_drawslider(Panel *p){
    Rectangle r;
    Slider *sp;
    sp=p->data;
    r=pl_box(p->b, p->r, UP);
    switch(sp->dir){
    case HORIZ: pl_sliderupd(p->b, r, sp->dir, 0, sp->val); break;
    case VERT:  pl_sliderupd(p->b, r, sp->dir, r.max.y-sp->val, r.max.y); break;
    }
}
@

\subsection{Reacting}

<<function [[pl_hitslider]]>>=
int pl_hitslider(Panel *p, Mouse *m){
    int oldstate, oldval, len;
    Point ul, size;
    Slider *sp;
    sp=p->data;
    ul=p->r.min;
    size=subpt(p->r.max, p->r.min);
    pl_interior(p->state, &ul, &size);
    oldstate=p->state;
    oldval=sp->val;
    SET(len);
    if(m->buttons&OUT)
        p->state=UP;
    else if(m->buttons&7){
        p->state=DOWN;
        sp->buttons=m->buttons;
        if(sp->dir==HORIZ){
            sp->val=m->xy.x-ul.x;
            len=size.x;
        }
        else{
            sp->val=ul.y+size.y-m->xy.y;
            len=size.y;
        }
        if(sp->val<0) sp->val=0;
        else if(sp->val>len) sp->val=len;
    }
    else	/* mouse inside, but no buttons down */
        p->state=UP;
    if(oldval!=sp->val || oldstate!=p->state) pldraw(p, p->b);
    if(oldval!=sp->val && sp->hit) sp->hit(p, sp->buttons, sp->val, len);
    return 0;
}
@

<<function [[pl_typeslider]]>>=
void pl_typeslider(Panel *p, Rune c){
    USED(p, c);
}
@


\subsection{Packing methods}

<<function [[pl_getsizeslider]]>>=
Point pl_getsizeslider(Panel *p, Point children){
    USED(children);
    return pl_boxsize(((Slider *)p->data)->minsize, p->state);
}
@

<<function [[pl_childspaceslider]]>>=
void pl_childspaceslider(Panel *g, Point *ul, Point *size){
    USED(g, ul, size);
}
@



<<function [[plsetslider]]>>=
void plsetslider(Panel *p, int value, int range){
    Slider *sp;
    sp=p->data;
    if(value<0) value=0;
    else if(value>range) value=range;
    if(sp->dir==HORIZ) sp->val=value*(p->r.max.x-p->r.min.x)/range;
    else sp->val=value*(p->r.max.y-p->r.min.y)/range;
}
@


\chapter{Menu}

\section{Basic menu}

\subsection{Initializing}

<<function [[plmenu]]>>=
Panel *plmenu(Panel *parent, int flags, Icon **item, int cflags, void (*hit)(int, int)){
    Panel *v;
    v=plgroup(parent, flags);
    plinitmenu(v, flags, item, cflags, hit);
    return v;
}
@

<<function [[plinitmenu]]>>=
void plinitmenu(Panel *v, int flags, Icon **item, int cflags, void (*hit)(int, int)){
    Panel *b;
    int i;
    v->flags=flags;
    v->kind="menu";
    if(v->child){
        plfree(v->child);
        v->child=0;
    }
    for(i=0;item[i];i++){
        b=plbutton(v, cflags, item[i], pl_hitmenu);
        ((Button *)b->data)->menuhit=hit;
        ((Button *)b->data)->index=i;
    }
}
@

\subsection{Drawing}

\subsection{Reacting}

<<function [[pl_hitmenu]]>>=
void pl_hitmenu(Panel *p, int buttons){
    void (*hit)(int, int);
    hit=((Button *)p->data)->menuhit;
    if(hit) hit(buttons, ((Button *)p->data)->index);
}
@

\subsection{Packing methods}


\section{Popup}

<<struct [[Popup]]>>=
struct Popup{
    Image *save;			/* where to save what the popup covers */
    Panel *pop[3];			/* what to pop up */
};
@

\subsection{Initializing}

<<function [[plpopup]]>>=
Panel *plpopup(Panel *parent, int flags, Panel *pop0, Panel *pop1, Panel *pop2){
    Panel *v;
    v=pl_newpanel(parent, sizeof(Popup));
    plinitpopup(v, flags, pop0, pop1, pop2);
    return v;
}
@


<<function [[plinitpopup]]>>=
void plinitpopup(Panel *v, int flags, Panel *pop0, Panel *pop1, Panel *pop2){
    Popup *pp;
    pp=v->data;
    v->flags=flags;
    v->pri=pl_pripopup;
    v->state=UP;
    v->draw=pl_drawpopup;
    v->hit=pl_hitpopup;
    v->type=pl_typepopup;
    v->getsize=pl_getsizepopup;
    v->childspace=pl_childspacepopup;
    pp->pop[0]=pop0;
    pp->pop[1]=pop1;
    pp->pop[2]=pop2;
    pp->save=0;
    v->kind="popup";
}
@

\subsection{Drawing}

<<function [[pl_drawpopup]]>>=
void pl_drawpopup(Panel *p){
    USED(p);
}
@

\subsection{Reacting}

<<[[pl_drawall()]] if invisible widget>>=
if(p->flags&INVIS) return;
@

<<function [[pl_hitpopup]]>>=
int pl_hitpopup(Panel *g, Mouse *m){
    Panel *p;
    Point d;
    Popup *pp;

    pp=g->data;
    if(g->state==UP){
        switch(m->buttons&7){
        case 0: p=g->child; break;
        case 1:	p=pp->pop[0]; g->state=DOWN1; break;
        case 2: p=pp->pop[1]; g->state=DOWN2; break;
        case 4: p=pp->pop[2]; g->state=DOWN3; break;
        default: p=0; break;
        }
        if(p==0){
            p=g->child;
            g->state=DOWN;
        }
        else if(g->state!=UP){
            plpack(p, view->clipr);
            if(p->lastmouse)
                d=subpt(m->xy, divpt(addpt(p->lastmouse->r.min,
                             p->lastmouse->r.max), 2));
            else
                d=subpt(m->xy, divpt(addpt(p->r.min, p->r.max), 2));
            if(p->r.min.x+d.x<g->r.min.x) d.x=g->r.min.x-p->r.min.x;
            if(p->r.max.x+d.x>g->r.max.x) d.x=g->r.max.x-p->r.max.x;
            if(p->r.min.y+d.y<g->r.min.y) d.y=g->r.min.y-p->r.min.y;
            if(p->r.max.y+d.y>g->r.max.y) d.y=g->r.max.y-p->r.max.y;
            plmove(p, d);
            pp->save=allocimage(display, p->r, g->b->chan, 0, DNofill);
            if(pp->save!=0) draw(pp->save, p->r, g->b, 0, p->r.min);
            pl_invis(p, 0);
            pldraw(p, g->b);
        }
    }
    else{
        switch(g->state){
        default: SET(p); break;			/* can't happen! */
        case DOWN1: p=pp->pop[0]; break;
        case DOWN2: p=pp->pop[1]; break;
        case DOWN3: p=pp->pop[2]; break;
        case DOWN:  p=g->child;  break;
        }
        if((m->buttons&7)==0){
            if(g->state!=DOWN){
                if(pp->save!=0){
                    draw(g->b, p->r, pp->save, 0, p->r.min);
                    flushimage(display, 1);
                    freeimage(pp->save);
                    pp->save=0;
                }
                pl_invis(p, 1);
            }
            g->state=UP;
        }
    }
    plmouse(p, m);
    if((m->buttons&7)==0)
        g->state=UP;
    return (m->buttons&7)!=0;
}
@

<<function [[pl_typepopup]]>>=
void pl_typepopup(Panel *g, Rune c){
    USED(g, c);
}
@


<<function [[plmove]]>>=
/*
 * move an already-packed panel so that p->r=raddp(p->r, d)
 */
void plmove(Panel *p, Point d){
    if(strcmp(p->kind, "edit") == 0)	/* sorry */
        plemove(p, d);
    p->r=rectaddpt(p->r, d);
    for(p=p->child;p;p=p->next) plmove(p, d);
}
@

\subsection{Packing methods}

<<function [[pl_getsizepopup]]>>=
Point pl_getsizepopup(Panel *g, Point children){
    USED(g);
    return children;
}
@

<<function [[pl_childspacepopup]]>>=
void pl_childspacepopup(Panel *g, Point *ul, Point *size){
    USED(g, ul, size);
}
@

\section{Pull-down}

<<struct [[Pulldown]]>>=
struct Pulldown{
    Icon *icon;		/* button label */
    Panel *pull;		/* Panel to pull down */
    int side;		/* which side of the button to put the panel on */
    Image *save;		/* where to save what we draw the panel on */
};
@

\subsection{Initializing}

<<function [[plpulldown]]>>=
Panel *plpulldown(Panel *parent, int flags, Icon *icon, Panel *pullthis, int side){
    Panel *v;

    v=pl_newpanel(parent, sizeof(Pulldown));
    v->state=UP;
    ((Pulldown *)v->data)->save=0;
    plinitpulldown(v, flags, icon, pullthis, side);
    return v;
}
@

<<function [[plinitpulldown]]>>=
void plinitpulldown(Panel *v, int flags, Icon *icon, Panel *pullthis, int side){
    Pulldown *pp;
    pp=v->data;
    v->flags=flags|LEAF;
    v->draw=pl_drawpulldown;
    v->hit=pl_hitpulldown;
    v->type=pl_typepulldown;
    v->getsize=pl_getsizepulldown;
    v->childspace=pl_childspacepulldown;
    pp->pull=pullthis;
    pp->side=side;
    pp->icon=icon;
    v->kind="pulldown";
}
@

\subsection{Drawing}

<<function [[pl_drawpulldown]]>>=
void pl_drawpulldown(Panel *p){
    pl_drawicon(p->b, pl_box(p->b, p->r, p->state), PLACECEN,
        p->flags, ((Pulldown *)p->data)->icon);
}
@

\subsection{Reacting}

<<function [[pl_hitpulldown]]>>=
int pl_hitpulldown(Panel *g, Mouse *m){
    int oldstate, passon;
    Rectangle r;
    Panel *p, *hitme;
    Pulldown *pp;
    pp=g->data;
    oldstate=g->state;
    p=pp->pull;
    hitme=0;
    switch(g->state){
    case UP:
        if(!ptinrect(m->xy, g->r))
            g->state=UP;
        else if(m->buttons&7){
            r=g->b->r;
            p->flags&=~PLACE;
            switch(pp->side){
            case PACKN:
                r.min.x=g->r.min.x;
                r.max.y=g->r.min.y;
                p->flags|=PLACESW;
                break;
            case PACKS:
                r.min.x=g->r.min.x;
                r.min.y=g->r.max.y;
                p->flags|=PLACENW;
                break;
            case PACKE:
                r.min.x=g->r.max.x;
                r.min.y=g->r.min.y;
                p->flags|=PLACENW;
                break;
            case PACKW:
                r.max.x=g->r.min.x;
                r.min.y=g->r.min.y;
                p->flags|=PLACENE;
                break;
            case PACKCEN:
                r.min=g->r.min;
                p->flags|=PLACENW;
                break;
            }
            plpack(p, r);
            pp->save=allocimage(display, p->r, g->b->chan, 0, DNofill);
            if(pp->save!=0) draw(pp->save, p->r, g->b, 0, p->r.min);
            pl_invis(p, 0);
            pldraw(p, g->b);
            g->state=DOWN;
        }
        break;
    case DOWN:
        if(!ptinrect(m->xy, g->r)){
            switch(pp->side){
            default: SET(passon); break;		/* doesn't happen */
            case PACKN: passon=m->xy.y<g->r.min.y; break;
            case PACKS: passon=m->xy.y>=g->r.max.y; break;
            case PACKE: passon=m->xy.x>=g->r.max.x; break;
            case PACKW: passon=m->xy.x<g->r.min.x; break;
            case PACKCEN: passon=1; break;
            }
            if(passon){
                hitme=p;
                if((m->buttons&7)==0) g->state=UP;
            }
            else	g->state=UP;
        }
        else if((m->buttons&7)==0) g->state=UP;
        else hitme=p;
        if(g->state!=DOWN && pp->save){
            draw(g->b, p->r, pp->save, 0, p->r.min);
            freeimage(pp->save);
            pp->save=0;
            pl_invis(p, 1);
            hitme=p;
        }
    }
    if(g->state!=oldstate) pldraw(g, g->b);
    if(hitme) plmouse(hitme, m);
    return g->state==DOWN;
}
@

<<function [[pl_typepulldown]]>>=
void pl_typepulldown(Panel *p, Rune c){
    USED(p, c);
}
@


\subsection{Packing methods}

<<function [[pl_getsizepulldown]]>>=
Point pl_getsizepulldown(Panel *p, Point children){
    USED(p, children);
    return pl_boxsize(pl_iconsize(p->flags, ((Pulldown *)p->data)->icon), p->state);
}
@

<<function [[pl_childspacepulldown]]>>=
void pl_childspacepulldown(Panel *p, Point *ul, Point *size){
    USED(p, ul, size);
}
@



\section{Menubar}

\subsection{Initializing}

<<function [[plmenubar]]>>=
Panel *plmenubar(Panel *parent, int flags, int cflags, Icon *l1, Panel *m1, Icon *l2, ...){
    Panel *v;
    va_list arg;
    Icon *s;
    int pulldir;

    switch(cflags&PACK){
    default:
        SET(pulldir);
        break;
    case PACKE:
    case PACKW:
        pulldir=PACKS;
        break;
    case PACKN:
    case PACKS:
        pulldir=PACKE;
        break;
    }
    v=plgroup(parent, flags);
    va_start(arg, cflags);
    while((s=va_arg(arg, Icon *))!=0)
        plpulldown(v, cflags, s, va_arg(arg, Panel *), pulldir);
    va_end(arg);
    USED(l1, m1, l2);
    v->kind="menubar";
    return v;
}
@






\chapter{Composite Widgets}

\section{Frame}

\subsection{Initializing}

<<function [[plframe]]>>=
Panel *plframe(Panel *parent, int flags){
    Panel *p;

    p=pl_newpanel(parent, 0);
    plinitframe(p, flags);
    return p;
}
@

<<function [[plinitframe]]>>=
void plinitframe(Panel *v, int flags){
    v->flags=flags;
    v->draw=pl_drawframe;
    v->hit=pl_hitframe;
    v->type=pl_typeframe;
    v->getsize=pl_getsizeframe;
    v->childspace=pl_childspaceframe;
    v->kind="frame";
}
@

\subsection{Drawing}

<<function [[pl_drawframe]]>>=
void pl_drawframe(Panel *p){
    pl_box(p->b, p->r, FRAME);
}
@

\subsection{Reacting}

<<function [[pl_hitframe]]>>=
int pl_hitframe(Panel *p, Mouse *m){
    USED(p, m);
    return 0;
}
@

<<function [[pl_typeframe]]>>=
void pl_typeframe(Panel *p, Rune c){
    USED(p, c);
}
@

\subsection{Packing methods}

<<function [[pl_getsizeframe]]>>=
Point pl_getsizeframe(Panel *p, Point children){
    USED(p);
    return pl_boxsize(children, FRAME);
}
@

<<function [[pl_childspaceframe]]>>=
void pl_childspaceframe(Panel *p, Point *ul, Point *size){
    USED(p);
    pl_interior(FRAME, ul, size);
}
@

\section{Group}

\subsection{Initializing}

<<function [[plgroup]]>>=
Panel *plgroup(Panel *parent, int flags){
    Panel *p;
    p=pl_newpanel(parent, 0);
    plinitgroup(p, flags);
    return p;
}
@


<<function [[plinitgroup]]>>=
void plinitgroup(Panel *v, int flags){
    v->flags=flags;
    v->draw=pl_drawgroup;
    v->hit=pl_hitgroup;
    v->type=pl_typegroup;
    v->getsize=pl_getsizegroup;
    v->childspace=pl_childspacegroup;
    v->kind="group";
}
@

\subsection{Drawing}

<<function [[pl_drawgroup]]>>=
void pl_drawgroup(Panel *p){
    USED(p);
}
@

\subsection{Reacting}

<<function [[pl_hitgroup]]>>=
int pl_hitgroup(Panel *p, Mouse *m){
    USED(p, m);
    return 0;
}
@

<<function [[pl_typegroup]]>>=
void pl_typegroup(Panel *p, Rune c){
    USED(p, c);
}
@

\subsection{Packing methods}

<<function [[pl_getsizegroup]]>>=
Point pl_getsizegroup(Panel *p, Point children){
    USED(p);
    return children;
}
@

<<function [[pl_childspacegroup]]>>=
void pl_childspacegroup(Panel *p, Point *ul, Point *size){
    USED(p, ul, size);
}
@



\section{List}

<<struct [[List]]>>=
struct List{
    void (*hit)(Panel *, int, int);	/* call user back on hit */
    char *(*gen)(Panel *, int);	/* return text given index or 0 if out of range */
    int lo;				/* indices of first, last items displayed */
    int sel;			/* index of hilited item */
    int len;			/* # of items in list */
    Rectangle listr;
    Point minsize;
    int buttons;
};
@

\subsection{Initializing}

<<function [[pllist]]>>=
Panel *pllist(Panel *parent, int flags, char *(*gen)(Panel *, int), int nlist, void (*hit)(Panel *, int, int)){
    Panel *v;

    v=pl_newpanel(parent, sizeof(List));
    plinitlist(v, flags, gen, nlist, hit);
    return v;
}
@

<<function [[plinitlist]]>>=
void plinitlist(Panel *v, int flags, char *(*gen)(Panel *, int), int nlist, void (*hit)(Panel *, int, int)){
    List *lp;
    int wid, max;
    char *str;
    lp=v->data;
    v->flags=flags|LEAF;
    v->state=UP;
    v->draw=pl_drawlist;
    v->hit=pl_hitlist;
    v->type=pl_typelist;
    v->getsize=pl_getsizelist;
    v->childspace=pl_childspacelist;
    lp->gen=gen;
    lp->hit=hit;
    max=0;
    for(lp->len=0;str=gen(v, lp->len);lp->len++){
        wid=stringwidth(font, str);
        if(wid>max) max=wid;
    }
    if(flags&(FILLX|EXPAND)){
        for(lp->len=0;gen(v, lp->len);lp->len++);
        lp->minsize=Pt(0, nlist*font->height);
    }
    else{
        max=0;
        for(lp->len=0;str=gen(v, lp->len);lp->len++){
            wid=stringwidth(font, str);
            if(wid>max) max=wid;
        }
        lp->minsize=Pt(max, nlist*font->height);
    }
    lp->sel=-1;
    lp->lo=0;
    v->scroll=pl_scrolllist;
    v->scr.pos=Pt(0,0);
    v->scr.size=Pt(0,lp->len);
    v->kind="list";
}
@


\subsection{Drawing}

<<function [[pl_drawlist]]>>=
void pl_drawlist(Panel *p){
    List *lp;
    lp=p->data;
    lp->listr=pl_box(p->b, p->r, UP);
    pl_liststrings(p, lp->lo, lp->lo+(lp->listr.max.y-lp->listr.min.y)/font->height,
        lp->listr);
}
@

\subsection{Reacting}

<<function [[pl_hitlist]]>>=
int pl_hitlist(Panel *p, Mouse *m){
    int oldsel, hitme;
    Point ul, size;
    List *lp;
    lp=p->data;
    hitme=0;
    ul=p->r.min;
    size=subpt(p->r.max, p->r.min);
    pl_interior(p->state, &ul, &size);
    oldsel=lp->sel;
    if(m->buttons&OUT){
        p->state=UP;
        if(m->buttons&~OUT) lp->sel=-1;
    }
    else if(p->state==DOWN || m->buttons&7){
        lp->sel=(m->xy.y-ul.y)/font->height+lp->lo;
        if(m->buttons&7){
            lp->buttons=m->buttons;
            p->state=DOWN;
        }
        else{
            hitme=1;
            p->state=UP;
        }
    }
    if(oldsel!=lp->sel){
        pl_listsel(p, oldsel, 0);
        pl_listsel(p, lp->sel, 1);
    }
    if(hitme && 0<=lp->sel && lp->sel<lp->len && lp->hit)
        lp->hit(p, lp->buttons, lp->sel);
    return 0;
}
@


<<function [[pl_typelist]]>>=
void pl_typelist(Panel *g, Rune c){
    USED(g, c);
}
@

\subsection{Packing methods}

<<function [[pl_getsizelist]]>>=
Point pl_getsizelist(Panel *p, Point children){
    USED(children);
    return pl_boxsize(((List *)p->data)->minsize, p->state);
}
@

<<function [[pl_childspacelist]]>>=
void pl_childspacelist(Panel *g, Point *ul, Point *size){
    USED(g, ul, size);
}
@

\subsection{Other methods}

<<constant [[MAXHGT]]>>=
#define	MAXHGT	12
@

<<function [[pl_listsel]]>>=
void pl_listsel(Panel *p, int sel, int on){
    List *lp;
    int hi;
    Rectangle r;
    lp=p->data;
    hi=lp->lo+(lp->listr.max.y-lp->listr.min.y)/font->height;
    if(lp->lo>=0 && lp->lo<=sel && sel<hi && sel<lp->len){
        r=lp->listr;
        r.min.y+=(sel-lp->lo)*font->height;
        r.max.y=r.min.y+font->height;
        if(on)
            pl_highlight(p->b, r);
        else{
            pl_fill(p->b, r);
            pl_drawicon(p->b, r, PLACEW, 0, lp->gen(p, sel));
        }
    }
}
@

<<function [[pl_liststrings]]>>=
void pl_liststrings(Panel *p, int lo, int hi, Rectangle r){
    Panel *sb;
    List *lp;
    char *s;
    int i;
    lp=p->data;
    for(i=lo;i!=hi && (s=lp->gen(p, i));i++){
        r.max.y=r.min.y+font->height;
        pl_drawicon(p->b, r, PLACEW, 0, s);
        r.min.y+=font->height;
    }
    if(lo<=lp->sel && lp->sel<hi) pl_listsel(p, lp->sel, 1);
    sb=p->yscroller;
    if(sb && sb->setscrollbar)
        sb->setscrollbar(sb, lp->lo,
            lp->lo+(lp->listr.max.y-lp->listr.min.y)/font->height, lp->len);
}
@


<<function [[pl_scrolllist]]>>=
void pl_scrolllist(Panel *p, int dir, int buttons, int val, int len){
    Point ul, size;
    int nlist, oldlo, hi, nline, y;
    List *lp;
    Rectangle r;
    lp=p->data;
    ul=p->r.min;
    size=subpt(p->r.max, p->r.min);
    pl_interior(p->state, &ul, &size);
    nlist=size.y/font->height;
    oldlo=lp->lo;
    if(dir==VERT) switch(buttons){
    case 1: lp->lo-=nlist*val/len; break;
    case 2: lp->lo=lp->len*val/len; break;
    case 4:	lp->lo+=nlist*val/len; break;
    }
    if(lp->lo<0) lp->lo=0;
    if(lp->lo>=lp->len) lp->lo=lp->len-1;
    if(lp->lo==oldlo) return;
    p->scr.pos.y=lp->lo;
    r=lp->listr;
    nline=(r.max.y-r.min.y)/font->height;
    hi=lp->lo+nline;
    if(hi<=oldlo || lp->lo>=oldlo+nline){
        pl_box(p->b, r, PASSIVE);
        pl_liststrings(p, lp->lo, hi, r);
    }
    else if(lp->lo<oldlo){
        y=r.min.y+(oldlo-lp->lo)*font->height;
        pl_cpy(p->b, Pt(r.min.x, y), 
            Rect(r.min.x, r.min.y, r.max.x, r.min.y+(hi-oldlo)*font->height));
        r.max.y=y;
        pl_box(p->b, r, PASSIVE);
        pl_liststrings(p, lp->lo, oldlo, r);
    }
    else{
        pl_cpy(p->b, r.min, Rect(r.min.x, r.min.y+(lp->lo-oldlo)*font->height,
            r.max.x, r.max.y));
        r.min.y=r.min.y+(oldlo+nline-lp->lo)*font->height;
        pl_box(p->b, r, PASSIVE);
        pl_liststrings(p, oldlo+nline, hi, r);
    }
}
@



\section{Dialog message}

<<struct [[Message]]>>=
struct Message{
    char *text;
    Point minsize;
};
@

\subsection{Initializing}

<<function [[plmessage]]>>=
Panel *plmessage(Panel *parent, int flags, int wid, char *msg){
    Panel *v;
    v=pl_newpanel(parent, sizeof(Message));
    plinitmessage(v, flags, wid, msg);
    return v;
}
@

<<function [[plinitmessage]]>>=
void plinitmessage(Panel *v, int flags, int wid, char *msg){
    Message *mp;
    mp=v->data;
    v->flags=flags|LEAF;
    v->draw=pl_drawmessage;
    v->hit=pl_hitmessage;
    v->type=pl_typemessage;
    v->getsize=pl_getsizemessage;
    v->childspace=pl_childspacemessage;
    mp->text=msg;
    mp->minsize=Pt(wid, font->height);
    v->kind="message";
}
@

<<function [[pl_textmsg]]>>=
void pl_textmsg(Image *b, Rectangle r, Font *f, char *s){
    char *start, *end;	/* of line */
    Point where;
    int lwid, c, wid;
    where=r.min;
    wid=r.max.x-r.min.x;
    do{
        start=s;
        lwid=0;
        end=s;
        do{
            for(;*s!=' ' && *s!='\0';s=pl_nextrune(s)) lwid+=pl_runewidth(f, s);
            if(lwid>wid) break;
            end=s;
            for(;*s==' ';s=pl_nextrune(s)) lwid+=pl_runewidth(f, s);
        }while(*s!='\0');
        if(end==start)	/* can't even fit one word on line! */
            end=s;
        c=*end;
        *end='\0';
        string(b, where, display->black, ZP, f, start);
        *end=c;
        where.y+=font->height;
        s=end;
        while(*s==' ') s=pl_nextrune(s);
    }while(*s!='\0');
}
@


\subsection{Drawing}

<<function [[pl_drawmessage]]>>=
void pl_drawmessage(Panel *p){
    pl_textmsg(p->b, pl_box(p->b, p->r, PASSIVE), font, ((Message *)p->data)->text);
}
@

\subsection{Reacting}

<<function [[pl_hitmessage]]>>=
int pl_hitmessage(Panel *g, Mouse *m){
    USED(g, m);
    return 0;
}
@

<<function [[pl_typemessage]]>>=
void pl_typemessage(Panel *g, Rune c){
    USED(g, c);
}
@

\subsection{Packing methods}

<<function [[pl_getsizemessage]]>>=
Point pl_getsizemessage(Panel *p, Point children){
    Message *mp;
    USED(children);
    mp=p->data;
    return pl_boxsize(pl_foldsize(font, mp->text, mp->minsize.x), PASSIVE);
}
@

<<function [[pl_childspacemessage]]>>=
void pl_childspacemessage(Panel *p, Point *ul, Point *size){
    USED(p, ul, size);
}
@

<<function [[pl_foldsize]]>>=
Point pl_foldsize(Font *f, char *s, int wid){
    char *start, *end;	/* of line */
    Point size;
    int lwid, ewid;
    size=Pt(0,0);
    do{
        start=s;
        lwid=0;
        end=s;
        ewid=lwid;
        do{
            for(;*s!=' ' && *s!='\0';s=pl_nextrune(s)) lwid+=pl_runewidth(f, s);
            if(lwid>wid) break;
            end=s;
            ewid=lwid;
            for(;*s==' ';s=pl_nextrune(s)) lwid+=pl_runewidth(f, s);
        }while(*s!='\0');
        if(end==start){	/* can't even fit one word on line! */
            ewid=lwid;
            end=s;
        }
        if(ewid>size.x) size.x=ewid;
        size.y+=font->height;
        s=end;
        while(*s==' ') s=pl_nextrune(s);
    }while(*s!='\0');
    return size;
}
@


\section{Scrollbar}

<<struct [[Scroll]]>>=
struct Scroll{
    Point pos, size;
};
@

<<struct [[Scrollbar]]>>=
struct Scrollbar{
    int dir;		/* HORIZ or VERT */
    int lo, hi;		/* setting, in screen coordinates */
    int buttons;		/* saved mouse buttons for transmittal to scrollee */
    Rectangle interior;
    Point minsize;
};
@

\subsection{Initializing}

<<function [[plscrollbar]]>>=
Panel *plscrollbar(Panel *parent, int flags){
    Panel *v;
    v=pl_newpanel(parent, sizeof(Scrollbar));
    plinitscrollbar(v, flags);
    return v;
}
@


<<function [[plinitscrollbar]]>>=
void plinitscrollbar(Panel *v, int flags){
    Scrollbar *sp;
    sp=v->data;
    v->flags=flags|LEAF;
    v->pri=pl_priscrollbar;
    v->state=UP;
    v->draw=pl_drawscrollbar;
    v->hit=pl_hitscrollbar;
    v->type=pl_typescrollbar;
    v->getsize=pl_getsizescrollbar;
    v->childspace=pl_childspacescrollbar;
    v->setscrollbar=pl_setscrollbarscrollbar;
    switch(flags&PACK){
    case PACKN:
    case PACKS:
        sp->dir=HORIZ;
        sp->minsize=Pt(0, SBWID);
        v->flags|=FILLX;
        break;
    case PACKE:
    case PACKW:
        sp->dir=VERT;
        sp->minsize=Pt(SBWID, 0);
        v->flags|=FILLY;
        break;
    }
    sp->lo=0;
    sp->hi=0;
    v->kind="scrollbar";
}
@


\subsection{Drawing}

<<function [[pl_drawscrollbar]]>>=
void pl_drawscrollbar(Panel *p){
    Scrollbar *sp;
    sp=p->data;
    sp->interior=pl_outline(p->b, p->r, p->state);
    pl_sliderupd(p->b, sp->interior, sp->dir, sp->lo, sp->hi);
}
@

\subsection{Reacting}

<<function [[pl_hitscrollbar]]>>=
int pl_hitscrollbar(Panel *g, Mouse *m){
    int oldstate, pos, len, dy;
    Point ul, size;
    Scrollbar *sp;
    sp=g->data;
    ul=g->r.min;
    size=subpt(g->r.max, g->r.min);
    pl_interior(g->state, &ul, &size);
    oldstate=g->state;
    if(!(g->flags & USERFL) && (m->buttons&OUT || !ptinrect(m->xy, g->r))){
        m->buttons&=~OUT;
        g->state=UP;
        goto out;
    }
    if(sp->dir==HORIZ){
        pos=m->xy.x-ul.x;
        len=size.x;
    }
    else{
        pos=m->xy.y-ul.y;
        len=size.y;
    }
    if(pos<0) pos=0;
    else if(pos>len) pos=len;
    if(m->buttons&7){
        g->state=DOWN;
        sp->buttons=m->buttons;
        switch(m->buttons){
        case 1:
            dy=pos*(sp->hi-sp->lo)/len;
            pl_sliderupd(g->b, sp->interior, sp->dir, sp->lo-dy,
                sp->hi-dy);
            break;
        case 2:
            if(g->scrollee && g->scrollee->scroll)
                g->scrollee->scroll(g->scrollee, sp->dir,
                    m->buttons, pos, len);
            break;
        case 4:
            dy=pos*(sp->hi-sp->lo)/len;
            pl_sliderupd(g->b, sp->interior, sp->dir, sp->lo+dy,
                sp->hi+dy);
            break;
        }
    }
    else{
        if(!(sp->buttons&2) && g->state==DOWN && g->scrollee && g->scrollee->scroll)
            g->scrollee->scroll(g->scrollee, sp->dir, sp->buttons,
                pos, len);
        g->state=UP;
    }
out:
    if(oldstate!=g->state) pldraw(g, g->b);
    return g->state==DOWN;
}
@

<<function [[pl_typescrollbar]]>>=
void pl_typescrollbar(Panel *p, Rune c){
    USED(p, c);
}
@

\subsection{Packing methods}

<<function [[pl_getsizescrollbar]]>>=
Point pl_getsizescrollbar(Panel *p, Point children){
    USED(children);
    return pl_boxsize(((Scrollbar *)p->data)->minsize, p->state);
}
@

<<function [[pl_childspacescrollbar]]>>=
void pl_childspacescrollbar(Panel *p, Point *ul, Point *size){
    USED(p, ul, size);
}
@

<<function [[pl_setscrollbarscrollbar]]>>=
/*
 * Arguments lo, hi and len are in the scrollee's natural coordinates
 */
void pl_setscrollbarscrollbar(Panel *p, int lo, int hi, int len){
    Point ul, size;
    int mylen;
    Scrollbar *sp;
    sp=p->data;
    ul=p->r.min;
    size=subpt(p->r.max, p->r.min);
    pl_interior(p->state, &ul, &size);
    mylen=sp->dir==HORIZ?size.x:size.y;
    if(len==0) len=1;
    sp->lo=lo*mylen/len;
    sp->hi=hi*mylen/len;
    if(sp->lo<0) sp->lo=0;
    if(sp->lo>=mylen) sp->hi=mylen-1;
    if(sp->hi<=sp->lo) sp->hi=sp->lo+1;
    if(sp->hi>mylen) sp->hi=mylen;
    pldraw(p, p->b);
}
@


\section{Canvas}

<<struct [[Canvas]]>>=
struct Canvas{
    void (*draw)(Panel *);
    void (*hit)(Panel *, Mouse *);
};
@

\subsection{Initializing}

<<function [[plcanvas]]>>=
Panel *plcanvas(Panel *parent, int flags, void (*draw)(Panel *), void (*hit)(Panel *, Mouse *)){
    Panel *p;
    p=pl_newpanel(parent, sizeof(Canvas));
    plinitcanvas(p, flags, draw, hit);
    return p;
}
@


<<function [[plinitcanvas]]>>=
void plinitcanvas(Panel *v, int flags, void (*draw)(Panel *), void (*hit)(Panel *, Mouse *)){
    Canvas *c;
    v->flags=flags|LEAF;
    v->draw=pl_drawcanvas;
    v->hit=pl_hitcanvas;
    v->type=pl_typecanvas;
    v->getsize=pl_getsizecanvas;
    v->childspace=pl_childspacecanvas;
    v->kind="canvas";
    c=v->data;
    c->draw=draw;
    c->hit=hit;
}
@

\subsection{Drawing}

<<function [[pl_drawcanvas]]>>=
void pl_drawcanvas(Panel *p){
    Canvas *c;
    c=p->data;
    if(c->draw) c->draw(p);
}
@

\subsection{Reacting}

<<function [[pl_hitcanvas]]>>=
int pl_hitcanvas(Panel *p, Mouse *m){
    Canvas *c;
    c=p->data;
    if(c->hit) c->hit(p, m);
    return 0;
}
@

<<function [[pl_typecanvas]]>>=
void pl_typecanvas(Panel *p, Rune c){
    USED(p, c);
}
@


\subsection{Packing methods}

<<function [[pl_getsizecanvas]]>>=
Point pl_getsizecanvas(Panel *p, Point children){
    USED(p, children);
    return Pt(0,0);
}
@

<<function [[pl_childspacecanvas]]>>=
void pl_childspacecanvas(Panel *p, Point *ul, Point *size){
    USED(p, ul, size);
}
@

\chapter{Text Widgets}

% seen already Label and Text entry before.

\section{Text view}

<<struct [[Textview]]>>=
struct Textview{
    void (*hit)(Panel *, int, Rtext *); /* call back to user on hit */
    Rtext *text;			/* text */
    int yoffs;			/* offset of top of screen */
    Rtext *hitword;			/* text to hilite */
    Rtext *hitfirst;		/* first word in range select */
    int twid;			/* text width */
    int thgt;			/* text height */
    Point minsize;			/* smallest acceptible window size */
    int buttons;
};
@

\subsection{Initializing}

<<function [[pltextview]]>>=
Panel *pltextview(Panel *parent, int flags, Point minsize, Rtext *t, void (*hit)(Panel *, int, Rtext *)){
    Panel *v;
    v=pl_newpanel(parent, sizeof(Textview));
    plinittextview(v, flags, minsize, t, hit);
    return v;
}
@

<<function [[plinittextview]]>>=
void plinittextview(Panel *v, int flags, Point minsize, Rtext *t, void (*hit)(Panel *, int, Rtext *)){
    Textview *tp;
    tp=v->data;
    v->flags=flags|LEAF;
    v->state=UP;
    v->draw=pl_drawtextview;
    v->hit=pl_hittextview;
    v->type=pl_typetextview;
    v->getsize=pl_getsizetextview;
    v->childspace=pl_childspacetextview;
    v->kind="textview";
    v->pri=pl_pritextview;
    tp->hit=hit;
    tp->minsize=minsize;
    tp->text=t;
    tp->yoffs=0;
    tp->hitfirst=0;
    tp->hitword=0;
    v->scroll=pl_scrolltextview;
    v->snarf=pl_snarftextview;
    tp->twid=-1;
    v->scr.pos=Pt(0,0);
    v->scr.size=Pt(0,1);
}
@

\subsection{Drawing}

<<function [[pl_drawtextview]]>>=
void pl_drawtextview(Panel *p){
    int twid;
    Rectangle r;
    Textview *tp;
    tp=p->data;
    r=pl_outline(p->b, p->r, UP);
    twid=r.max.x-r.min.x;
    if(twid!=tp->twid){
        tp->twid=twid;
        tp->thgt=pl_rtfmt(tp->text, tp->twid);
        p->scr.size.y=tp->thgt;
    }
    p->scr.pos.y=tp->yoffs;
    pl_rtdraw(p->b, r, tp->text, tp->yoffs);
    pl_setscrpos(p, tp, r);
}
@

\subsection{Reacting}

<<function [[pl_hittextview]]>>=
int pl_hittextview(Panel *p, Mouse *m){
    Rtext *oldhitword, *oldhitfirst;
    int hitme, oldstate;
    Point ul, size;
    Textview *tp;

    tp=p->data;

    hitme=0;
    oldstate=p->state;
    oldhitword=tp->hitword;
    oldhitfirst=tp->hitfirst;
    if(oldhitword==oldhitfirst)
        pl_passon(oldhitword, m);
    if(m->buttons&OUT)
        p->state=UP;
    else if(m->buttons&7){
        p->state=DOWN;
        tp->buttons=m->buttons;
        if(oldhitword==0 || oldhitword->p==0 || (oldhitword->p->flags&REMOUSE)==0){
            ul=p->r.min;
            size=subpt(p->r.max, p->r.min);
            pl_interior(p->state, &ul, &size);
            tp->hitword=pl_rthit(tp->text, tp->yoffs, m->xy, ul);
            if(tp->hitword==0)
                if(oldhitword!=0 && oldstate==DOWN)
                    tp->hitword=oldhitword;
                else
                    tp->hitfirst=0;
            if(tp->hitword!=0 && oldstate!=DOWN)
                tp->hitfirst=tp->hitword;
        }
    }
    else{
        if(p->state==DOWN) hitme=1;
        p->state=UP;
    }
    if(tp->hitfirst!=oldhitfirst || tp->hitword!=oldhitword){
        plrtseltext(tp->text, tp->hitword, tp->hitfirst);
        pl_drawtextview(p);
        if(tp->hitword==tp->hitfirst)
            pl_passon(tp->hitword, m);
    }
    if(hitme && tp->hit && tp->hitword!=0 && tp->hitword==tp->hitfirst){
        plrtseltext(tp->text, 0, 0);
        pl_drawtextview(p);
        tp->hit(p, tp->buttons, tp->hitword);
        tp->hitword=0;
        tp->hitfirst=0;
    }
    return 0;
}
@

<<function [[pl_typetextview]]>>=
void pl_typetextview(Panel *g, Rune c){
    USED(g, c);
}
@

\subsection{Packing methods}

<<function [[pl_getsizetextview]]>>=
Point pl_getsizetextview(Panel *p, Point children){
    USED(children);
    return pl_boxsize(((Textview *)p->data)->minsize, p->state);
}
@

<<function [[pl_childspacetextview]]>>=
void pl_childspacetextview(Panel *g, Point *ul, Point *size){
    USED(g, ul, size);
}
@

\section{Completion}

\section{Rich text}

<<struct [[Rtext]]>>=
struct Rtext{
    int flags;		/* responds to hits? text selection? */
    void *user;		/* user data */
    int space;		/* how much space before, if no break */
    int indent;		/* how much space before, after a break */
    Image *b;		/* what to display, if nonzero */
    Panel *p;		/* what to display, if nonzero and b==0 */
    Font *font;		/* font in which to draw text */
    char *text;		/* what to display, if b==0 and p==0 */
    Rtext *next;		/* next piece */
    /* private below */
    Rtext *nextline;	/* links line to line */
    Rtext *last;		/* last, for append */
    Rectangle r;		/* where to draw, if origin were Pt(0,0) */
    int topy;		/* y coord of top of line */
    int wid;		/* not including space */
};
@

\subsection{Initializing}

<<function [[pl_rtnew]]>>=
Rtext *pl_rtnew(Rtext **t, int space, int indent, Image *b, Panel *p, Font *f, char *s, int flags, void *user){
    Rtext *new;
    new=pl_emalloc(sizeof(Rtext));
    new->flags=flags;
    new->user=user;
    new->space=space;
    new->indent=indent;
    new->b=b;
    new->p=p;
    new->font=f;
    new->text=s;
    new->next=0;
    new->nextline=0;
    new->r=Rect(0,0,0,0);
    if(*t)
        (*t)->last->next=new;
    else
        *t=new;
    (*t)->last=new;
    return new;
}
@

<<function [[plrtpanel]]>>=
Rtext *plrtpanel(Rtext **t, int space, int indent, Panel *p, void *user){
    return pl_rtnew(t, space, indent, 0, p, 0, 0, 1, user);
}
@

<<function [[plrtstr]]>>=
Rtext *plrtstr(Rtext **t, int space, int indent, Font *f, char *s, int flags, void *user){
    return pl_rtnew(t, space, indent, 0, 0, f, s, flags, user);
}
@

<<function [[plrtbitmap]]>>=
Rtext *plrtbitmap(Rtext **t, int space, int indent, Image *b, int flags, void *user){
    return pl_rtnew(t, space, indent, b, 0, 0, 0, flags, user);
}
@

<<function [[plrtfree]]>>=
void plrtfree(Rtext *t){
    Rtext *next;
    while(t){
        next=t->next;
        free(t);
        t=next;
    }
}
@

\subsection{Drawing}

<<constant [[PL_HOT]]>>=
#define PL_HOT		1
@
<<constant [[PL_SEL]]>>=
#define PL_SEL		2
@

<<function [[pl_rtdraw]]>>=
void pl_rtdraw(Image *b, Rectangle r, Rtext *t, int yoffs){
    static Image *backup;
    Point offs, lp;
    Rectangle dr;
    Image *bb;

    bb = b;
    if(backup==0 || backup->chan!=b->chan || rectinrect(r, backup->r)==0){
        freeimage(backup);
        backup=allocimage(display, bb->r, bb->chan, 0, DNofill);
    }
    if(backup)
        b=backup;
    pl_clr(b, r);
    lp=ZP;
    offs=subpt(r.min, Pt(0, yoffs));
    for(;t;t=t->next) if(!eqrect(t->r, Rect(0,0,0,0))){
        dr=rectaddpt(t->r, offs);
        if(dr.max.y>r.min.y
        && dr.min.y<r.max.y){
            if(t->b){
                draw(b, insetrect(dr, BORD), t->b, 0, t->b->r.min);
                if(t->flags&PL_HOT) border(b, dr, 1, display->black, ZP);
                if(t->flags&PL_SEL)
                    pl_highlight(b, dr);
            }
            else if(t->p){
                plmove(t->p, subpt(dr.min, t->p->r.min));
                pldraw(t->p, b);
                if(b!=bb)
                    pl_stuffbitmap(t->p, bb);
            }
            else{
                string(b, dr.min, display->black, ZP, t->font, t->text);
                if(t->flags&PL_SEL)
                    pl_highlight(b, dr);
                if(t->flags&PL_HOT){
                    if(lp.y+1 != dr.max.y)
                        lp = Pt(dr.min.x, dr.max.y-1);
                    line(b, lp, Pt(dr.max.x, dr.max.y-1),
                        Endsquare, Endsquare, 0,
                        display->black, ZP);
                    lp = Pt(dr.max.x, dr.max.y-1);
                    continue;
                }
            }
            lp=ZP;
        }
    }
    if(b!=bb)
        draw(bb, r, b, 0, r.min);
}
@

<<function [[pl_rtredraw]]>>=
/*
 * Rectangle r of Image b contains an image of Rtext t, offset by oldoffs.
 * Redraw the text to have offset yoffs.
 */
void pl_rtredraw(Image *b, Rectangle r, Rtext *t, int yoffs, int oldoffs){
    int dy, size;
    dy=oldoffs-yoffs;
    size=r.max.y-r.min.y;
    if(dy>=size || -dy>=size)
        pl_rtdraw(b, r, t, yoffs);
    else if(dy<0){
        pl_reposition(t, b, r.min,
            Rect(r.min.x, r.min.y-dy, r.max.x, r.max.y));
        pl_rtdraw(b, Rect(r.min.x, r.max.y+dy, r.max.x, r.max.y),
            t, yoffs+size+dy);
    }
    else if(dy>0){
        pl_reposition(t, b, Pt(r.min.x, r.min.y+dy),
            Rect(r.min.x, r.min.y, r.max.x, r.max.y-dy));
        pl_rtdraw(b, Rect(r.min.x, r.min.y, r.max.x, r.min.y+dy), t, yoffs);
    }
}
@

\subsection{Reacting}

<<function [[pl_rthit]]>>=
Rtext *pl_rthit(Rtext *t, int yoffs, Point p, Point ul){
    Rectangle r;
    Point lp;
    if(t==0) return 0;
    p.x-=ul.x;
    p.y+=yoffs-ul.y;
    while(t->nextline && t->nextline->topy<=p.y) t=t->nextline;
    lp=ZP;
    for(;t!=0;t=t->next){
        if(t->topy>p.y) return 0;
        r = t->r;
        if((t->flags&PL_HOT) != 0 && t->b == nil && t->p == nil){
            if(lp.y == r.max.y && lp.x < r.min.x)
                r.min.x=lp.x;
            lp=r.max;
        } else
            lp=ZP;
        if(ptinrect(p, r)) return t;
    }
    return 0;
}
@

\subsection{Packing methods}

\subsection{Other methods}

<<function [[plrtseltext]]>>=
void plrtseltext(Rtext *t, Rtext *s, Rtext *e){
    while(t){
        t->flags &= ~PL_SEL;
        t = t->next;
    }
    if(s==0 || e==0)
        return;
    for(t=s; t!=0 && t!=e; t=t->next)
        ;
    if(t==e){
        for(t=s; t!=e; t=t->next)
            t->flags |= PL_SEL;
    }else{
        for(t=e; t!=s; t=t->next)
            t->flags |= PL_SEL;
    }
    t->flags |= PL_SEL;
}
@

\chapter{Advanced Topics TODO}
\label{chap:advanced}

\section{copy/paste}
% called snarf/paste in plan9 terminology

<<[[Panel]] other methods>>=
char* (*snarf)(Panel *);			/* snarf text from panel */
void (*paste)(Panel *, char *);			/* paste text into panel */
@

<<[[pl_newpanel()]] set default methods>>=
v->snarf=nil;
v->paste=nil;
@


<<function [[plputsnarf]]>>=
void plputsnarf(char *s){
    int fd;

    if(s==0 || *s=='\0')
        return;
    if((fd=open("/dev/snarf", OWRITE|OTRUNC))>=0){
        write(fd, s, strlen(s));
        close(fd);
    }
}
@

<<function [[plgetsnarf]]>>=
char *plgetsnarf(void){
    int fd, n, r;
    char *s;

    if((fd=open("/dev/snarf", OREAD))<0)
        return nil;
    n=0;
    s=nil;
    for(;;){
        s=pl_erealloc(s, n+1024);
        if((r = read(fd, s+n, 1024)) <= 0)
            break;
        n += r;
    }
    close(fd);
    if(n <= 0){
        free(s);
        return nil;
    }
    s[n] = '\0';
    return s;
}
@

<<function [[plsnarf]]>>=
void plsnarf(Panel *p){
    char *s;

    if(p==0 || p->snarf==0)
        return;
    s=p->snarf(p);
    plputsnarf(s);
    free(s);
}
@

<<function [[plpaste]]>>=
void plpaste(Panel *p){
    char *s;

    if(p==0 || p->paste==0)
        return;
    if(s=plgetsnarf()){
        p->paste(p, s);
        free(s);
    }
}
@








\subsection{Widgets hooks}

<<function [[pl_snarfentry]]>>=
char *pl_snarfentry(Panel *p){
    Entry *ep;
    int n;

    if(p->flags&USERFL)	/* no snarfing from password entry */
        return nil;
    ep=p->data;
    n=ep->entp-ep->entry;
    if(n<=0) return nil;
    return smprint("%.*s", n, ep->entry);
}
@

<<function [[pl_pasteentry]]>>=
void pl_pasteentry(Panel *p, char *s){
    Entry *ep;
    char *e;
    int n, m;

    ep=p->data;
    n=ep->entp-ep->entry;
    m=strlen(s);
    e=pl_erealloc(ep->entry,n+m+SLACK);
    ep->entry=e;
    e+=n;
    strncpy(e, s, m);
    e+=m;
    *e='\0';
    ep->entp=ep->eent=e;
    pldraw(p, p->b);
}
@

<<constant [[SLACK]]>>=
#define	SLACK	7	/* enough for one extra rune and ◀ and a nul */
@



<<function [[pl_snarfedit]]>>=
char *pl_snarfedit(Panel *p){
    int s0, s1;
    Rune *t;
    t=pleget(p);
    plegetsel(p, &s0, &s1);
    if(t==0 || s0>=s1)
        return nil;
    return smprint("%.*S", s1-s0, t+s0);
}
@

<<function [[pl_pasteedit]]>>=
void pl_pasteedit(Panel *p, char *s){
    Rune *t;
    if(t=runesmprint("%s", s)){
        plepaste(p, t, runestrlen(t));
        free(t);
    }
}
@


\section{Rich text}

\section{Hooks}

<<[[Panel]] user fields>>=
int user;					/* available for user */
void *userp;					/* available for user */
@
% ex of use? adv topics?

\section{Advanced flags}

\subsection{[[FIXEDX]], [[FIXEDY]]}
\t seems dead

<<constant [[FIXEDX]]>>=
#define	FIXEDX	0x0400
@

<<constant [[FIXEDY]]>>=
#define	FIXEDY	0x0800
@

<<[[pl_sizereq()]] if [[FIXEDX]] or [[FIXEDY]]>>=
if(p->flags&FIXEDX) p->sizereq.x=p->fixedsize.x;
if(p->flags&FIXEDY) p->sizereq.y=p->fixedsize.y;
@

<<[[Panel]] extra public fields>>=
Point fixedsize;				/* size of Panel, if FIXED */
@

<<constant [[FIXED]]>>=
#define	FIXED	0x0c00		/* don't pass children's size requests through to parent */
@
% or of FIXEDX and FIXEDY?

\subsection{[[MAXX]], [[MAXY]]}

<<constant [[MAXX]]>>=
#define	MAXX	0x1000		/* make x size as big as biggest sibling's */
@
<<constant [[MAXY]]>>=
#define	MAXY	0x2000		/* make y size as big as biggest sibling's */
@

<<[[pl_sizereq()]] if [[MAXX]] or [[MAXY]]>>=
for(cp=p->child;cp;cp=cp->next){
    if(cp->flags&MAXX) cp->sizereq.x=maxsize.x;
    if(cp->flags&MAXY) cp->sizereq.y=maxsize.y;
}
@

\chapter{Advanced Widgets TODO}



\chapter{Conclusion}
\label{chap:conclusion}

\appendix

\chapter{Debugging}
\label{chap:debugging-appendix}

<<[[Panel]] debugging fields>>=
char *kind;					/* what kind of panel? */
@


<<function [[pl_print]]>>=
void pl_print(Panel *p){
    pl_ipprint(p, 0);
}
@

<<function [[pl_iprint]]>>=
void pl_iprint(int indent, char *fmt, ...){
    char buf[8192];
    va_list arg;

    memset(buf, '\t', indent);
    va_start(arg, fmt);
    write(1, buf, vsnprint(buf+indent, sizeof(buf)-indent, fmt, arg));
    va_end(arg);
}
@

<<function [[pl_ipprint]]>>=
void pl_ipprint(Panel *p, int n){
    Panel *c;
    char *place, *stick;

    pl_iprint(n, "%s (0x%.8x)\n", p->kind, p);
    pl_iprint(n, "  r=(%d %d, %d %d)\n",
        p->r.min.x, p->r.min.y, p->r.max.x, p->r.max.y);
    switch(p->flags&PACK){
    default: SET(place); break;
    case PACKN: place="n"; break;
    case PACKE: place="e"; break;
    case PACKS: place="s"; break;
    case PACKW: place="w"; break;
    }
    switch(p->flags&PLACE){
    default: SET(stick); break;
    case PLACECEN:	stick=""; break;
    case PLACES:	stick=" stick s"; break;
    case PLACEE:	stick=" stick e"; break;
    case PLACEW:	stick=" stick w"; break;
    case PLACEN:	stick=" stick n"; break;
    case PLACENE:	stick=" stick ne"; break;
    case PLACENW:	stick=" stick nw"; break;
    case PLACESE:	stick=" stick se"; break;
    case PLACESW:	stick=" stick sw"; break;
    }
    pl_iprint(n, "  place %s%s%s%s%s%s\n",
        place,
        p->flags&FILLX?" fill x":"",
        p->flags&FILLY?" fill y":"",
        stick,
        p->flags&EXPAND?" expand":"",
        p->flags&FIXED?" fixed":"");
    if(!eqpt(p->pad, Pt(0, 0))) pl_iprint(n, "  pad=%d,%d)\n", p->pad.x, p->pad.y);
    if(!eqpt(p->ipad, Pt(0, 0))) pl_iprint(n, "  ipad=%d,%d)\n", p->ipad.x, p->ipad.y);
    pl_iprint(n, "  size=(%d,%d), sizereq=(%d,%d)\n",
        p->size.x, p->size.y, p->sizereq.x, p->sizereq.y);
    for(c=p->child;c;c=c->next)
        pl_ipprint(c, n+1);
}
@

\chapter{Error Management}
\label{chap:error}

<<function [[pl_unexpected]]>>=
void pl_unexpected(Panel *g, char *rou){
    fprint(2, "%s called unexpectedly (%s %lux)\n", rou, g->kind, (ulong)g);
    abort();
}
@

<<function [[pl_drawerror]]>>=
void pl_drawerror(Panel *g){
    pl_unexpected(g, "draw");
}
@

<<function [[pl_hiterror]]>>=
int pl_hiterror(Panel *g, Mouse *m){
    USED(m);
    pl_unexpected(g, "hit");
    return 0;
}
@

<<function [[pl_typeerror]]>>=
void pl_typeerror(Panel *g, Rune c){
    USED(c);
    pl_unexpected(g, "type");
}
@

<<function [[pl_getsizeerror]]>>=
Point pl_getsizeerror(Panel *g, Point childsize){
    pl_unexpected(g, "getsize");
    return childsize;
}
@

<<function [[pl_childspaceerror]]>>=
void pl_childspaceerror(Panel *g, Point *ul, Point *size){
    USED(ul, size);
    pl_unexpected(g, "childspace");
}
@

<<function [[pl_scrollerror]]>>=
void pl_scrollerror(Panel *g, int dir, int button, int num, int den){
    USED(dir, button, num, den);
    pl_unexpected(g, "scroll");
}
@

<<function [[pl_setscrollbarerror]]>>=
void pl_setscrollbarerror(Panel *g, int top, int bot, int den){
    USED(top, bot, den);
    pl_unexpected(g, "setscrollbar");
}
@


\chapter{Utilities}
\label{chap:utilities}

\section{Memory management}

<<function [[pl_emalloc]]>>=
void *pl_emalloc(int n){
    void *v;

    v=mallocz(n, 1);
    if(v==0){
        fprint(2, "Can't malloc!\n");
        exits("no mem");
    }
    setmalloctag(v, getcallerpc(&n));
    return v;
}
@

<<function [[pl_erealloc]]>>=
void *pl_erealloc(void *v, int n)
{
    v=realloc(v, n);
    if(v==0){
        fprint(2, "Can't realloc!\n");
        exits("no mem");
    }
    setrealloctag(v, getcallerpc(&v));
    return v;
}
@

\chapter{Extra Code}

#include "Widgets_extra.nw"

%\chapter{Changelog}

\chapter*{Glossary}
\addcontentsline{toc}{chapter}{Glossary}
\label{sec:glossary}

\chapter*{Indexes}
\addcontentsline{toc}{chapter}{Index}


%src: wc.nw in noweb source
Here is a list of the identifiers used, and where they appear.
Underlined entries indicate the place of definition.
This index is generated automatically.

%\twocolumn does not work
\nowebindex

%\chapter{References} 
\addcontentsline{toc}{chapter}{References}

\bibliography{../docs/latex/Principia}
\bibliographystyle{alpha}

%******************************************************************************
% Postlude
%******************************************************************************

\end{document}
