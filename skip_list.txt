# -*- sh -*-

# currently parsing errors
dir: generators/lex

# for cg/cm/cq skipping

#dir_element: 386
dir_element: arm
dir_element: mips

# INCLUDE 
#todo? spread .h in respective dirs a la ocaml? or use OPAM model of findlib?

#dir: include
#dir: include/386
dir: include/arm
dir: include/mips

# LIBS

#dir: lib_core
#dir: lib_graphics
#dir: lib_math
#dir: lib_misc
#dir: lib_networking

# HARDWARE

#dir: machine
#when want to process 5i/
#file: include/386/8.out.h
#dir:machine/5i
dir:machine/vi

# ASSEMBLERS/COMPILERS/LINKERS

#dir: assemblers
#dir: assemblers/8a
# can't parse right now, and anyway generated code
file: assemblers/8a/y.tab.c
# there is a x.tab.h
file: assemblers/8a/y.tab.h
dir: assemblers/5a
dir: assemblers/va

#  ----- WHEN FOCUS ON ASSEMBLER -----
#file: include/thread.h
#file: include/keyboard.h
#file: include/mouse.h
#file: include/a.out.h

#dir: compilers
#dir: compilers/8c
file: compilers/cc/y.tab.c
dir: compilers/5c
dir: compilers/vc
dir: compilers/hoc

#  ----- WHEN FOCUS ON COMPILER -----
#file: include/mach.h
#file: include/a.out.h

#dir: generators

#dir: linkers
#dir: linkers/8l
dir: linkers/5l
dir: linkers/vl

#  ----- WHEN FOCUS ON LINKER -----
file: include/a.out.h
file: include/9p.h
file: include/ndb.h
file: include/tos.h

file: linkers/libmach/5.c
file: linkers/libmach/5db.c
file: linkers/libmach/5obj.c
file: linkers/libmach/v.c
file: linkers/libmach/vdb.c
file: linkers/libmach/vobj.c
file: linkers/libmach/mips2ureg.h

# OPERATING SYSTEM

#dir: kernel

#  ----- WHEN FOCUS ON KERNEL ----- because re-exported in kernel/lib/lib.h
##mostly all include/ ... which one we keep? why not just dir:include? just fcall?
#file: include/libc.h
#file: include/mach.h
#file: include/ip.h
#file: include/9p.h
#file: include/event.h
#file: include/thread.h
## use userspace channels definition
#file: include/keyboard.h
#file: include/mouse.h
#file: include/bio.h
#file: include/ndb.h
##file: include/fcall.h # actually needed
## introduce backward deps, anyway code not used by kernel
#file: include/disk.h
#file: include/string.h
## not used by kernel anyway
#file: include/ar.h
#file: include/auth.h
#file: include/bootexec.h
#file: include/complete.h
#file: include/ctype.h
#file: include/flate.h
#file: include/plumb.h
#file: include/regexp.h
#file: include/frame.h
#file: include/libsec.h
#file: include/mp.h
## contains dupes
#file: lib_graphics/libdraw/mouse.c
#file: lib_graphics/libmemdraw/iprint.c
#file: lib_graphics/libmemdraw/hwdraw.c
#dir_element: tests
#dir_element: scripts
## use libc
#file: lib_graphics/libdraw/alloc.c
#file: lib_graphics/libdraw/bytesperline.c
#file: lib_graphics/libdraw/scroll.c
#file: lib_graphics/libdraw/event.c
#file: lib_graphics/libdraw/getrect.c
#file: lib_graphics/libdraw/egetrect.c
#file: lib_graphics/libdraw/keyboard.c
#file: lib_graphics/libdraw/init.c
#file: lib_graphics/libdraw/newwindow.c
#file: lib_graphics/libdraw/menuhit.c
#file: lib_graphics/libdraw/emenuhit.c
#file: lib_graphics/libdraw/font.c
#file: lib_graphics/libdraw/mkfont.c
#file: lib_graphics/libdraw/openfont.c
#file: lib_graphics/libdraw/buildfont.c
#file: lib_graphics/libdraw/getsubfont.c
#file: lib_graphics/libdraw/readsubfont.c
#file: lib_graphics/libdraw/subfontname.c
#file: lib_graphics/libdraw/unloadimage.c
#file: lib_graphics/libdraw/writeimage.c
#file: lib_graphics/libdraw/writecolmap.c
#file: lib_graphics/libdraw/readcolmap.c
#file: lib_graphics/libdraw/writesubfont.c
#file: lib_graphics/libmemdraw/openmemsubfont.c
#file: lib_graphics/libmemdraw/write.c
##for codemap when want to filter user-level code.
#dir_element: user


file: kernel/devices/keyboard/386/latin1.c
file: kernel/devices/keyboard/386/latin1.h
# use libc stack, not kernel stack
dir: kernel/init/user/boot/
# huge files, contains binary code of /boot programs, for better codemap
file: kernel/conf/qemu.root.s
file: sys/src/9/pc/qemu.root.s


#dir: shells
file: shells/rc/y.tab.c

#dir: windows
dir: windows/plumb

# ----- WHEN FOCUS ON RIO -----
#file: include/ndb.h
#file: include/tos.h
#file: include/9p.h
#dir: kernel/devices/screen/user
##file: kernel/devices/screen/386/cga.c
## dupe with kernel/devices/screen/386/screen.c
#file: lib_graphics/libmemdraw/hwdraw.c
#dir_element: scripts
##dir_element: tests
#dir: windows/libpanel/tests
#dir: windows/apps/faces/tests/
## will generate some dupes, e.g. eresized, but nice to have apps
##dir: windows/apps
#dir: windows/apps/faces/
## have threadmain dupe with rio
#file: windows/apps/screenlock.c

# parse error
file: lib_graphics/libmemdraw/replmul.c


# DEVELOPER TOOLS

#dir: builders

#dir: debuggers
file: debuggers/acid/y.tab.c

#dir: profilers

#dir: editors
dir: editors/acme
dir: editors/sam

# APPLICATIONS

#dir: utilities

dir: browsers
dir: misc-apps

# MISC

dir: database
dir: graphics
dir: networking
dir: security

dir: sys

dir: BIG
dir: ROOT
dir: docs


# OLD AND OBSOLETE
# now that graph_code_c is better than graph_code_clang, no need .clang2
#file: compilers/cc/lexbody.clang2
# when focus on kernel:
#file: include/libc.h.clang2
#file: include/event.h.clang2
#file: include/mach.h.clang2
#file: include/ip.h.clang2
#file: include/9p.h.clang2
#file: include/thread.h.clang2
#file: include/bio.h.clang2
#file: include/ndb.h.clang2
#file: kernel/init/user/preboot/initcode.c.clang2
#file: linkers/libmach/v.c.clang2
#file: linkers/libmach/5.c.clang2
#file: linkers/libmach/8.c.clang2
