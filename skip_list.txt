# -*- sh -*-

# for cg/cm/cq skipping

# INCLUDE 
#less: spread .h in respective dirs a la ocaml? or use OPAM model of findlib?

#dir: include
#dir: include/386
dir: include/arm
dir: include/mips

# LIBS

#dir: lib_core
#dir: lib_graphics
#dir: lib_math
#dir: lib_misc
#dir: lib_networking

# HARDWARE

#dir: machine
#dir:machine/5i
dir:machine/vi

# ASSEMBLERS/COMPILERS/LINKERS

#dir: assemblers
#dir: assemblers/8a
dir: assemblers/5a
dir: assemblers/va

#dir: compilers
#dir: compilers/8c
dir: compilers/5c
dir: compilers/vc
dir: compilers/hoc


#dir: generators

#dir: linkers
#dir: linkers/8l
dir: linkers/5l
dir: linkers/vl

# OPERATING SYSTEM

#dir: kernel
#when focus on kernel, because re-exported in kernel/lib/lib.h
##file: include/libc.h
##file: include/mach.h
##file: include/ip.h
##file: include/9p.h
##file: include/event.h
##file: include/thread.h
##file: include/keyboard.h
##file: include/mouse.h
##file: include/bio.h
##file: include/ndb.h
###file: include/fcall.h # actually needed
### introduce backward deps, anyway code not used by kernel
##file: include/disk.h
##file: include/string.h
### not used by kernel anyway
##file: include/ar.h
##file: include/auth.h
##file: include/bootexec.h
##file: include/complete.h
##file: include/ctype.h
##file: include/flate.h
##file: include/plumb.h
##file: include/regexp.h
##file: include/frame.h
##file: include/libsec.h
##file: include/mp.h
file: kernel/devices/keyboard/386/latin1.c
file: kernel/devices/keyboard/386/latin1.h
# use libc stack, not kernel stack
dir: kernel/init/user/boot/
#for codemap when want to filter user-level code.
dir_element: user
#dir_element: 386
dir_element: arm
dir_element: mips
# huge files, contains binary code of /boot programs, for better codemap
file: kernel/conf/qemu.root.s
file: sys/src/9/pc/qemu.root.s


#dir: shells

#dir: windows
dir: windows/plumb
# when focus on rio
dir_element: tests
dir_element: scripts
dir: windows/apps
file: include/ndb.h
file: include/tos.h
file: include/9p.h
# parse error
file: lib_graphics/libmemdraw/replmul.c


# DEVELOPER TOOLS

#dir: builders

#dir: debuggers

#dir: profilers

#dir: editors
dir: editors/acme
dir: editors/sam

# APPLICATIONS

#dir: utilities

dir: browsers
dir: misc-apps

# MISC

dir: database
dir: graphics
dir: networking
dir: security

#dir: sys

dir: BIG
dir: ROOT
dir: docs


# OLD AND OBSOLETE
# now that graph_code_c is better than graph_code_clang, no need .clang2
#file: compilers/cc/lexbody.clang2
# when focus on kernel:
#file: include/libc.h.clang2
#file: include/event.h.clang2
#file: include/mach.h.clang2
#file: include/ip.h.clang2
#file: include/9p.h.clang2
#file: include/thread.h.clang2
#file: include/bio.h.clang2
#file: include/ndb.h.clang2
#file: kernel/init/user/preboot/initcode.c.clang2
#file: linkers/libmach/v.c.clang2
#file: linkers/libmach/5.c.clang2
#file: linkers/libmach/8.c.clang2
