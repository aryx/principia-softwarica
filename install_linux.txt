Install first pad's fork of kencc:
 - clone the fork-kencc repository
    $ git clone https://github.com/aryx/fork-kencc
 - see fork-kencc/install_linux.txt to install the required dependencies
   (mainly a gcc targeting 32 bits architecture)
 - compile kencc:
    $ cd fork-kencc/
    $ ./configure
    $ . ./env
    $ mk
    $ mk install
 => /path/to/fork-kencc/bin will contain 8a, 8c, and 8l (the cross 
    assembler, compiler, and linker needed to compile plan9) as well as
    many plan9 utilities (mk, rc, sed, etc.)

You can now go back to the source of plan9.
Adapt mkconfig and env.sh to your configuration, source it, and run mk
(which will then use 8a, 8c, 8l, rc, sed, etc.) from the root:
  $ cd /path/to/fork-plan9
  $ <edit mkconfig>
  $ <edit env.sh>
  $ . ./env.sh
  $ mk
  $ mk kernels
  $ mk install

This should compile all the plan9 programs and install the generated 
binaries in fork-plan9/ROOT/386/bin or fork-plan9/ROOT/arm/bin
depending on the target you chose in the mkconfig file.

Then you can build a disk image containing Plan9. First you need
to install the 'dosfstools' package. Then you can run:
  $ mk disk

Finally you can run and test this image under QEMU. First you
need to install the 'qemu-system-x86' package. Then you can run:
  $ mk run

Et voila!

To test the image with a Raspberry PI, you need to:
 TODO

You can also test the image on a real PC by installing the
kernel on a floppy disk and the plan9 image on a real disk:
 TODO
