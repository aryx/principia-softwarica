A critique of plan9 coding style! The practice of programming book
is incomplete or not up to date with latest in software engineering
and PL!

- abuse int instead of bool, errorcode, fdt, enums, ??
- inconsistent error code convention (ERROR_0, ERROR_1, ERROR_NEG1)
- abuse pointers for everything (option, list, hash, ref, ref_own)
- untyped collections, use generics for list, hashtbl, sets
- duplicated generic code (buffered IO, memory, conversions)
- duplicated code where could use more libraries (aa/, cpplib, )
  instead of sometimes abusing cpp (e.g. macdef uglyness), or copy pasting
  lots of code between different assembler, compiler, linker
- could use lex

- should use lang with ADTs, more precise types, 
- could use marshalling instead of implementing many specific binary formats
- could use deriving show instead of lots of hardcoded pretty printer
- should use GC when can instead of reimplementing it with reference counting

- use of globals when could instead take more parameters and return
  more results instead of returning void.
- dead functions, dead fields, dead structures 
- very few comments (but good man pages and good research articles,
  and the few comments are pretty good e.g. on opcode in rc)
