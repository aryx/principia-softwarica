A critique of plan9 coding style! "The Practice of Programming" book
is IMHO incomplete or not up to date with the latest development
in software engineering and programming language!

- abuse int instead of using bool, errorcode, fdt, enums
- inconsistent error code convention (ERROR_0, ERROR_1, ERROR_NEG1)
- abuse pointers for everything (option, list, hash, ref, ref_own)
- untyped collections, they should use generics for list, hashtbl, sets
- duplicated reusable code (buffered IO, memory, conversions)
- duplicated code where they could use more libraries (aa/, cpplib, )
  instead of sometimes abusing cpp (e.g. macdef uglyness), or copy pasting
  lots of code between different assembler, compiler, linker
- could use lex
- lots of abuse of continue, break, return, where there could just use
  if-then-else and the right condition

- should use a language with ADTs, more precise types, 
- could use marshalling instead of implementing many specific binary formats
- could use deriving show instead of lots of hardcoded pretty printer
- should use GC when can, instead of reimplementing it with reference counting

- use of lots of globals when could instead write functions that take
  more parameters and return more results (instead of returning void)
- dead functions, dead fields, dead structures
- very few comments (but good man pages and good research articles,
  and the few comments are pretty good e.g. on opcode in rc)

- no unit tests, very few tests
