</$objtype/mkfile

TARG=`{ls *.[cy] | sed '/\.tab\.c$/d;s/..$//'}
HFILES=/$objtype/include/u.h /sys/include/libc.h /sys/include/bio.h
BIN=/$objtype/bin
PROGS=${TARG:%=$O.%}
YFLAGS=-d

NOMK=awk|faces

cpuobjtype=`{sed -n 's/^O=//p' /$cputype/mkfile}
#DIRS=`{ls -l | sed '/^d/!d; s/.* //; /^('$NOMK')$/d'}

TOP=../../..

#note: aa and cc must be early in the list
DIRS=\
 $TOP/assemblers/aa\
 $TOP/assemblers/8a\
 $TOP/assemblers/5a\
 $TOP/assemblers/va\
 $TOP/assemblers/misc\
 $TOP/builders/mk\
 $TOP/compilers/cc\
 $TOP/compilers/8c\
 $TOP/compilers/5c\
 $TOP/compilers/vc\
 $TOP/compilers/hoc\
 $TOP/debuggers/db\
 $TOP/debuggers/acid\
 $TOP/debuggers/tracers\
 $TOP/debuggers/snap\
 $TOP/editors/sam\
 $TOP/editors/acme\
 $TOP/editors/misc\
 $TOP/generators/lex\
 $TOP/generators/yacc\
 $TOP/linkers/8l\
 $TOP/linkers/5l\
 $TOP/linkers/vl\
 $TOP/linkers/misc\
 $TOP/machine/5i\
 $TOP/machine/vi\
 $TOP/networking/ip\
 $TOP/networking/ndb\
 $TOP/networking/con\
 $TOP/networking/exportfs\
 $TOP/networking/misc\
 $TOP/profilers\
 $TOP/shells/rc\
 $TOP/shells/sh\
 $TOP/shells/misc\
 $TOP/windows/apps\
 $TOP/windows/rio\
 $TOP/windows/plumb\
 $TOP/utilities/archive/gzip\
 $TOP/utilities/archive/tar\
 $TOP/utilities/byte\
 $TOP/utilities/files\
 $TOP/utilities/misc\
 $TOP/utilities/pipe\
 $TOP/utilities/process\
 $TOP/utilities/string\
 $TOP/utilities/string/grep\
 $TOP/utilities/string/diff\
 $TOP/utilities/time\
 $TOP/kernel/files/user\
 $TOP/kernel/filesystems/user/dossrv\
 $TOP/kernel/filesystems/user/ramfs\
 $TOP/kernel/devices/mouse/user\
 $TOP/kernel/devices/screen/user/386\
 $TOP/lib_graphics/libdraw/tests\
 $TOP/lib_graphics/libmemdraw/tests\
 $TOP/interpreters/s9\
 $TOP/compilers/8c/tests\
 $TOP/linkers/8l/tests\

#TODO: pad: skipped for now
# $TOP/browsers/abaco\
# $TOP/browsers/mothra\
# $TOP/browsers/webfs\
# browsers: webcookies.c webfsget.c
# $TOP/graphics/jpg\
# graphics/mug.c
# misc-apps: games/sokoban ...
# security: auth/

#devices/storage/user
#devices/sys/user
#init/user
#memory/user
#syscalls/user



none:VQ:
	echo usage: mk cmds, dirs, all, install, installall, '$O'.cmd, cmd.install, or cmd.installall

cmds:V:	$PROGS

dirs:V:
	for(i in $DIRS) @{
		cd $i
		echo DIR: cmd/$i
		mk $MKFLAGS all
	}

all:V:	$PROGS dirs

#PAD: put $LDFLAGS and have weird behavior => I've removed it
^([$OS])\.(.*):R:	\2.\1
	$stem1^l -o $target $stem2.$stem1

.*\.[$OS]:R:	$HFILES

(.*)\.([$OS])'$':R:	\1.c
	$stem2^c $CFLAGS $stem1.c

&:n:	$O.&
	mv $O.$stem $stem

%.tab.h %.tab.c:	%.y
	$YACC $YFLAGS -s $stem $prereq

%.install:V: $BIN/%

$cpuobjtype._cp:	/bin/cp
	cp $prereq $target

%.safeinstall:	$O.% $cpuobjtype._cp
	test -e $BIN/$stem && mv $BIN/$stem $BIN/_$stem
	$cpuobjtype._cp $O.$stem $BIN/$stem

%.safeinstallall:
	for(objtype in $CPUS)
		mk $stem.safeinstall
	mk $stem.clean

$BIN/%:	$O.% $cpuobjtype._cp
	$cpuobjtype._cp $O.$stem $BIN/$stem

%.directories:V:
	for(i in $DIRS) @{
		cd $i
		echo mk $i
		mk $MKFLAGS $stem
	}

clean:V:	cleanfiles clean.directories

nuke:V:		cleanfiles nuke.directories

directories:V:	install.directories

cleanfiles:V:
	rm -f [$OS].out *.[$OS] y.tab.? y.debug y.output [$OS].$TARG [$OS].units.tab $TARG bc.c bc.tab.h units.tab.h units.c [$OS]._cp

%.clean:V:
	rm -f [$OS].$stem $stem.[$OS]

install:V:
	test -e $cpuobjtype._cp || cp /bin/cp $cpuobjtype._cp
	mk $MKFLAGS $TARG.install
	mk $MKFLAGS directories

installall:V:
	for(objtype in $CPUS)
		mk $MKFLAGS install

%.installall:	%.c
	test -e $cpuobjtype._cp || cp /bin/cp $cpuobjtype._cp
	for (objtype in $CPUS) {
		rfork e
		mk $stem.install &
	}
	wait
	rm -f $stem.[$OS] y.tab.? $stem.tab.? y.debug y.output [$OS].$stem bc.c bc.tab.h units.c

%.acid: %.$O $HFILES
	$CC $CFLAGS -a $stem.c >$target

$BIN/init:	$O.init
	cp $prereq /$objtype/init

%.update:V:
	update $stem.c /386/bin/$stem

compilers:V:
	for(i in ?c)
		if(! ~ $i cc rc) @{
			cd $i
			mk clean
			objtype=$cputype mk install
			mk clean
		}
	for(i in ?c)
		if(! ~ $i cc rc) @{
			cd $i
			mk clean
			mk installall
			mk clean
		}
