\section{[[include/]]}

\ifallcode
% defined in Linker.nw, but put here to avoid failwith in syncweb -to_tex
<<include/obj/ar.h>>=
@
\fi

\subsection{[[include/obj/common.out.h]]}
%pad: I created this file; its content was in many xxx/y.out.h before
\t but now that have aa.h, why need that? because used in 5c too?

%-------------------------------------------------------------

<<include/obj/common.out.h>>=

// The entities below were originally in some xxx/y.out.h, but were always
// the same in all architecture, hence the factorization below.

<<constant [[NSYM]]>>

<<struct [[ieee]]>>
typedef	struct ieee Ieee;
@


\subsection{[[include/obj/5.out.h]]}
%pad: was under 5c/ before, better under include/

% used by ar?
<<constant [[SYMDEF]](arm)>>=
/*
 * this is the ranlib header
 */
#define SYMDEF  "__.SYMDEF"
@
l

%-------------------------------------------------------------

<<include/obj/5.out.h>>=

// Many of the types below are serialized in the .5 object files,
// so take care when changing those types to not alter the order
// (or to recompile carefully everything).

<<enum [[Register]](arm)>>
<<constant [[R_NONE]](arm)>>

<<enum [[Fregister]](arm)>>

<<enum [[Opcode]](arm)>>

<<enum [[Operand_kind]](arm)>>

<<enum [[Sym_kind]](arm)>>

<<constant [[NSNAME]]>>

// Attributes
<<constant [[NOPROF]](arm)>>
<<constant [[DUPOK]](arm)>>

<<constant [[C_SCOND]](arm)>>
<<constant [[C_SBIT]](arm)>>
<<constant [[C_PBIT]](arm)>>
<<constant [[C_WBIT]](arm)>>
<<constant [[C_FBIT]](arm)>>
<<constant [[C_UBIT]](arm)>>

#define COND_ALWAYS 14

<<constant [[SYMDEF]](arm)>>
@


\section{[[assemblers/misc/]]}

\subsection{[[assemblers/misc/data2s.c]]}

<<function [[main]]>>=
void
main(int argc, char *argv[])
{
    Biobuf bin, bout;
    long len, slen;
    int c;

    if(argc != 2){
        fprint(2, "usage: data2s name\n");
        exits("usage");
    }
    Binit(&bin, 0, OREAD);
    Binit(&bout, 1, OWRITE);
    for(len=0; (c=Bgetc(&bin))!=Beof; len++){
        if((len&7) == 0)
            Bprint(&bout, "DATA %scode+%ld(SB)/8, $\"", argv[1], len);
        if(c)
            Bprint(&bout, "\\%uo", c);
        else
            Bprint(&bout, "\\z");
        if((len&7) == 7)
            Bprint(&bout, "\"\n");
    }
    slen = len;
    if(len & 7){
        while(len & 7){
            Bprint(&bout, "\\z");
            len++;
        }
        Bprint(&bout, "\"\n");
    }
    Bprint(&bout, "GLOBL %scode+0(SB), $%ld\n", argv[1], len);
    Bprint(&bout, "GLOBL %slen+0(SB), $4\n", argv[1]);
    Bprint(&bout, "DATA %slen+0(SB)/4, $%ld\n", argv[1], slen);
    exits(0);
}
@


%-------------------------------------------------------------

<<assemblers/misc/data2s.c>>=
#include <u.h>
#include <libc.h>
#include <bio.h>

<<function [[main]]>>
@


\section{[[assemblers/aa/]]}

\subsection{[[assemblers/aa/aa.h]]}
%pad: I created this file, was copy pasted in many a.h before

<<enum platform>>=
/*
 *  system-dependent stuff from ../cc/compat.c
 */
enum    /* keep in synch with ../cc/cc.h */
{
    Plan9   = 1<<0,
    Unix    = 1<<1,
};
@


%-------------------------------------------------------------

<<assemblers/aa/aa.h>>=
#include <u.h>
#include <libc.h>
#include <bio.h>
#include <ctype.h>

// The content of this file was originally copy pasted in 8a/a.h, 5a/a.h, etc.
// It was almost always the same in all archi, so I factorized the generic
// part in aa.h.; for the specifics do #include Y.out.h in Ya/a.h as followed:
//#include "8.out.h" in 8a/a.h
//#include "5.out.h" in 5a/a.h

#include <common.out.h>

#pragma lib "../aa/aa.a$O"

//----------------------------------------------------------------------------
// Data structures and constants
//----------------------------------------------------------------------------

typedef struct  Sym Sym;
typedef struct  Io Io;
typedef struct  Hist Hist;

<<constant [[MAXALIGN]]>>
<<constant [[NSYMB]]>>
<<constant [[BUFSIZ]]>>
<<constant [[HISTSZ]]>>
<<constant [[NINCLUDE]]>>
<<constant [[NHUNK]]>>
<<constant [[NHASH]]>>
<<constant [[STRINGSZ]]>>

<<constant [[EOF]]>>
<<constant [[IGN]]>>
<<function [[GETC]]>>


<<struct [[Sym]]>>
<<constant [[S]]>>

<<struct [[Fi]]>>

<<struct [[Io]]>>
<<constant [[I]]>>

<<constant [[FD_NONE]]>>

<<struct [[Htab]]>>

<<struct [[Hist]]>>
<<constant [[H]]>>

//----------------------------------------------------------------------------
// Globals
//----------------------------------------------------------------------------

// core algorithm
extern  Sym*  hash[NHASH];
extern  int   pass;
extern  long  pc;

extern  char* outfile;
extern  Biobuf obuf;
extern  char* pathname;
extern struct Fi fi;

extern struct Htab h[NSYM];
extern  int   symcounter;

extern  int   thechar;
extern  char* thestring;

// input files (used by lex.c)
extern  Io* iostack;
extern  Io* iofree;
extern  Io* ionext;

// cpp
extern  char* include[NINCLUDE];
extern  int   ninclude;
extern  char* Dlist[30];
extern  int   nDlist;

// lexer and lookup
extern  char symb[NSYMB];
extern  int  peekc;

// debugging support
extern  Hist*   hist;
extern  Hist*   ehist;
extern  long    lineno;

// debugging
extern  bool    debug[256];

// error management
extern  int nerrors;

// utils (used by mac.c)
extern  char*   hunk;
extern  long    nhunk;
extern  long    thunk;

//----------------------------------------------------------------------------
// Functions
//----------------------------------------------------------------------------

// lookup.c
Sym*    slookup(char*);
Sym*    lookup(void);
// this actually must be defined in lex.c; it depends on LNAME
void    syminit(Sym*);

// lexbody.c (used by lex.c and macbody.c)
void  pinit(char*);
void  pushio(void);
void  newio(void);
void  newfile(char*, int);
void  setinclude(char*);
int   escchar(int);
int  filbuf(void); // used by GETC()
int  getc(void);
int  getnsc(void);
void unget(int);

// macbody.c (used by lex.c and main.c)
void dodefine(char*);
void domacro(void);
void macexpand(Sym*, char*);

// hist.c
void linehist(char*, int);
void prfile(long l);

// float.c
void ieeedtod(Ieee *ieee, double native);

// error.c
void yyerror(char*, ...);
void  errorexit(void);

// utils.c
void* alloc(long n);
void* allocn(void *p, long on, long n);
int systemtype(int);
int pathchar(void);
int mywait(int*);
int mycreat(char*, int);


<<enum platform>>
@
%$


\subsection{[[assemblers/aa/utils.c]]}
%pad: I created this file, was in lexbody before, and I merged
% compat.c in it too.

%-------------------------------------------------------------

<<assemblers/aa/utils.c>>=
#include "aa.h"

<<function [[gethunk]]>>

<<function [[alloc]]>>

<<function [[allocn]]>>



<<function [[mycreat]]>>

<<function [[mywait]]>>

<<function [[systemtype]]>>

<<function [[pathchar]]>>


@

%\subsection{[[assemblers/aa/compat.c]]}
%pad: I deleted this file, merged in utils.c instead

<<function [[mycreat]]>>=
int
mycreat(char *n, int p)
{

    return create(n, 1, p);
}
@

<<function [[mywait]]>>=
int
mywait(int *s)
{
    int p;
    Waitmsg *w;

    if((w = wait()) == nil)
        return -1;
    else{
        p = w->pid;
        *s = 0;
        if(w->msg[0])
            *s = 1;
        free(w);
        return p;
    }
}
@


<<function [[systemtype]]>>=
int
systemtype(int sys)
{
    return sys & Plan9;
}
@

%less: on windows would be different, but we don't care
% int -> Rune?
<<function [[pathchar]]>>=
int
pathchar(void)
{
    return '/';
}
@


\subsection{[[assemblers/aa/globals.c]]}
%pad: I created this file, was in a.h before with EXTERN macro and included in lex.c

%<<global newflag>>

%-------------------------------------------------------------

<<assemblers/aa/globals.c>>=
#include "aa.h"

<<global [[hash]]>>
<<global [[pc]]>>
<<global [[outfile]]>>
<<global [[obuf]]>>
<<global [[pass]]>>
<<global [[pathname]]>>

<<global [[thechar]]>>
<<global [[thestring]]>>

<<global [[iostack]]>>
<<global [[iofree]]>>
<<global [[ionext]]>>
<<global [[fi]]>>

<<global [[symb]]>>
<<global [[peekc]]>>

<<global [[include]]>>
<<global [[ninclude]]>>
<<global [[Dlist]]>>
<<global [[nDlist]]>>

<<global [[h]]>>
<<global [[symcounter]]>>

<<global [[lineno]]>>
<<global [[hist]]>>
<<global [[ehist]]>>

<<global [[debug]]>>

<<global [[nerrors]]>>

<<global [[hunk]]>>
<<global [[nhunk]]>>
<<global [[thunk]]>>

@


\subsection{[[assemblers/aa/lookup.c]]}
%pad: I created this file, code was in lexbody.c before

<<assemblers/aa/lookup.c>>=
#include "aa.h"

// syminit() in lookup() depends on LNAME token defined in a.y,
// so it can't be defined here.

<<function [[slookup]]>>

<<function [[lookup]]>>
@

\subsection{[[assemblers/aa/error.c]]}
%pad: I created this file; its content was in utils.c and lexbody.c before.

%-------------------------------------------------------------

<<assemblers/aa/error.c>>=
#include "aa.h"

<<function [[errorexit]]>>

<<function [[yyerror]]>>

@

\subsection{[[assemblers/aa/float.c]]}
%pad: I created this file; its content was in lexbody.c before.

%-------------------------------------------------------------

<<assemblers/aa/float.c>>=
#include "aa.h"

<<function [[ieeedtod]]>>

@

\subsection{[[assemblers/aa/hist.c]]}
%pad: I created this file; its content was in lexbody.c before.

%-------------------------------------------------------------

<<assemblers/aa/hist.c>>=
#include "aa.h"

<<function [[linehist]]>>

<<function [[prfile]]>>

@

\subsection{[[assemblers/aa/lexbody.c]]}

%pad: was a 'lexbody' file included by aa and cc, but was ugly
% (and not codegraph friendly)

%-------------------------------------------------------------

<<assemblers/aa/lexbody.c>>=
#include "aa.h"

/*
 * common code for all the assemblers
 */

<<function [[setinclude]]>>

<<function [[pushio]]>>

<<function [[newio]]>>

<<function [[newfile]]>>

// this was hard to factorize in aa/, so this is copy pasted
// in each assembler (8a/, va/, etc)
//long
//yylex(void)
//{
//	int c, c1;
//	char *cp;
//	Sym *s;
//
//	c = peekc;
//	if(c != IGN) {
//		peekc = IGN;
//		goto l1;
//	}
//l0:
//	c = GETC();
//
//l1:
//	if(c == EOF) {
//		peekc = EOF;
//		return -1;
//	}
//	if(isspace(c)) {
//		if(c == '\n') {
//			lineno++;
//			return ';';
//		}
//		goto l0;
//	}
//	if(isalpha(c))
//		goto talph;
//	if(isdigit(c))
//		goto tnum;
//	switch(c)
//	{
//	case '\n':
//		lineno++;
//		return ';';
//
//	case '#':
//		domacro();
//		goto l0;
//
//	case '.':
//		c = GETC();
//		if(isalpha(c)) {
//			cp = symb;
//			*cp++ = '.';
//			goto aloop;
//		}
//		if(isdigit(c)) {
//			cp = symb;
//			*cp++ = '.';
//			goto casedot;
//		}
//		peekc = c;
//		return '.';
//
//	talph:
//	case '_':
//	case '@':
//		cp = symb;
//
//	aloop:
//		*cp++ = c;
//		c = GETC();
//		if(isalpha(c) || isdigit(c) || c == '_' || c == '$')
//			goto aloop;
//		*cp = 0;
//		peekc = c;
//		s = lookup();
//		if(s->macro) {
//			newio();
//			cp = ionext->b;
//			macexpand(s, cp);
//			pushio();
//			ionext->link = iostack;
//			iostack = ionext;
//			fi.p = cp;
//			fi.c = strlen(cp);
//			if(peekc != IGN) {
//				cp[fi.c++] = peekc;
//				cp[fi.c] = 0;
//				peekc = IGN;
//			}
//			goto l0;
//		}
//		if(s->type == 0)
//			s->type = LNAME;
//		if(s->type == LNAME ||
//		   s->type == LVAR ||
//		   s->type == LLAB) {
//			yylval.sym = s;
//			return s->type;
//		}
//		yylval.lval = s->value;
//		return s->type;
//
//	tnum:
//		cp = symb;
//		if(c != '0')
//			goto dc;
//		*cp++ = c;
//		c = GETC();
//		c1 = 3;
//		if(c == 'x' || c == 'X') {
//			c1 = 4;
//			c = GETC();
//		} else
//		if(c < '0' || c > '7')
//			goto dc;
//		yylval.lval = 0;
//		for(;;) {
//			if(c >= '0' && c <= '9') {
//				if(c > '7' && c1 == 3)
//					break;
//				yylval.lval <<= c1;
//				yylval.lval += c - '0';
//				c = GETC();
//				continue;
//			}
//			if(c1 == 3)
//				break;
//			if(c >= 'A' && c <= 'F')
//				c += 'a' - 'A';
//			if(c >= 'a' && c <= 'f') {
//				yylval.lval <<= c1;
//				yylval.lval += c - 'a' + 10;
//				c = GETC();
//				continue;
//			}
//			break;
//		}
//		goto ncu;
//
//	dc:
//		for(;;) {
//			if(!isdigit(c))
//				break;
//			*cp++ = c;
//			c = GETC();
//		}
//		if(c == '.')
//			goto casedot;
//		if(c == 'e' || c == 'E')
//			goto casee;
//		*cp = 0;
//		if(sizeof(yylval.lval) == sizeof(vlong))
//			yylval.lval = strtoll(symb, nil, 10);
//		else
//			yylval.lval = strtol(symb, nil, 10);
//
//	ncu:
//		while(c == 'U' || c == 'u' || c == 'l' || c == 'L')
//			c = GETC();
//		peekc = c;
//		return LCONST;
//
//	casedot:
//		for(;;) {
//			*cp++ = c;
//			c = GETC();
//			if(!isdigit(c))
//				break;
//		}
//		if(c == 'e' || c == 'E')
//			goto casee;
//		goto caseout;
//
//	casee:
//		*cp++ = 'e';
//		c = GETC();
//		if(c == '+' || c == '-') {
//			*cp++ = c;
//			c = GETC();
//		}
//		while(isdigit(c)) {
//			*cp++ = c;
//			c = GETC();
//		}
//
//	caseout:
//		*cp = 0;
//		peekc = c;
//		if(FPCHIP) {
//			yylval.dval = atof(symb);
//			return LFCONST;
//		}
//		yyerror("assembler cannot interpret fp constants");
//		yylval.lval = 1L;
//		return LCONST;
//
//	case '"':
//		memcpy(yylval.sval, nullgen.sval, sizeof(yylval.sval));
//		cp = yylval.sval;
//		c1 = 0;
//		for(;;) {
//			c = escchar('"');
//			if(c == EOF)
//				break;
//			if(c1 < sizeof(yylval.sval))
//				*cp++ = c;
//			c1++;
//		}
//		if(c1 > sizeof(yylval.sval))
//			yyerror("string constant too long");
//		return LSCONST;
//
//	case '\'':
//		c = escchar('\'');
//		if(c == EOF)
//			c = '\'';
//		if(escchar('\'') != EOF)
//			yyerror("missing '");
//		yylval.lval = c;
//		return LCONST;
//
//	case '/':
//		c1 = GETC();
//		if(c1 == '/') {
//			for(;;) {
//				c = GETC();
//				if(c == '\n')
//					goto l1;
//				if(c == EOF) {
//					yyerror("eof in comment");
//					errorexit();
//				}
//			}
//		}
//		if(c1 == '*') {
//			for(;;) {
//				c = GETC();
//				while(c == '*') {
//					c = GETC();
//					if(c == '/')
//						goto l0;
//				}
//				if(c == EOF) {
//					yyerror("eof in comment");
//					errorexit();
//				}
//				if(c == '\n')
//					lineno++;
//			}
//		}
//		break;
//
//	default:
//		return c;
//	}
//	peekc = c1;
//	return c;
//}



<<function [[getc]]>>

<<function [[getnsc]]>>

<<function [[unget]]>>

<<function [[escchar]]>>

<<function [[pinit]]>>

<<function [[filbuf]]>>

@
%$

%dead: was empty for aa so I removed them.
%<<function pragpack>>
%
%<<function pragvararg>>
%
%<<function pragfpround>>
%
%<<function pragprofile>>
%
%<<function pragincomplete>>


\subsection{[[assemblers/aa/macbody.c]]}

%pad: used to be #include "macbody" but I defactorized I think
% because originally codegraph did not like those include of .c
% Also it was ugly. They should factorize by using a library, not
% by abusing cpp.

%-------------------------------------------------------------

<<assemblers/aa/macbody.c>>=
#include "aa.h"

// forward decls
void	macund(void);
void	macdef(void);
void	macinc(void);
void	macprag(void);
void	maclin(void);
void	macif(int);
void	macend(void);

<<constant [[VARMAC]]>>

<<function [[getnsn]]>>

<<function [[getsym]]>>

<<function [[getsymdots]]>>

<<function [[getcom]]>>

<<function [[dodefine]]>>

<<global [[mactab]]>>

<<function [[domacro]]>>

<<function [[macund]]>>

<<constant [[NARG]]>>
<<function [[macdef]]>>

<<function [[macexpand]]>>

<<function [[macinc]]>>

<<function [[maclin]]>>

<<function [[macif]]>>

<<function [[macprag]]>>

<<function [[macend]]>>

@



\section{[[assemblers/5a/]]}

\subsection{[[assemblers/5a/a.h]]}

%dead: #define	NMACRO		10
%dead:
%    CLAST,
%    CMACARG,
%    CMACRO,
%    CPREPROC,


%-------------------------------------------------------------

<<assemblers/5a/a.h>>=
#include "../aa/aa.h"
#include <5.out.h>

//----------------------------------------------------------------------------
// Data structures and constants
//----------------------------------------------------------------------------

<<constant [[FPCHIP]](arm)>>

<<constant [[Always]](arm)>>

<<struct [[Gen]](arm)>>
typedef struct  Gen Gen;

//----------------------------------------------------------------------------
// Globals
//----------------------------------------------------------------------------

// globals.c
extern  Gen nullgen;

//----------------------------------------------------------------------------
// Functions
//----------------------------------------------------------------------------

// lex.c (for y.tab.c, main.c)
<<signature [[yylex]]>>
void    cinit(void);

// y.tab.c from a.y (for main.c)
int yyparse(void);

// obj.c (for main.c)
<<signature [[outcode]](arm)>>
void    outhist(void);

@


\subsection{[[assemblers/5a/globals.c]]}
%pad: I created this file, was in a.h before and defined via EXTERN trick in lex.c

%-------------------------------------------------------------

<<assemblers/5a/globals.c>>=
#include "a.h"

<<global [[nullgen]]>>
@


\subsection{[[assemblers/5a/lex.c]]}

%-------------------------------------------------------------

<<assemblers/5a/lex.c>>=
#include "a.h"
#include "y.tab.h"

<<struct [[Itab]](arm)>>

<<global [[itab]](arm)>>

<<function [[cinit]](arm)>>

<<function [[syminit]]>>

// now use aa.a8
//#include "../cc/lexbody"
//#include "../cc/compat"

// used to be in ../cc/lexbody and factorized between assemblers by
// using #include, but ugly, so I copy pasted the function for now
<<function [[yylex]]>>

// #include "../cc/macbody"
@

%$

\subsection{[[assemblers/5a/a.y]]}
% file overview is in Assembler.nw as it is interesting too

\subsection{[[assemblers/5a/obj.c]]}
%pad: I created this file; its content was originally in lex.c.

<<assemblers/5a/obj.c>>=
#include "a.h"

<<function [[zname]](arm)>>

<<function [[outopd]](arm)>>

<<global [[bcode]](arm)>>

<<function [[symidx_of_symopt]]>>

<<function [[outcode]](arm)>>

<<function [[outhist]](arm)>>

@

\subsection{[[assemblers/5a/main.c]]}
%pad: I created this file; its content was originally in lex.c.

%-------------------------------------------------------------

<<assemblers/5a/main.c>>=
#include "a.h"

// forward decls
int		assemble(char*);
void	cclean(void);

<<function [[main]](arm)>>

<<function [[assemble]]>>

<<function [[cclean]](arm)>>

@

\section{[[lib_core/libc/arm/]]}

\subsection{[[lib_core/libc/arm/div.s]]}

<<lib_core/libc/arm/div.s>>=
Q	= 0
N	= 1
D	= 2
CC	= 3
TMP	= 11

TEXT	save<>(SB), 1, $0
 MOVW	R(Q), 0(FP)
 MOVW	R(N), 4(FP)
 MOVW	R(D), 8(FP)
 MOVW	R(CC), 12(FP)

 MOVW	R(TMP), R(Q)		/* numerator */
 MOVW	20(FP), R(D)		/* denominator */
 CMP	$0, R(D)
 BNE	s1
 MOVW	-1(R(D)), R(TMP)	/* divide by zero fault */
s1:	RET

TEXT	rest<>(SB), 1, $0
 MOVW	0(FP), R(Q)
 MOVW	4(FP), R(N)
 MOVW	8(FP), R(D)
 MOVW	12(FP), R(CC)
/*
 * return to caller
 * of rest<>
 */
 MOVW	0(R13), R14
 ADD	$20, R13
 B	(R14)

TEXT	div<>(SB), 1, $0
 MOVW	$32, R(CC)
/*
 * skip zeros 8-at-a-time
 */
e1:
 AND.S	$(0xff<<24),R(Q), R(N)
 BNE	e2
 SLL	$8, R(Q)
 SUB.S	$8, R(CC)
 BNE	e1
 RET
e2:
 MOVW	$0, R(N)

loop:
/*
 * shift R(N||Q) left one
 */
 SLL	$1, R(N)
 CMP	$0, R(Q)
 ORR.LT	$1, R(N)
 SLL	$1, R(Q)

/*
 * compare numerator to denominator
 * if less, subtract and set quotent bit
 */
 CMP	R(D), R(N)
 ORR.HS	$1, R(Q)
 SUB.HS	R(D), R(N)
 SUB.S	$1, R(CC)
 BNE	loop
 RET

TEXT	_div(SB), 1, $16
 BL	save<>(SB)
 CMP	$0, R(Q)
 BGE	d1
 RSB	$0, R(Q), R(Q)
 CMP	$0, R(D)
 BGE	d2
 RSB	$0, R(D), R(D)
d0:
 BL	div<>(SB)		/* none/both neg */
 MOVW	R(Q), R(TMP)
 B	out
d1:
 CMP	$0, R(D)
 BGE	d0
 RSB	$0, R(D), R(D)
d2:
 BL	div<>(SB)		/* one neg */
 RSB	$0, R(Q), R(TMP)
 B	out

TEXT	_mod(SB), 1, $16
 BL	save<>(SB)
 CMP	$0, R(D)
 RSB.LT	$0, R(D), R(D)
 CMP	$0, R(Q)
 BGE	m1
 RSB	$0, R(Q), R(Q)
 BL	div<>(SB)		/* neg numerator */
 RSB	$0, R(N), R(TMP)
 B	out
m1:
 BL	div<>(SB)		/* pos numerator */
 MOVW	R(N), R(TMP)
 B	out

TEXT	_divu(SB), 1, $16
 BL	save<>(SB)
 BL	div<>(SB)
 MOVW	R(Q), R(TMP)
 B	out

TEXT	_modu(SB), 1, $16
 BL	save<>(SB)
 BL	div<>(SB)
 MOVW	R(N), R(TMP)
 B	out

out:
 BL	rest<>(SB)
 B	out
@
