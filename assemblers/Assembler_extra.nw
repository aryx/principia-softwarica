\section{[[include/]]}

\subsection*{[[include/common.out.h]]}

%-------------------------------------------------------------

<<include/common.out.h>>=

<<constant NSYM>>

// was originally in a xxx/y.out.h (but was always the same in all archi)
// hence the factorization here
/*
 * this is the simulated IEEE floating point
 */
typedef	struct	ieee	Ieee;
<<struct ieee>>
@


\section{[[include/arm/]]}

\subsection*{[[include/arm/5.out.h]]}

<<constant NREG(arm)>>=
#define	NREG		16
@
% used by 5c/ in char	reg[NREG+NFREG];
<<constant NFREG(arm)>>=
#define	NFREG		8
@



% less: transform in an enum? 
% note that it's not used by 8a, used by 8c/8l
<<constant NOPROF(arm)>>=
#define NOPROF		(1<<0)
@

% used by 8l (to allow override existing symbol? 8l option?)
<<constant DUPOK(arm)>>=
#define DUPOK		(1<<1)
@

%dead: #define	ALLTHUMBS	(1<<2)





<<constant FREGRET(arm)>>=
#define	FREGRET		0
@
<<constant FREGEXT(arm)>>=
#define	FREGEXT		7
@
<<constant FREGTMP(arm)>>=
#define	FREGTMP		15
@


<<constant C_SCOND(arm)>>=
/* scond byte */
#define	C_SCOND	((1<<4)-1)
@

<<constant C_SBIT(arm)>>=
#define	C_SBIT	(1<<4)
@

<<constant C_PBIT(arm)>>=
#define	C_PBIT	(1<<5)
@

<<constant C_WBIT(arm)>>=
#define	C_WBIT	(1<<6)
@

<<constant C_FBIT(arm)>>=
#define	C_FBIT	(1<<7)	/* psr flags-only */
@

<<constant C_UBIT(arm)>>=
#define	C_UBIT	(1<<7)	/* up bit */
@




% used by ar?
<<constant SYMDEF(arm)>>=
/*
 * this is the ranlib header
 */
#define	SYMDEF	"__.SYMDEF"
@


%-------------------------------------------------------------

<<include/arm/5.out.h>>=

<<constant NSNAME(arm)>>

<<constant NREG(arm)>>

<<constant NOPROF(arm)>>
<<constant DUPOK(arm)>>

<<constant REGRET(arm)>>
<<constant REGARG(arm)>>
/* compiler allocates R1 up as temps */
<<constant REGMIN(arm)>>
<<constant REGMAX(arm)>>
<<constant REGEXT(arm)>>
<<constant REGTMP(arm)>>
<<constant REGSB(arm)>>
<<constant REGSP(arm)>>
<<constant REGLINK(arm)>>
<<constant REGPC(arm)>>
<<constant REGTMPT(arm)>>

<<constant NFREG(arm)>>
<<constant FREGRET(arm)>>
<<constant FREGEXT(arm)>>
<<constant FREGTMP(arm)>>

/* compiler allocates register variables F0 up */
<<enum as(arm)>>

<<constant C_SCOND(arm)>>
<<constant C_SBIT(arm)>>
<<constant C_PBIT(arm)>>
<<constant C_WBIT(arm)>>
<<constant C_FBIT(arm)>>
<<constant C_UBIT(arm)>>

<<constant D_GOK(arm)>>
<<constant D_NONE(arm)>>
<<constant D_BRANCH(arm)>>
<<constant D_OREG(arm)>>
<<constant D_CONST(arm)>>
<<constant D_FCONST(arm)>>
<<constant D_SCONST(arm)>>
<<constant D_PSR(arm)>>
<<constant D_REG(arm)>>
<<constant D_FREG(arm)>>
<<constant D_FILE(arm)>>
<<constant D_OCONST(arm)>>
<<constant D_FILE1(arm)>>
<<constant D_SHIFT(arm)>>
<<constant D_FPCR(arm)>>
<<constant D_REGREG(arm)>>
<<constant D_ADDR(arm)>>
<<constant D_EXTERN(arm)>>
<<constant D_STATIC(arm)>>
<<constant D_AUTO(arm)>>
<<constant D_PARAM(arm)>>

<<constant SYMDEF(arm)>>
@


\section{[[assemblers/misc/]]}

\subsection*{[[assemblers/misc/data2s.c]]}

<<function main>>=
void
main(int argc, char *argv[])
{
    Biobuf bin, bout;
    long len, slen;
    int c;

    if(argc != 2){
        fprint(2, "usage: data2s name\n");
        exits("usage");
    }
    Binit(&bin, 0, OREAD);
    Binit(&bout, 1, OWRITE);
    for(len=0; (c=Bgetc(&bin))!=Beof; len++){
        if((len&7) == 0)
            Bprint(&bout, "DATA %scode+%ld(SB)/8, $\"", argv[1], len);
        if(c)
            Bprint(&bout, "\\%uo", c);
        else
            Bprint(&bout, "\\z");
        if((len&7) == 7)
            Bprint(&bout, "\"\n");
    }
    slen = len;
    if(len & 7){
        while(len & 7){
            Bprint(&bout, "\\z");
            len++;
        }
        Bprint(&bout, "\"\n");
    }
    Bprint(&bout, "GLOBL %scode+0(SB), $%ld\n", argv[1], len);
    Bprint(&bout, "GLOBL %slen+0(SB), $4\n", argv[1]);
    Bprint(&bout, "DATA %slen+0(SB)/4, $%ld\n", argv[1], slen);
    exits(0);
}
@


%-------------------------------------------------------------

<<assemblers/misc/data2s.c>>=
#include <u.h>
#include <libc.h>
#include <bio.h>

<<function main>>
@


\section{[[assemblers/aa/]]}

\subsection*{[[assemblers/aa/aa.h]]}


<<enum _anon_ (assemblers/aa/aa.h)>>=
/*
 *	system-dependent stuff from ../cc/compat.c
 */
enum	/* keep in synch with ../cc/cc.h */
{
    Plan9	= 1<<0,
    Unix	= 1<<1,
};
@


%-------------------------------------------------------------

<<assemblers/aa/aa.h>>=
#include <u.h>
#include <libc.h>
#include <bio.h>
#include <ctype.h>

// aa.h  is the generic part, the specific #include XXX/Y.out.h is done
// in Ya/a.h, e.g.:
//#include "386/8.out.h"
//#include "arm/5.out.h"
#include <common.out.h>

#pragma	lib	"../aa/aa.a$O"
//$

// was originally in a XXX/Y.out.h (and was always the same in all archi)
// most of the content below was originally copy pasted in 8a/a.h, 5a/a.h, etc

typedef	struct	Sym	Sym;
typedef struct  Io Io;
typedef	struct	Hist Hist;

<<constant MAXALIGN>>
<<constant NSYMB>>
<<constant BUFSIZ>>
<<constant HISTSZ>>
<<constant NINCLUDE>>
<<constant NHUNK>>
<<constant EOF>>
<<constant IGN>>
<<function GETC>>
<<constant NHASH>>
<<constant STRINGSZ>>


<<struct Sym>>
<<constant S>>

<<struct Fi>>
extern struct Fi fi;

<<struct Io>>
<<constant I>>

<<struct Htab>>
extern struct Htab h[NSYM];

// Gen

<<struct Hist>>
<<constant H>>



// was in a.h
extern	Sym*	hash[NHASH];
extern	Hist*	hist;
extern	char*	hunk;
extern	char*	include[NINCLUDE];
extern	Io*	iofree;
extern	Io*	ionext;
extern	Io*	iostack;
extern	long	lineno;
extern	int	nerrors;
extern	long	nhunk;
extern	int	ninclude;
extern	char*	outfile;
extern	long	pc;
extern	int	peekc;
extern	int	symcounter;
extern	char	symb[NSYMB];
extern	int	thechar;

// for macbody, was in a.h
extern	bool	debug[256];
extern	Hist*	ehist;
extern	int	newflag;
extern	long	thunk;

// for lexbody, was in a.h
int	getnsc(void);
void	gethunk(void);
void	yyerror(char*, ...);
void	linehist(char*, int);
Sym*	lookup(void);
void	syminit(Sym*);
int	filbuf(void);
void	domacro(void);
void	macexpand(Sym*, char*);

// for macbody, was in a.h
int	getc(void);
void	unget(int);
Sym*	slookup(char*);

// for macbody, was in lexbody
void pragpack(void);
void pragfpround(void);
void pragprofile(void);
void pragvararg(void);
void* alloc(long n);
void pragincomplete(void);
void* allocn(void *p, long on, long n);
void	pushio(void);
void	newio(void);
void	newfile(char*, int);
void	errorexit(void);

// from lexbody.c
void ieeedtod(Ieee *ieee, double native);

<<enum _anon_ (assemblers/aa/aa.h)>>
@
%$


\subsection*{[[assemblers/aa/compat.c]]}

<<function mycreat>>=
int
mycreat(char *n, int p)
{

    return create(n, 1, p);
}
@

<<function mywait>>=
int
mywait(int *s)
{
    int p;
    Waitmsg *w;

    if((w = wait()) == nil)
        return -1;
    else{
        p = w->pid;
        *s = 0;
        if(w->msg[0])
            *s = 1;
        free(w);
        return p;
    }
}
@


<<function systemtype>>=
int
systemtype(int sys)
{
    return sys & Plan9;
}
@

%-------------------------------------------------------------

<<assemblers/aa/compat.c>>=
#include "aa.h"


<<function mycreat>>

<<function mywait>>

<<function systemtype>>

<<function pathchar>>

@


\subsection*{[[assemblers/aa/globals.c]]}


%-------------------------------------------------------------

<<assemblers/aa/globals.c>>=
#include "aa.h"

<<global fi>>
<<global h>>

<<global debug>>
<<global hash>>
<<global Dlist>>
<<global nDlist>>
<<global ehist>>
<<global newflag>>
<<global hist>>
<<global hunk>>
<<global include>>
<<global iofree>>
<<global ionext>>
<<global iostack>>
<<global lineno>>
<<global nerrors>>
<<global nhunk>>
<<global ninclude>>
<<global outfile>>
<<global pass>>
<<global pathname>>
<<global pc>>
<<global peekc>>
<<global symcounter>>
<<global symb>>
<<global thechar>>
<<global thestring>>
<<global thunk>>
<<global obuf>>
@


\subsection*{[[assemblers/aa/lexbody.c]]}


%-------------------------------------------------------------

<<assemblers/aa/lexbody.c>>=
#include "aa.h"

void prfile(long l);

/*
 * common code for all the assemblers
 */

<<function alloc>>

<<function allocn>>

<<function setinclude>>

<<function errorexit>>

<<function pushio>>

<<function newio>>

<<function newfile>>

<<function slookup>>

<<function lookup>>

// this was hard to factorize in aa/, so this is copy pasted
// in each assembler (8a/, va/, etc)
//long
//yylex(void)
//{
//	int c, c1;
//	char *cp;
//	Sym *s;
//
//	c = peekc;
//	if(c != IGN) {
//		peekc = IGN;
//		goto l1;
//	}
//l0:
//	c = GETC();
//
//l1:
//	if(c == EOF) {
//		peekc = EOF;
//		return -1;
//	}
//	if(isspace(c)) {
//		if(c == '\n') {
//			lineno++;
//			return ';';
//		}
//		goto l0;
//	}
//	if(isalpha(c))
//		goto talph;
//	if(isdigit(c))
//		goto tnum;
//	switch(c)
//	{
//	case '\n':
//		lineno++;
//		return ';';
//
//	case '#':
//		domacro();
//		goto l0;
//
//	case '.':
//		c = GETC();
//		if(isalpha(c)) {
//			cp = symb;
//			*cp++ = '.';
//			goto aloop;
//		}
//		if(isdigit(c)) {
//			cp = symb;
//			*cp++ = '.';
//			goto casedot;
//		}
//		peekc = c;
//		return '.';
//
//	talph:
//	case '_':
//	case '@':
//		cp = symb;
//
//	aloop:
//		*cp++ = c;
//		c = GETC();
//		if(isalpha(c) || isdigit(c) || c == '_' || c == '$')
//			goto aloop;
//		*cp = 0;
//		peekc = c;
//		s = lookup();
//		if(s->macro) {
//			newio();
//			cp = ionext->b;
//			macexpand(s, cp);
//			pushio();
//			ionext->link = iostack;
//			iostack = ionext;
//			fi.p = cp;
//			fi.c = strlen(cp);
//			if(peekc != IGN) {
//				cp[fi.c++] = peekc;
//				cp[fi.c] = 0;
//				peekc = IGN;
//			}
//			goto l0;
//		}
//		if(s->type == 0)
//			s->type = LNAME;
//		if(s->type == LNAME ||
//		   s->type == LVAR ||
//		   s->type == LLAB) {
//			yylval.sym = s;
//			return s->type;
//		}
//		yylval.lval = s->value;
//		return s->type;
//
//	tnum:
//		cp = symb;
//		if(c != '0')
//			goto dc;
//		*cp++ = c;
//		c = GETC();
//		c1 = 3;
//		if(c == 'x' || c == 'X') {
//			c1 = 4;
//			c = GETC();
//		} else
//		if(c < '0' || c > '7')
//			goto dc;
//		yylval.lval = 0;
//		for(;;) {
//			if(c >= '0' && c <= '9') {
//				if(c > '7' && c1 == 3)
//					break;
//				yylval.lval <<= c1;
//				yylval.lval += c - '0';
//				c = GETC();
//				continue;
//			}
//			if(c1 == 3)
//				break;
//			if(c >= 'A' && c <= 'F')
//				c += 'a' - 'A';
//			if(c >= 'a' && c <= 'f') {
//				yylval.lval <<= c1;
//				yylval.lval += c - 'a' + 10;
//				c = GETC();
//				continue;
//			}
//			break;
//		}
//		goto ncu;
//
//	dc:
//		for(;;) {
//			if(!isdigit(c))
//				break;
//			*cp++ = c;
//			c = GETC();
//		}
//		if(c == '.')
//			goto casedot;
//		if(c == 'e' || c == 'E')
//			goto casee;
//		*cp = 0;
//		if(sizeof(yylval.lval) == sizeof(vlong))
//			yylval.lval = strtoll(symb, nil, 10);
//		else
//			yylval.lval = strtol(symb, nil, 10);
//
//	ncu:
//		while(c == 'U' || c == 'u' || c == 'l' || c == 'L')
//			c = GETC();
//		peekc = c;
//		return LCONST;
//
//	casedot:
//		for(;;) {
//			*cp++ = c;
//			c = GETC();
//			if(!isdigit(c))
//				break;
//		}
//		if(c == 'e' || c == 'E')
//			goto casee;
//		goto caseout;
//
//	casee:
//		*cp++ = 'e';
//		c = GETC();
//		if(c == '+' || c == '-') {
//			*cp++ = c;
//			c = GETC();
//		}
//		while(isdigit(c)) {
//			*cp++ = c;
//			c = GETC();
//		}
//
//	caseout:
//		*cp = 0;
//		peekc = c;
//		if(FPCHIP) {
//			yylval.dval = atof(symb);
//			return LFCONST;
//		}
//		yyerror("assembler cannot interpret fp constants");
//		yylval.lval = 1L;
//		return LCONST;
//
//	case '"':
//		memcpy(yylval.sval, nullgen.sval, sizeof(yylval.sval));
//		cp = yylval.sval;
//		c1 = 0;
//		for(;;) {
//			c = escchar('"');
//			if(c == EOF)
//				break;
//			if(c1 < sizeof(yylval.sval))
//				*cp++ = c;
//			c1++;
//		}
//		if(c1 > sizeof(yylval.sval))
//			yyerror("string constant too long");
//		return LSCONST;
//
//	case '\'':
//		c = escchar('\'');
//		if(c == EOF)
//			c = '\'';
//		if(escchar('\'') != EOF)
//			yyerror("missing '");
//		yylval.lval = c;
//		return LCONST;
//
//	case '/':
//		c1 = GETC();
//		if(c1 == '/') {
//			for(;;) {
//				c = GETC();
//				if(c == '\n')
//					goto l1;
//				if(c == EOF) {
//					yyerror("eof in comment");
//					errorexit();
//				}
//			}
//		}
//		if(c1 == '*') {
//			for(;;) {
//				c = GETC();
//				while(c == '*') {
//					c = GETC();
//					if(c == '/')
//						goto l0;
//				}
//				if(c == EOF) {
//					yyerror("eof in comment");
//					errorexit();
//				}
//				if(c == '\n')
//					lineno++;
//			}
//		}
//		break;
//
//	default:
//		return c;
//	}
//	peekc = c1;
//	return c;
//}



<<function getc>>

<<function getnsc>>

<<function unget>>

<<function escchar>>

<<function pinit>>

<<function filbuf>>

<<function yyerror>>

<<function prfile>>

<<function ieeedtod>>
@
%$

%<<function pragpack>>
%
%<<function pragvararg>>
%
%<<function pragfpround>>
%
%<<function pragprofile>>
%
%<<function pragincomplete>>


\subsection*{[[assemblers/aa/macbody.c]]}


%-------------------------------------------------------------

<<assemblers/aa/macbody.c>>=
#include "aa.h"

void	macund(void);
void	macdef(void);
void	macinc(void);
void	macprag(void);
void	maclin(void);
void	macif(int);
void	macend(void);

<<constant VARMAC>>

<<function getnsn>>

<<function getsym>>

<<function getsymdots>>

<<function getcom>>

<<function dodefine>>

<<global mactab>>

<<function domacro>>

<<function macund>>

<<constant NARG>>
<<function macdef>>

<<function macexpand>>

<<function macinc>>

<<function maclin>>

<<function macif>>

<<function macprag>>

<<function macend>>

<<function linehist>>

<<function gethunk>>
@



\section{[[assemblers/5a/]]}

\subsection*{[[assemblers/5a/a.h]]}

%dead: #define	NMACRO		10
<<constant Always(arm)>>=
#define    Always 14
//Never = 15
@

%dead:
%    CLAST,
%    CMACARG,
%    CMACRO,
%    CPREPROC,


%-------------------------------------------------------------

<<assemblers/5a/a.h>>=
#include "../aa/aa.h"
#include "arm/5.out.h"

typedef	struct	Gen	Gen;

<<constant FPCHIP(arm)>>

<<constant Always(arm)>>

<<struct Gen(arm)>>

extern	char*	Dlist[30];
extern	int	nDlist;
extern	Gen	nullgen;
extern	int	pass;
extern	char*	pathname;
extern	char*	thestring;
extern	Biobuf	obuf;

// for a.y
long	yylex(void);
void	outcode(int, int, Gen*, int, Gen*);

int	escchar(int);
//Sym*	getsym(void);

// for lexbody
void	setinclude(char*);
void*	allocn(void*, long, long);
void	errorexit(void);
Sym*	slookup(char*);
void	pinit(char*);
void	ieeedtod(Ieee*, double);
void	dodefine(char*);
void	yyerror(char*, ...);
int	yyparse(void);

// for macbody
int	getc(void);
void	unget(int);
void	pushio(void);
void	newio(void);
void	newfile(char*, int);

int	mywait(int*);
int	mycreat(char*, int);
int	systemtype(int);
int	pathchar(void);


// TODO remove?
void*	alloc(long);
Sym*	lookup(void);
void	syminit(Sym*);
int	getnsc(void);
void	cinit(void);
void	cclean(void);
void	zname(char*, int, int);
void	zaddr(Gen*, int);
int	filbuf(void);
void	domacro(void);
void	macund(void);
void	macdef(void);
void	macexpand(Sym*, char*);
void	macinc(void);
void	maclin(void);
void	macprag(void);
void	macif(int);
void	macend(void);
void	outhist(void);
void	prfile(long);
void	linehist(char*, int);
void	gethunk(void);
int	assemble(char*);

@


\subsection*{[[assemblers/5a/globals.c]]}

%-------------------------------------------------------------

<<assemblers/5a/globals.c>>=
#include "a.h"

<<global nullgen(arm)>>
@


\subsection*{[[assemblers/5a/lex.c]]}

%-------------------------------------------------------------

<<assemblers/5a/lex.c>>=
#include "a.h"
#include "y.tab.h"

void	cinit(void);
int		assemble(char*);
void	cclean(void);
void	outhist(void);

<<function main(arm)>>

<<function assemble(arm)>>

<<global itab(arm)>>

<<function cinit(arm)>>

<<function syminit>>

<<function cclean(arm)>>

<<function zname(arm)>>

<<function zaddr(arm)>>

<<global bcode(arm)>>

<<function outcode(arm)>>

<<function outhist(arm)>>

// now use aa.a8
//#include "../cc/lexbody"
//#include "../cc/compat"

// used to be in ../cc/lexbody and factorized between assemblers by
// using #include, but ugly, so I copy pasted the function for now
<<function yylex(arm)>>

// #include "../cc/macbody"
@

%$


\section{Old Text}

% see my assembler in ml I wrote a long time ago! in xix-assembler/?

% the many different addressing modes. 
%Actually I think 8a allows
% more than what is allowed (optab handles the ugly restrictions
% of Intel?)


<<enum as(x86)>>=
// coupling: with 8c/enam.c (and 8l/obj.c#optab?)
enum opcode_kind
{
    AXXX,

    AAAA,
    AAAD,
    AAAM,
    AAAS,
    AADCB,
    AADCL,
    AADCW,
    AADDB,
    AADDL,
    AADDW,
    AADJSP,
    AANDB,
    AANDL,
    AANDW,
    AARPL,
    ABOUNDL,
    ABOUNDW,
    ABSFL,
    ABSFW,
    ABSRL,
    ABSRW,
    ABTL,
    ABTW,
    ABTCL,
    ABTCW,
    ABTRL,
    ABTRW,
    ABTSL,
    ABTSW,

    ABYTE, //

    ACALL, //

    ACLC,
    ACLD,

    ACLI, //

    ACLTS,
    ACMC,

    ACMPB, //
    ACMPL,
    ACMPW,

    ACMPSB,
    ACMPSL,
    ACMPSW,
    ADAA,
    ADAS,

    ADATA, //


    ADECB, //
    ADECL,
    ADECW,

    ADIVB, //
    ADIVL,
    ADIVW,

    AENTER, //

    AGLOBL, //

    AGOK, //?

    AHISTORY, // for ?

    AHLT, //

    AIDIVB,
    AIDIVL,
    AIDIVW,
    AIMULB,
    AIMULL,
    AIMULW,

    AINB, //
    AINL,
    AINW,

    AINCB, //
    AINCL,
    AINCW,

    AINSB,
    AINSL,
    AINSW,
    AINT,
    AINTO,
    AIRETL,
    AIRETW,

    AJCC, //
    AJCS,
    AJCXZ,
    AJEQ,
    AJGE,
    AJGT,
    AJHI,
    AJLE,
    AJLS,
    AJLT,
    AJMI,

    AJMP, //

    AJNE,

    AJOC,
    AJOS,
    AJPC,
    AJPL,
    AJPS,
    ALAHF,
    ALARL,
    ALARW,
    ALEAL,
    ALEAW,
    ALEAVEL,
    ALEAVEW,

    ALOCK, //

    ALODSB, //
    ALODSL,
    ALODSW,

    ALONG, //

    ALOOP,
    ALOOPEQ,
    ALOOPNE,
    ALSLL,
    ALSLW,

    AMOVB, //
    AMOVL,
    AMOVW,

    AMOVBLSX,
    AMOVBLZX,
    AMOVBWSX,
    AMOVBWZX,
    AMOVWLSX,
    AMOVWLZX,
    AMOVSB,
    AMOVSL,
    AMOVSW,

    AMULB, //
    AMULL,
    AMULW,

    ANAME, // seems important

    ANEGB, //
    ANEGL,
    ANEGW,

    ANOP, //

    ANOTB, //
    ANOTL,
    ANOTW,

    AORB, //
    AORL,
    AORW,

    AOUTB, //
    AOUTL,
    AOUTW,

    AOUTSB,
    AOUTSL,
    AOUTSW,

    APOPAL,
    APOPAW,
    APOPFL,
    APOPFW,
    APOPL,
    APOPW,
    APUSHAL,
    APUSHAW,
    APUSHFL,
    APUSHFW,
    APUSHL,
    APUSHW,
    ARCLB,
    ARCLL,
    ARCLW,
    ARCRB,
    ARCRL,
    ARCRW,

    AREP,

    AREPN,

    ARET, //

    AROLB,
    AROLL,
    AROLW,
    ARORB,
    ARORL,
    ARORW,
    ASAHF,
    ASALB,
    ASALL,
    ASALW,
    ASARB,
    ASARL,
    ASARW,
    ASBBB,
    ASBBL,
    ASBBW,
    ASCASB,
    ASCASL,
    ASCASW,
    ASETCC,
    ASETCS,
    ASETEQ,
    ASETGE,
    ASETGT,
    ASETHI,
    ASETLE,
    ASETLS,
    ASETLT,
    ASETMI,
    ASETNE,
    ASETOC,
    ASETOS,
    ASETPC,
    ASETPL,
    ASETPS,
    ACDQ,
    ACWD,
    ASHLB,
    ASHLL,
    ASHLW,
    ASHRB,
    ASHRL,
    ASHRW,
    ASTC,
    ASTD,
    ASTI,

    ASTOSB, //
    ASTOSL,
    ASTOSW,

    ASUBB, //
    ASUBL,
    ASUBW,

    ASYSCALL, // !!!!!!

    ATESTB,
    ATESTL,
    ATESTW,

    ATEXT, // procedure/function TODO rename to AFUNC?

    AVERR,
    AVERW,
    AWAIT,
    AWORD,

    AXCHGB, //
    AXCHGL,
    AXCHGW,

    AXLAT,
    AXORB,
    AXORL,
    AXORW,

    AFMOVB,
    AFMOVBP,
    AFMOVD,
    AFMOVDP,
    AFMOVF,
    AFMOVFP,
    AFMOVL,
    AFMOVLP,
    AFMOVV,
    AFMOVVP,
    AFMOVW,
    AFMOVWP,
    AFMOVX,
    AFMOVXP,

    AFCOMB,
    AFCOMBP,
    AFCOMD,
    AFCOMDP,
    AFCOMDPP,
    AFCOMF,
    AFCOMFP,
    AFCOML,
    AFCOMLP,
    AFCOMW,
    AFCOMWP,
    AFUCOM,
    AFUCOMP,
    AFUCOMPP,

    AFADDDP,
    AFADDW,
    AFADDL,
    AFADDF,
    AFADDD,

    AFMULDP,
    AFMULW,
    AFMULL,
    AFMULF,
    AFMULD,

    AFSUBDP,
    AFSUBW,
    AFSUBL,
    AFSUBF,
    AFSUBD,

    AFSUBRDP,
    AFSUBRW,
    AFSUBRL,
    AFSUBRF,
    AFSUBRD,

    AFDIVDP,
    AFDIVW,
    AFDIVL,
    AFDIVF,
    AFDIVD,

    AFDIVRDP,
    AFDIVRW,
    AFDIVRL,
    AFDIVRF,
    AFDIVRD,

    AFXCHD,
    AFFREE,

    AFLDCW,
    AFLDENV,
    AFRSTOR,
    AFSAVE,
    AFSTCW,
    AFSTENV,
    AFSTSW,

    AF2XM1,
    AFABS,
    AFCHS,
    AFCLEX,
    AFCOS,
    AFDECSTP,
    AFINCSTP,
    AFINIT,
    AFLD1,
    AFLDL2E,
    AFLDL2T,
    AFLDLG2,
    AFLDLN2,
    AFLDPI,
    AFLDZ,
    AFNOP,
    AFPATAN,
    AFPREM,
    AFPREM1,
    AFPTAN,
    AFRNDINT,
    AFSCALE,
    AFSIN,
    AFSINCOS,
    AFSQRT,
    AFTST,
    AFXAM,
    AFXTRACT,
    AFYL2X,
    AFYL2XP1,

    AEND, // ??

    ADYNT,
    AINIT,

    ASIGNAME,

    AFCOMI,
    AFCOMIP,
    AFUCOMI,
    AFUCOMIP,
    ACMPXCHGB,
    ACMPXCHGL,
    ACMPXCHGW,

    /* conditional move */
    ACMOVLCC,
    ACMOVLCS,
    ACMOVLEQ,
    ACMOVLGE,
    ACMOVLGT,
    ACMOVLHI,
    ACMOVLLE,
    ACMOVLLS,
    ACMOVLLT,
    ACMOVLMI,
    ACMOVLNE,
    ACMOVLOC,
    ACMOVLOS,
    ACMOVLPC,
    ACMOVLPL,
    ACMOVLPS,
    ACMOVWCC,
    ACMOVWCS,
    ACMOVWEQ,
    ACMOVWGE,
    ACMOVWGT,
    ACMOVWHI,
    ACMOVWLE,
    ACMOVWLS,
    ACMOVWLT,
    ACMOVWMI,
    ACMOVWNE,
    ACMOVWOC,
    ACMOVWOS,
    ACMOVWPC,
    ACMOVWPL,
    ACMOVWPS,

    AFCMOVCC,
    AFCMOVCS,
    AFCMOVEQ,
    AFCMOVHI,
    AFCMOVLS,
    AFCMOVNE,
    AFCMOVNU,
    AFCMOVUN,

    /* add new operations here. nowhere else. here. */
    ALAST
};
@


\section{[[include/386/]]}

\subsection*{[[include/386/8.out.h]]}


% todo: transform in an enum? 
% note that it's not used by 8a, used by 8c/8l
<<constant NOPROF(x86)>>=
#define NOPROF	(1<<0)
@

% used by 8l (to allow override existing symbol? 8l option?)
<<constant DUPOK(x86)>>=
#define DUPOK	(1<<1)
@

% dead?
<<constant NOSPLIT(x86)>>=
#define NOSPLIT	(1<<2)
@


% used by ar?
<<constant SYMDEF(x86)>>=
/*
 * this is the ranlib header
 */
#define	SYMDEF	"__.SYMDEF"
@


%-------------------------------------------------------------

<<include/386/8.out.h>>=

<<constant NSNAME(x86)>>
<<constant NOPROF(x86)>>
<<constant DUPOK(x86)>>
<<constant NOSPLIT(x86)>>

<<enum as(x86)>>

<<enum reg(x86)>>

<<enum misc2(x86)>>
<<enum misc3(x86)>>

<<constant SYMDEF(x86)>>
@





\section{[[assemblers/8a/]]}

\subsection*{[[assemblers/8a/a.h]]}

%-------------------------------------------------------------

<<assemblers/8a/a.h>>=
#include "../aa/aa.h"
#include "386/8.out.h"

typedef	struct	Gen  Gen;
typedef	struct	Gen2 Gen2;

<<constant FPCHIP(x86)>>

<<struct Gen(x86)>>
<<struct Gen2(x86)>>

extern	char*	Dlist[30];
extern	int	nDlist;
extern	Gen	nullgen;
extern	int	pass;
extern	char*	pathname;
extern	char*	thestring;
extern	Biobuf	obuf;

// for a.y
long	yylex(void);
void	checkscale(int);
void	outcode(int, Gen2*);

int	escchar(int);
//Sym*	getsym(void);

// for lexbody
void	setinclude(char*);
void*	allocn(void*, long, long);
void	errorexit(void);
Sym*	slookup(char*);
void	pinit(char*);
void	ieeedtod(Ieee*, double);
void	dodefine(char*);
void	yyerror(char*, ...);
int	yyparse(void);

// for macbody
int	getc(void);
void	unget(int);
void	pushio(void);
void	newio(void);
void	newfile(char*, int);

// for macbody, was in lexbody

int	mywait(int*);
int	mycreat(char*, int);
int	systemtype(int);
int	pathchar(void);
@


\subsection*{[[assemblers/8a/globals.c]]}

%-------------------------------------------------------------

<<assemblers/8a/globals.c>>=
#include "a.h"

<<global nullgen(x86)>>
@


\subsection*{[[assemblers/8a/lex.c]]}


%-------------------------------------------------------------

<<assemblers/8a/lex.c>>=
#include "a.h"
#include "y.tab.h"

void	cinit(void);
int		assemble(char*);
void	cclean(void);
void	outhist(void);

<<function main (assemblers/8a/lex.c)>>

<<function assemble(x86)>>

<<struct Itab(x86)>>
<<global itab(x86)>>

<<function cinit(x86)>>

<<function checkscale(x86)>>

<<function syminit>>

<<function cclean(x86)>>

<<function zname(x86)>>

<<function zaddr(x86)>>

<<function outcode(x86)>>

<<function outhist(x86)>>

// now use aa.a8
//#include "../cc/lexbody"
//#include "../cc/compat"

// used to be in ../cc/lexbody and factorized between assemblers by
// using #include, but ugly, so I copy pasted the function for now
<<function yylex(x86)>>

// #include "../cc/macbody"
@
