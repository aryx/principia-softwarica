-*- org -*-

* Recent

** Compiler (5c)

*** try modify nodretval to disable ANOP
so that can test if can compile with -N to disable
regopt and see if it still work

*** understand

**** understand deadheads()?

*** LP split

**** LP split bcomplex()

**** LP split part of boolgen()
so can see the AB generated at the end

**** LP arrange tcomo() split

*** rename

**** rename reg field for Node, Prog, and Adr
overloaded

**** rename offset fields, too many of them

**** rename OPROTO -> OPARAM?

*** remove

**** remove old style proto, and non ANSI stuff?
TOLD, OLDPROTO
so no need tmerge

**** remove -B (non ANSI) so transform some warn in diag

*** LP aspectize 

**** aspectize check unreachable code
**** check unused operation code

**** aspectize floats

*** read article again by ken thompson, will help to
understand for example the handling of complex returned values

*** read dragon book, lots of references to this book apparently,
will help understand acom()?

** Linker (5l)

*** rename

**** rename Gen -> Operand?

**** rename Adr -> Operand?

**** rename Prog -> Instruction?

**** disambiguate Prog.reg and Adr.reg, choose different names
add some unions for abuse of same field?

*** understand

**** SP? where is it saved? caller is responsible to restore?
see save and rest procedure with div?
what the compiler generates? 5c -S ?

**** immrot, look machine.nw semantic vs immrot() code

**** pool? immaddr? immhalf?

**** comment profiling section and the code that generate instructions,
can help also understand Assembler.nw

****  asmsym()

**** D_FILE1??


*** refactor

**** better orga symbol table with different namespace,
like in compiler! and now assembler

**** easy: designator for Mach fields


** Assembler (5a)

*** disambiguate Prog.reg and Adr.reg, choose different names
add some unions for abuse of same field?

*** use SYMIDX_NONE?

*** less: understand AHISTORY

*** less: introduce a D_ADDR? they abuse D_CONST I Think
for $ oreg


** Acid/db

*** read papers, learn to use it to show at least the code of
some instructions generating a segfault!
create a simple segfault.c test file


* Code

** Plan9

*** try compile mk with regular C compiler and lib9 of kencc!
=> faster devel loop!
same for rc!

*** HOW INTERRUPT process?? see mk, I tried C-d, C-c, but could not
stop

*** get rid of elf.h? (at least move it out of include/)
I don't have macho.h anyway
hmm but to bench 8c it might be good at one point to
generate elf

*** try compile with lib9.h on mac?
lib9.h -> libc.h and have a -Include that puts it first!
in CROSS/MacOSX ?

** Kencc

*** compare with otool -h

*** make inm work for macho binaries?
still does not work :(

** Refactoring, libraries

*** strcmp is really ugly
strcmp(s->name, mactab[i].macname) == 0)
bool string__equal()!
macro? would like inline function ... hmm would like ocamlopt that does
this for you!

what is string_equal in Go? They use strcmp too?

* Books

** Machine.nw

*** look vi/, simpler?

*** LP split dpex()

*** add opcode_ir, opcode_class, opcode_cond
`so clearer what is derived from opcode and what is runtime

*** dodge the bullet, have a cleaner opcode enum?
with AND_0, AND_1, etc
but then arm_class code is less short ...

*** need machdata = armmach?

*** LPize the -=4 or make it cleaner,
like actually do the REGPC+=4 instead?

*** less: Instr -> InstrDecoder? InstrInfo?

** Assembler.nw

*** toy.s! helloworld.s with just interrupt
easier if can learn to use sam ... so can edit
from plan9 and refine

*** read more code, zaddr(), symbol table

*** assembler: more output code generation part

*** assembler: lp split Sym and typeify fields
hmm but take care because 5a and va must define Sym in the same way
otherwise get some conflicts with aa/ when linking

*** assembler: lp split Gen?

*** reread manual assembler again, note concepts and explain better
things

*** less: xix-assembler.ml?

** Linker.nw

*** when used multiple times the same [xxx] = yyy entry
in 5i:
(1770)	DATA	itab+2040(SB)/4,$Ilsm+0(SB)
memchr: multiple initialization

*** errorcodeify linker


*** understand ldobj()
inverse of outcode+zaddr from asm and compiler?

*** look at some of the 8 passes

*** understand the Xconv

*** profiling section?

*** linker: debugging support section, can help understand
different kinds of entities

*** linker: lp split fields Prog, put closer to the functions that are using
them

*** linker: factorize the ugly gethunk


** Compiler.nw

*** LP split main

*** LP split compile


*** errorcodeify compiler
so many different error conventions there ...

*** read johnson and ritchie paper (and latest thompson)
read aho?

*** elements OYYY that appears after parsing?

*** restore the packxxx? dpchck?
was dead in assembler but live in compiler no?
look at kencc/?

*** change order AST? closer to my ast_c.ml?

*** Xconv study

*** cg on Node, see stuff unused, or stuff used only after parsing

*** move xnames in debugging section

*** ------------------------------------------

*** !!!!bench it!!!! like compcert, evaluate how fast it is compared to
gcc ... use the benchmark of compcert? need backport the macos
binary to kencc? or try compile on linux? (would be good to compile
on linux anyway plan9 at some point anyway)

see ~/bench_c/

*** read plan9 C compiler manual

*** mv code out of pswt.c, nullwarn, etc portable but not related to switch

*** look at all the debugging options
(and maybe try on tests/helloc.c)
and add relevant sections in TOC?

*** remove 64bit stuff?

*** move globals closer to their module?
look what I did for the assembler

** Intepreter.nw

*** switch to 2014 version? file not that much longer,
but better organized, more efficient,
and support call/cc

now that distributed first version, can now switch to other one
with same split, so also interesting to see evolution.

also maybe can do bench!


** Make.mw

mk: don't know how to make 'screen.h' in /Users/pad/github/fork-plan9/sys/src/9/pc

=> improve error! at least say where this screen.h come from

mk objtype=arm
does not work when run under plan9 :( rc issue apparently

*** graph()! vacuous checks understand??
I got lots of them in /sys/src/libc when recompiling under plan9

*** rule flag distribution!

*** refactor did in a global!
(and check still no bugs!)

*** prog???

** Thread.nw (via Libcore.tex.nw)

*** understand alts()?
how listen to mouse and keyboard at the same time?
I didn't see any select syscall in plan9


** Graphics.nw

http://blog.golang.org/go-imagedraw-package

*** understand Screen, screenimage in Display, etc

*** move more generic stuff that now just depends on gscreen to screen.c
like software cursor, graphical text mode

*** merge screenimage and gscreen in a screen.c?

*** remove hwdraw.c and iprint.c?




*** can get rid of vgavesa now? just put in BIG/?

*** apps/clock.c, try to understand main APIs, feel
 
*** Extra libmemdraw/draw.c, lots of stuff still
memimagedraw()? hwdraw?

*** memdrawtest.c? run?

*** follow one op until the end, full trace of a draw
rectangle!

*** EASY reorg initdisplay to better error managment style a la Linux style

*** EASY the drawxxx unmarshaller

*** LP split initdisplay
depends on previous item

*** LPize windows/layers/screens
in many places arguments can take an additional screenid
that complicate a lot things

** Window.nw


*** wmousectl can be called with middle click or right click??
I think it's intercepted before

*** put file server before? will need to fully explain
graphical and textual windows anyway, with their /dev/xxx

*** understand mousethread drag and bandsize, what are the conditions?
winborder!! so LP split it to put in right section!

*** LP split window creation, mv stuff from new() and wmk()
below

*** debug rio? can have list of threads?

*** thread xxx, all places where threadname()


** Shell.nw

*** bug: rc2 C-d => panic
use acid? need a /sys/lib/acid/port and /sys/lib/acid/386/
because remove some code?

rc2 is my own variant of rc with a simplified bootstrapcode,
so this is probably why C-d have some errors, because my bootstrap
is not correct.

*** function via emit(fnstr), nice :) fn are actually local variables? :)
and then eval?

*** EASY ctor, builtin, opcode
=> rename execxxx that are not builtins!

*** EASY more consistent type capitalized, and consistent use of typedefs
Code, Tree, etc


** Kernel.nw

*** resume, cleanup those proc_error, etc,
use regular names and put a special comment in the .tex.nw

*** plan9: filesystem

**** use the fs of xv6?
need to port to 9p though

is compatible also with mac, in the sense that can build distrib
from my mac I think, via their scripts/mkfs.c :)

**** simplefs? dosfs? instead of dossrv?
make my own? include dossrv core in kernel directly?

vfat is a bit ugly ... with the 8.3 original limitation and verrue
on top of it to handle longer filenames. but fat is compatible
easily with mac so easy to mount/inspect and make a distribution.

look paqfs, flashfs?
devtinyfs (from 9atom): hmm looks really a toy

*** plan9: understand stuff
start Windows.tex.nw? I would like to understand how xterm works with the
buffered input and redirection! but will need to understand lib_graphics and
lib_thread?

**** proctext, Qtext, put where?
nice redirection :) useful to have open indeed!

**** Qns, use of mountid?

**** umh = mount head when have union (that is at least 2)
if have just one then just use channel gqid itself, that is mh->mount-to
first Mount stuff.

**** pgrpid?

**** newfgrp(), just call duppgrp
and generalizes this?

**** have a type for type + dev + qid?
gqid? globally unique id?

**** consistent put vs close vs free, new vs dup vs alloc, dup vs cpy
cclose vs putmhead? newchan vs duppgrp?
put is a bad name I think.

**** 2 chans parameters of walk()? look at devwalk()?

**** have a typedef for permission and openmode, and use PERM_EMPTY instead of 0

**** -----------------------------------------------

**** serial? 8250 controller? qemu special console?
minicom?

**** include devmouse.c? in device?
even though not really used
cat /dev/mouse and do stuff?
also explain that actually draws the cursor somewhere?

**** remove Kmouse, seems not executed

**** try produce ^P that reboots?
need that when want to reboot at distance? hmm could just
run /bin/reboot no?

**** try produce ^U?

**** --------------------------------------------------------

**** lp split fault(), split error checking, split pagetable walk

**** lp split pio()
with demand load or swapping in case

**** lp split page fault
with demand load, copy on write, swapping in

**** lp split sysrfork()

**** lp split sysexec()

**** cachedel

**** -----------------------------------------------

**** how setup serial console! i8250console, rdb, etc?
C-Alt-3 on qemu?

**** more on meminit()?

**** assign dbgreg to the right section, try understand the debugger?
what about Trace_me too?

**** perfticks, fastticks, ??

**** implement a 'strace pid' that attach to existing process that works!
need write stop I think, and then not do the waitstop

**** understand ps and pstree

**** can emulate C-z? C-c? ask to 9fans? what about ulimit?

*** plan9: emails 9fans

**** report deadcode about OTRUNC?
because if put special logic for this special flag, should do the
same with the other like OCEXEC, etc no?

**** Ref for Mount? ugly cafebeef

*** plan9: add comments

**** keyboard comment
job of Keyboard section lead to adjust Conskbd things and
also echo back on the screen running the hooks

but then buffered input! when do \b then go back don't add in kbdq
for programs that read, and also block them until \n, and
in turn those programs can output stuff (but note that
it's the job of kernel to output keyboard typed key! not the program!)

**** add notes about simplified memory model

***** typedef page_or_swap?
and add note that pagedir/pagetable are in mmused, so not swappable.
only pages from process segments are considered for swapping.
PageOrSwap is used only at one place!

***** imitate more other archi so that don't need kmap thing?
if give less virtual space to process, and make kernel start earlier,
and that import limitations on DRAM, then far easier!

try first with changing KZERO and see if it compiles!

then add a check in memory detection that panic if too much memory!

maybe then can move this discussion in advanced chapter? like SMP
but called BIG MEMORY system?

***** rename CPU0PTE to CPU0KZEROPAGETABLE
and CPU0PDB to CPU0MMUPAGEDIR?

*****
Note that far less efficient that Intel way to represent things no?
but here we want to store the reverse information too? and free list.
and want
to be portable so have to store this info. Compute
sizeof info when use mmu and when use portable stuff?
for mmu:  1 mmupd (= 4KB), 1024 mmupt (= 1024 x 4KB) => 1025 Pages = 4Mo.
for plan9: 1 Segment (= x?), 1984 Pagetable* (= 1984 x 4B),
 1984 Pagetable (= 1984 x ?) + 1984 x 256 Page* (=? x 4B),
 = 1984 x 256 x Page (=? x ??) => ?? Mo?
 except can't have more Page than physical memory (+swap?)

sizeof Page? sizeof Pte?
will have enough of space to store meta data about all physical pages?
need it? could do without?

***** MAXKPA
can help to explain that when turn on segment+pagination (which we want,
it's a too nice hardware feature),
then every memory access involve the MMU. There is no way to do a 
MOV_WITH_DISABLED_MMU PHYSICAL_ADDRESS, AX.
MMU configured so that from KZERO up to 0xFFFFFFFF it's simple
mapping 1 to 1 to physical memory. Very simple. Convenient. so never fault
when access kernel data (and chicken and egg issues).
if kernel need access physical memory < maxkpa, great, easy.

But if machine has more than that ... then it needs
to adjust VPT to point to the right place ...
VPT itself is in virtual memory? chicken and egg?

    /*
     * can't go past the end of virtual memory
     * (ulong)-KZERO is 2^32 - KZERO
     */


***** understand the double map of kzero thing. Mentioned in balestero?
like in bcm, you can't enable pagniation if there is no identity mapping
for the first MB? it's like a pre condition?

***** can have fixfault from kernel? if don't use the VPT,
tmpmap, kmap, etc, can have a fault while in kernel code?

YES, for instance if process ask to write at certain va,
and do a syscall that for instance try to read /proc/self/mem
then procread could cause a fault addr when writing in va
if it's not allocated. It's ok.

***** more types?
Page* is abused for speaking about the page that can contain
many things, a page directory, a page table, user content, 
kernel content, other? introduce extra type?
typedef Page PageDirectory;?
typedef Page PageTable;?
typedef Page ??PageTable;

and also have the PortablePageTable vs MMUPageTable ...
and PortablePageDirectory vs MMUPageDirectory.

hmm but the name of the local pdb, pt, ... or field
should help find what kind of Page it is about.

***** mmuwalk, LEVEL1, LEVEL2 instead of 1 and 2, define enum!
so clearly explain data structure


*** plan9: kernel
spirit:
- use (and improve) codemap/codegraph to understand the code
- remove as much stuff as possible, especially optimizations (e.g. cache.c)
  but not too much, for instance support for SMP is important but can aspectize
  it and mv in in an Extra section

http://www.tldp.org/LDP/tlk/tlk-toc.html

**** keyboard issue: kencc bug? wrong compilation of unicode?
I only updated partially kencc/lib9 with UTFmax from 3 to 4, but
probably I have to port more code.

Alt-w-k does not generate the good character, how produce e cute?
I think kencc generates wrong things. 

**** halt works?
print when resume from halt?

put in power managment section?

**** typedef int error; !! OK0, OK1, ERROR1, ERRORNEG1
replace some of the int to error?

and make more consistent? some places where they do if(xx() < 0)
and where xx clearly does not return a count, then can
switch to a better error scheme.

count_or_error?

**** put back exit(1) in panic()
Also why so many Broken processes in ps?

panic because removed mtrrclock?

**** ----------------------------------------------------------


**** split some .c based on LP new TOC
(but use cg to make sure it does not depend on fancy stuff before doing the mv)

each time there is a newxxx there should be a file xxx.c and
if possible only the core stuff about this xxx in it
(so path.c, etc)

proc.c: 
 - scheduler.c
 - sleep_wakuep.c? or put in rendez?
 - notes.c
pgrp.c:
 - rendez.c? why in pgrp.c rendez vous stuff?
sysproc.c:
 - fork.c
 - exec.c

file.c:
 - path.c
 - block.c (mv stuff from iallocb.c and qio.c)
 - queue.c
 - fd.c? 

console.c:
 - cons_input.c
 - cons_output.c

files/env.c mv? in process/?

introduce ipc/ directory?

**** still? now that smaller kernel, can put on floppy? can do with
pbs? still this 'pbs' code is very ugly too

**** ------------------------------------------------------

**** still? disable SMP? easier to understand boot kmesgs?

**** less: remove in paddr() and kaddr() the ugly kern_addr2 and so on
hard to do

**** typedef enum xxx Xxx; ?

**** use foreach instead of those emap, end, etc
or at least be consistent and use nelem
or is it to avoid races? nah.

**** less: remove cpuserver?

**** again? remove vesa and realmode?
used by vga, vesa, can remove vesa support? cirrus logic not enough?
seems not enough last time I tried but maybe I did a mistake

**** still? try merge sched() and schedinit() and so remove need for Label
in cpu? can abuse the per-process kernel stack of another process
for more time?

Maybe can also try make sched() less defensive and panic earlier. I'm scared
we actually call sched() expecting the process would go to sleep
but it actually returns! like in qlock() ...

look balestero's notes!

**** lock return type? useless? send email?

**** semi: get rid of cache.c? or mv it closer to devmnt?

**** less: mv some err into error.h?

**** cleanup portdat_files.h, remove mnt stuff in devmnt?
or put more mnt stuff in devmnt? like mntrpc, etc.
Mnthead can stay in portdat_files.h though, for pgrp, but
specifics on mount and rpc not.

**** mv mpinit() in main.c?

**** get rid of some x86 cruft, like cmpswap386, etc?

**** get rid of ipv6? maybe better to understand first well
enough what is done in kernel/network/ in general

**** less: kerndate, cpuserver, do assign of kerndate = conf_kerndate; ?

**** make an alterative boot/ that is just boot.rc, no need boot/*.c

**** replace all those arenas by a more generic slab allocator?

*** plan9: lp

**** SEMI EASY more split LP devcons, put in the /dev/ section

**** SEMI EASY split LP /proc

**** less: LP split error.c?

**** -----------------------------------------------

**** less: rename more rendez vous r in something better
pager, clunq?

**** TVal -> Ttk?

**** kstack, kkstack?

**** ticks? = Hz per second clock interrupt?

**** syscall fd2path try to understand (in the end it's namec())

**** SEMI different forms of use of waserror, tricky
(but I start to get used to it, not so many ways)

**** do pathological case for xalloc, many
xalloc, free in the middle => fucked because too many holes

**** hzclock! and limited timerintr

**** split struct I8253, macro split FREQ and HZ, tod

**** i8253 with its field for timer

**** less: dumper category?

**** reread balestero's notes, should better understand more subtle things

* Misc

** Try install on linux for katrik
look at email of katrik

*** kencc: will have to adjust lib9.h like I did for Macos

*** $ROOT/sys/...
which will obleviate the need for make setup_host too!
do like in kencc?

** xv6: look at deps, cleanup? remove backward deps?
compile again? argh, cant use kencc

** Sam/acme? 
or rely more on efuns?

*** learn to use sam

** Marketting
ask publisher? oreilly?
ask friends? alexendrescu? bryan?

send to the guy who did "whole new world" video
https://www.destroyallsoftware.com/talks/a-whole-new-world

send to katrik?
