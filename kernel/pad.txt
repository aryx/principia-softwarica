# -*- org -*-

* Glossary

up = user process

pc = program counter

spl = set priority level

ilock = interrupt safe version of lock

umb = upper memory block

RMAP = RAM map?

cistrcmp= ??

PDB = page directory base

PTE = 

tod = time of day

* Misc

** spirit:

split in subdirectories instead of having the very flag port/ and pc/
Generalize what they have done for ip/ and boot/ and add concurrency/,
memory/, etc.

split portdat.h in subfiles, help understand things more
gradually. Make dependencies more clear.
Try to put the data ([port]dat) and prototype ([port]fns) closer to their
relevant directory (even though it can introduce backward dependencies).
I used to have a giant portdat_core.h but this was not good.

split portfns.h in subfiles, again help understand components.

Declare also in portfns_xxx.h the functions defined in 386/ which
are used in port/ code.
So put in the fns_xxx.h files, functions used only inside 386/.

Same for portdat_xxx.h, or at least declare in comments the
structures that are defined in 386/ but used outside in port.

** notes

I use // to comment, so it's easy to see if the code comes from me
(and no need verbose //pad:)

* Explanations

** up

"it can not be a global, because each processor have different user processes
so up is defined as a macro to be the extern up of the Mach per processor
structure

concurrency issue when accessing up? 

What can "interrupt" or execute in parallel with current kernel code?

Another processor can be also in kernel code, but it will be a different up!

The current kernel code can be interrupted, but interrupt code are supposed
to do very little so there should be no race on global important data structures.


** externup
why extern?

** spl
(lo, hi), lo = enable interrupt, hi = disable interrupt

** ilock vs lock

lock is good for mutual exclusion between different processors in kernel code,
but we also need mutual exclusion on same processor because kernel code
could have been interrupted (by interrupt) on the same processor.
so ilock allow to not lock yourself ...


