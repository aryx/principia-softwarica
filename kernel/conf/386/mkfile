TOP=../../../..
objtype=386
<$TOP/mkfiles/$objtype/mkfile

# $CONF is the configuration file, which is processed by many mkxxx scripts
CONF=qemu
CONFLIST=qemu
p=9

# see mem.h (the additional 20 are the size of the a.out header added by LD)
KTZERO_AND_HEADER=0xE0100020
# must match mem.h
APBOOTSTRAP=0xE0003000

DEVS=`rc ../port/mkdevlist $CONF`

PORT=\
     portfns.$O\
     portdat.$O\
	 portdat_memory.$O\
	 portdat_processes.$O\
	alarm.$O\
 	 pool.$O\
	alloc.$O\
	 sysmemory.$O\
	allocb.$O\
	auth.$O\
	cache.$O\
	mnt.$O\
	chan.$O\
	dev.$O\
	env.$O\
	edf.$O\
	fault.$O\
	page.$O\
	parse.$O\
	pgrp.$O\
	portclock.$O\
	print.$O\
     error.$O\
	proc.$O\
	qio.$O\
	qlock.$O\
	rdb.$O\
	rebootcmd.$O\
	segment.$O\
	swap.$O\
	file.$O\
	sysfile.$O\
 	 syssema.$O\
	sysproc.$O\
     systab.$O\
	syscallfmt.$O\
	taslock.$O\
     ref.$O\
	tod.$O\
	xalloc.$O\
	 random.$O\

# l_multiboot must be first!
OBJ=\
	 l_multiboot.$O\
	l.$O\
	 l_concurrency.$O\
	 l_io.$O\
	 l_fp.$O\
	 l_realmode.$O\
	 l_misc.$O\
	 l_trap.$O\
	 l_switch.$O\
	 concurrency.$O\
	plan9l.$O\
	cga.$O\
     time.$O\
     archgeneric.$O\
     arch.$O\
    x86.$O\
    iomap.$O\
	i8253.$O\
	i8259.$O\
	memory.$O\
	mmu.$O\
	nvram.$O\
	trap.$O\
	main.$O\
     fns.$O\
     dat.$O\
	 main_processes.$O\
	$CONF.root.$O\
	$CONF.rootc.$O\
	$DEVS\
	$PORT\

# the order matters!
#pad: we could switch libdraw.a to a smaller libgeometry.a
LIB=\
	$ROOT/$objtype/lib/libmemlayer.a\
	$ROOT/$objtype/lib/libmemdraw.a\
	$ROOT/$objtype/lib/libdraw.a\
	$ROOT/$objtype/lib/libip.a\
	$ROOT/$objtype/lib/libc.a\


ETHER=`{echo devether.c ether*.c | sed 's/\.c/.'$O'/g'}
VGA=`{echo devvga.c vga*.c | sed 's/\.c/.'$O'/g'}
SDEV=`{echo devsd.c sd*.c | sed 's/\.c/.'$O'/g'}

DATE=`{date -n}

#!!9qemu target!! use of -l so no automagic lib and no _main
$p$CONF:	$CONF.c $OBJ $LIB
	$CC $CFLAGS '-DKERNDATE='$DATE $CONF.c
	$LD -o $target -T$KTZERO_AND_HEADER -l $OBJ $CONF.$O $LIB
	ksize $target



install:V:	$p$CONF
	cp $p$CONF $ROOT/$objtype/
uninstall:V:
	rm -f $ROOT/$objtype/$p$CONF

# specify the port/*.c, ip/*.c rules
<../port/portmkfile
# inspect the 'bootdir' section of $CONF to generate $CONF.root.c target
<|rc ../port/mkbootrules $CONF

# should really be done via a 'mk depend'
main.$O:			init.h reboot.h
$ETHER: 			../port/etherif.h ../port/netif.h
$VGA mouse.$O:			screen.h ../port/portscreen.h $TOP/include/ALL/memdraw.h
$SDEV:				../port/sd.h
devfloppy.$O: 			floppy.h
archmp.$O mp.$O:		apbootstrap.h
apic.$O archmp.$O mp.$O:	mp.h
trap.$O:			$TOP/include/ALL/tos.h

init.h:D:		../port/initcode.c init9.c
	$CC $CFLAGS ../port/initcode.c
	$CC init9.c
	$LD -l -R1 -s -o init.out init9.$O initcode.$O $ROOT/$objtype/lib/libc.a
	{echo 'uchar initcode[]={'
	 xd -1x <init.out |	
     	sed 's/^[0-9a-f]+ //' | sed 's/ ([0-9a-f][0-9a-f])/0x\1,/g'
	 echo '};'} > init.h

reboot.h:D:	rebootcode.s
	$AS rebootcode.s
	$LD -l -s -T0x11000 -R4 -o reboot.out rebootcode.$O
	{echo 'uchar rebootcode[]={'
	 xd -1x reboot.out |
		sed -e '1,2d' -e 's/^[0-9a-f]+ //' -e 's/ ([0-9a-f][0-9a-f])/0x\1,/g'
	 echo '};'} > reboot.h


# for SMP stuff
apbootstrap.h:	apbootstrap.s mem.h
	$AS $prereq
	$LD -o apbootstrap.out -T$APBOOTSTRAP -R4 -l -s apbootstrap.$O
	{echo 'uchar apbootstrap[]={'
	 xd -1x apbootstrap.out |
		sed -e '1,2d' -e 's/^[0-9a-f]+ //' -e 's/ ([0-9a-f][0-9a-f])/0x\1,/g'
	 echo '};'} > $target


%.clean:V: extraclean

extraclean:V:
	rm -f apbootstrap.h

acid:V:
	8c -a -w -I. i8253.c > acid
