
# CONF is the configuration file, processed by many mkxxx scripts
CONF=pi
CONFLIST=pi pi2

objtype=arm
</$objtype/mkfile
p=9

# The Raspberry Pi loads the kernel at 0x8000 Physical, but we link
# the kernel at high address space above 0x80000000 because that's where
# the kernel will be virtually, so 0x80000000 + 0x8000 = 0x80008000
# (see also KTZERO in mem.h)
loadaddr=0x80008000

DEVS=`{rc ../port/mkdevlist $CONF}

PORT=\
     portfns.$O\
     portdat.$O\
	 portdat_memory.$O\
	 portdat_processes.$O\
	alarm.$O\
	alloc.$O\
 	 pool.$O\
	 sysmemory.$O\
	allocb.$O\
	auth.$O\
	cache.$O\
	mnt.$O\
	chan.$O\
	dev.$O\
	env.$O\
	edf.$O\
	fault.$O\
	page.$O\
	parse.$O\
	pgrp.$O\
	portclock.$O\
	print.$O\
     error.$O\
	proc.$O\
	qio.$O\
	qlock.$O\
	rdb.$O\
	rebootcmd.$O\
	segment.$O\
	swap.$O\
	file.$O\
	sysfile.$O\
 	 syssema.$O\
	sysproc.$O\
     systab.$O\
    syscallfmt.$O\
	taslock.$O\
     ref.$O\
	tod.$O\
	xalloc.$O\
    \
	mul64fract.$O\
	random.$O\

OBJ=\
	l.$O\
	lexception.$O\
	lproc.$O\
	arch.$O\
	clock.$O\
	mmu.$O\
	syscall.$O\
	trap.$O\
	main.$O\
	$CONF.root.$O\
	$CONF.rootc.$O\
	$DEVS\
	$PORT\

# the order matters!
LIB=\
	/$objtype/lib/libmemlayer.a\
	/$objtype/lib/libmemdraw.a\
	/$objtype/lib/libdraw.a\
	/$objtype/lib/libip.a\
	/$objtype/lib/libc.a\

9:V: $p$CONF

DATE=`{date -n}

# use of -l so no automagic lib and no _main
$p$CONF: $CONF.c $OBJ $LIB mkfile
	$CC $CFLAGS '-DKERNDATE='$DATE $CONF.c
	echo '# linking raw kernel'	# H6: no headers, data segment aligned
	$LD -f -o $target -H6 -R4096 -T$loadaddr -l $OBJ $CONF.$O $LIB


install:V: $p$CONF
	cp $p$CONF /$objtype/


<../boot/bootmkfile
<../port/portmkfile
<|../port/mkbootrules $CONF

#TODO: should be done via 'mk depend'

arch.$O clock.$O main.$O mmu.$O screen.$O syscall.$O trap.$O: \
	/$objtype/include/ureg.h
archbcm.$O devether.$O: ../port/etherif.h ../port/netif.h
archbcm.$O: ../port/flashif.h
l.$O lexception.$O lproc.$O mmu.$O: arminstr.ha mem.h
main.$O: init.h reboot.h
devmouse.$O mouse.$O screen.$O:
devusb.$O: ../port/usb.h



init.h:D:	../port/initcode.c init9.s
	$CC $CFLAGS ../port/initcode.c
	$AS init9.s
	$LD -l -R1 -s -o init.out init9.$O initcode.$O /$objtype/lib/libc.a
	{echo 'uchar initcode[]={'
	 xd -1x <init.out |
		sed -e 's/^[0-9a-f]+ //' -e 's/ ([0-9a-f][0-9a-f])/0x\1,/g'
	 echo '};'} > init.h

reboot.h:D:	rebootcode.s arminstr.ha arm.h mem.h
	$AS rebootcode.s
	# -lc is only for memmove.  -T arg is PADDR(REBOOTADDR)
	$LD -l -s -T0x3400 -R4 -o reboot.out rebootcode.$O -lc
	{echo 'uchar rebootcode[]={'
	 xd -1x reboot.out |
		sed -e '1,2d' -e 's/^[0-9a-f]+ //' -e 's/ ([0-9a-f][0-9a-f])/0x\1,/g'
	 echo '};'} > reboot.h
